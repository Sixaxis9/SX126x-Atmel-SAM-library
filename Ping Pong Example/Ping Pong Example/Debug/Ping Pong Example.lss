
Ping Pong Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ecc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000010  20000000  00001ecc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020010  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020010  2**0
                  CONTENTS
  4 .bss          000000f8  20000010  00001edc  00020010  2**2
                  ALLOC
  5 .stack        00010000  20000108  00001fd4  00020010  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
  8 .debug_info   00023a61  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003be7  00000000  00000000  00043af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000d2c0  00000000  00000000  000476df  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000be8  00000000  00000000  0005499f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000fd8  00000000  00000000  00055587  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002f3c7  00000000  00000000  0005655f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000167c9  00000000  00000000  00085926  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000fd3eb  00000000  00000000  0009c0ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00001dc4  00000000  00000000  001994dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	08 01 01 20 e1 02 00 00 dd 02 00 00 dd 02 00 00     ... ............
      10:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      2c:	dd 02 00 00 dd 02 00 00 00 00 00 00 dd 02 00 00     ................
      3c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      4c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      5c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      6c:	dd 02 00 00 65 10 00 00 dd 02 00 00 dd 02 00 00     ....e...........
      7c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      8c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      9c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      ac:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      bc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      cc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      dc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      f4:	99 12 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     104:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     114:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     124:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     134:	dd 02 00 00 81 15 00 00 95 15 00 00 a9 15 00 00     ................
     144:	bd 15 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     154:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     164:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     174:	dd 02 00 00 00 00 00 00 00 00 00 00 dd 02 00 00     ................
     184:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
     194:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1a4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1b4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1c4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1d4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1e4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1f4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     204:	dd 02 00 00 b5 1a 00 00 dd 02 00 00 dd 02 00 00     ................
     214:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     224:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     234:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     244:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     254:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000010 	.word	0x20000010
     280:	00000000 	.word	0x00000000
     284:	00001ecc 	.word	0x00001ecc

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00001ecc 	.word	0x00001ecc
     2c4:	20000014 	.word	0x20000014
     2c8:	00001ecc 	.word	0x00001ecc
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b01      	ldr	r3, [pc, #4]	; (2d8 <atmel_start_init+0x8>)
     2d4:	4798      	blx	r3
     2d6:	bd08      	pop	{r3, pc}
     2d8:	00000599 	.word	0x00000599

000002dc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2dc:	e7fe      	b.n	2dc <Dummy_Handler>
	...

000002e0 <Reset_Handler>:
{
     2e0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2e2:	4b1c      	ldr	r3, [pc, #112]	; (354 <Reset_Handler+0x74>)
     2e4:	4a1c      	ldr	r2, [pc, #112]	; (358 <Reset_Handler+0x78>)
     2e6:	429a      	cmp	r2, r3
     2e8:	d010      	beq.n	30c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x7c>)
     2ec:	4a19      	ldr	r2, [pc, #100]	; (354 <Reset_Handler+0x74>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d20c      	bcs.n	30c <Reset_Handler+0x2c>
     2f2:	3b01      	subs	r3, #1
     2f4:	1a9b      	subs	r3, r3, r2
     2f6:	f023 0303 	bic.w	r3, r3, #3
     2fa:	3304      	adds	r3, #4
     2fc:	4413      	add	r3, r2
     2fe:	4916      	ldr	r1, [pc, #88]	; (358 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     300:	f851 0b04 	ldr.w	r0, [r1], #4
     304:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     308:	429a      	cmp	r2, r3
     30a:	d1f9      	bne.n	300 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     30c:	4b14      	ldr	r3, [pc, #80]	; (360 <Reset_Handler+0x80>)
     30e:	4a15      	ldr	r2, [pc, #84]	; (364 <Reset_Handler+0x84>)
     310:	429a      	cmp	r2, r3
     312:	d20a      	bcs.n	32a <Reset_Handler+0x4a>
     314:	3b01      	subs	r3, #1
     316:	1a9b      	subs	r3, r3, r2
     318:	f023 0303 	bic.w	r3, r3, #3
     31c:	3304      	adds	r3, #4
     31e:	4413      	add	r3, r2
                *pDest++ = 0;
     320:	2100      	movs	r1, #0
     322:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     326:	4293      	cmp	r3, r2
     328:	d1fb      	bne.n	322 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     32a:	4b0f      	ldr	r3, [pc, #60]	; (368 <Reset_Handler+0x88>)
     32c:	4a0f      	ldr	r2, [pc, #60]	; (36c <Reset_Handler+0x8c>)
     32e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     332:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     334:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     338:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     33c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     340:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     344:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     348:	4b09      	ldr	r3, [pc, #36]	; (370 <Reset_Handler+0x90>)
     34a:	4798      	blx	r3
        main();
     34c:	4b09      	ldr	r3, [pc, #36]	; (374 <Reset_Handler+0x94>)
     34e:	4798      	blx	r3
     350:	e7fe      	b.n	350 <Reset_Handler+0x70>
     352:	bf00      	nop
     354:	20000000 	.word	0x20000000
     358:	00001ecc 	.word	0x00001ecc
     35c:	20000010 	.word	0x20000010
     360:	20000108 	.word	0x20000108
     364:	20000010 	.word	0x20000010
     368:	e000ed00 	.word	0xe000ed00
     36c:	00000000 	.word	0x00000000
     370:	00001cfd 	.word	0x00001cfd
     374:	00001b55 	.word	0x00001b55

00000378 <EXTERNAL_IRQ_0_init>:
struct timer_descriptor       TIMER_0;

static uint8_t USART_0_buffer[USART_0_BUFFER_SIZE];

void EXTERNAL_IRQ_0_init(void)
{
     378:	b508      	push	{r3, lr}
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     37a:	2240      	movs	r2, #64	; 0x40
     37c:	4b15      	ldr	r3, [pc, #84]	; (3d4 <EXTERNAL_IRQ_0_init+0x5c>)
     37e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     382:	4a15      	ldr	r2, [pc, #84]	; (3d8 <EXTERNAL_IRQ_0_init+0x60>)
     384:	6953      	ldr	r3, [r2, #20]
     386:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     38a:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     38c:	4b13      	ldr	r3, [pc, #76]	; (3dc <EXTERNAL_IRQ_0_init+0x64>)
     38e:	2201      	movs	r2, #1
     390:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     394:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     398:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     39c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     3a0:	4a0f      	ldr	r2, [pc, #60]	; (3e0 <EXTERNAL_IRQ_0_init+0x68>)
     3a2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     3a6:	f893 2140 	ldrb.w	r2, [r3, #320]	; 0x140
     3aa:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     3ae:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3b2:	f893 2140 	ldrb.w	r2, [r3, #320]	; 0x140
	tmp &= ~PORT_PINCFG_PMUXEN;
     3b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3ba:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3be:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3c2:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3c6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3ca:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(DIO1, PINMUX_PC00A_EIC_EXTINT0);

	ext_irq_init();
     3ce:	4b05      	ldr	r3, [pc, #20]	; (3e4 <EXTERNAL_IRQ_0_init+0x6c>)
     3d0:	4798      	blx	r3
     3d2:	bd08      	pop	{r3, pc}
     3d4:	40001c00 	.word	0x40001c00
     3d8:	40000800 	.word	0x40000800
     3dc:	41008000 	.word	0x41008000
     3e0:	c0020000 	.word	0xc0020000
     3e4:	00000735 	.word	0x00000735

000003e8 <SPI_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3e8:	4b28      	ldr	r3, [pc, #160]	; (48c <SPI_0_PORT_init+0xa4>)
     3ea:	2210      	movs	r2, #16
     3ec:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3ee:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3f0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3f4:	629a      	str	r2, [r3, #40]	; 0x28
     3f6:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     3fa:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3fc:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     400:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     404:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     40c:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     410:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     414:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     418:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     41c:	2220      	movs	r2, #32
     41e:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     420:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     422:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     426:	629a      	str	r2, [r3, #40]	; 0x28
     428:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     42a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     42e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     432:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     436:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     43a:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     43e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     442:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     446:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     44a:	2240      	movs	r2, #64	; 0x40
     44c:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     44e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     452:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     456:	629a      	str	r2, [r3, #40]	; 0x28
     458:	4a0d      	ldr	r2, [pc, #52]	; (490 <SPI_0_PORT_init+0xa8>)
     45a:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     45c:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
     460:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     464:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     468:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     46c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     470:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     474:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     478:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     47c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     480:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     484:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
     488:	4770      	bx	lr
     48a:	bf00      	nop
     48c:	41008000 	.word	0x41008000
     490:	c0020000 	.word	0xc0020000

00000494 <SPI_0_CLOCK_init>:
     494:	4b06      	ldr	r3, [pc, #24]	; (4b0 <SPI_0_CLOCK_init+0x1c>)
     496:	2240      	movs	r2, #64	; 0x40
     498:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     49c:	2243      	movs	r2, #67	; 0x43
     49e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBAMASK_SERCOM0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     4a2:	4a04      	ldr	r2, [pc, #16]	; (4b4 <SPI_0_CLOCK_init+0x20>)
     4a4:	6953      	ldr	r3, [r2, #20]
     4a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     4aa:	6153      	str	r3, [r2, #20]
     4ac:	4770      	bx	lr
     4ae:	bf00      	nop
     4b0:	40001c00 	.word	0x40001c00
     4b4:	40000800 	.word	0x40000800

000004b8 <SPI_0_init>:

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
}

void SPI_0_init(void)
{
     4b8:	b508      	push	{r3, lr}
	SPI_0_CLOCK_init();
     4ba:	4b04      	ldr	r3, [pc, #16]	; (4cc <SPI_0_init+0x14>)
     4bc:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM0);
     4be:	4904      	ldr	r1, [pc, #16]	; (4d0 <SPI_0_init+0x18>)
     4c0:	4804      	ldr	r0, [pc, #16]	; (4d4 <SPI_0_init+0x1c>)
     4c2:	4b05      	ldr	r3, [pc, #20]	; (4d8 <SPI_0_init+0x20>)
     4c4:	4798      	blx	r3
	SPI_0_PORT_init();
     4c6:	4b05      	ldr	r3, [pc, #20]	; (4dc <SPI_0_init+0x24>)
     4c8:	4798      	blx	r3
     4ca:	bd08      	pop	{r3, pc}
     4cc:	00000495 	.word	0x00000495
     4d0:	40003000 	.word	0x40003000
     4d4:	20000054 	.word	0x20000054
     4d8:	00000789 	.word	0x00000789
     4dc:	000003e9 	.word	0x000003e9

000004e0 <USART_0_CLOCK_init>:
     4e0:	4b06      	ldr	r3, [pc, #24]	; (4fc <USART_0_CLOCK_init+0x1c>)
     4e2:	2240      	movs	r2, #64	; 0x40
     4e4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     4e8:	2243      	movs	r2, #67	; 0x43
     4ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     4ee:	4a04      	ldr	r2, [pc, #16]	; (500 <USART_0_CLOCK_init+0x20>)
     4f0:	6a13      	ldr	r3, [r2, #32]
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	6213      	str	r3, [r2, #32]
     4f8:	4770      	bx	lr
     4fa:	bf00      	nop
     4fc:	40001c00 	.word	0x40001c00
     500:	40000800 	.word	0x40000800

00000504 <USART_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     504:	4b10      	ldr	r3, [pc, #64]	; (548 <USART_0_PORT_init+0x44>)
     506:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     50a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     50e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     512:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     516:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     51a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     51e:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     522:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     526:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     52a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     52e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     532:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     536:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     53a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     53e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     542:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
     546:	4770      	bx	lr
     548:	41008000 	.word	0x41008000

0000054c <USART_0_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_0_init(void)
{
     54c:	b510      	push	{r4, lr}
     54e:	b082      	sub	sp, #8
	USART_0_CLOCK_init();
     550:	4b07      	ldr	r3, [pc, #28]	; (570 <USART_0_init+0x24>)
     552:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM4, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     554:	2300      	movs	r3, #0
     556:	9300      	str	r3, [sp, #0]
     558:	2310      	movs	r3, #16
     55a:	4a06      	ldr	r2, [pc, #24]	; (574 <USART_0_init+0x28>)
     55c:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     560:	4805      	ldr	r0, [pc, #20]	; (578 <USART_0_init+0x2c>)
     562:	4c06      	ldr	r4, [pc, #24]	; (57c <USART_0_init+0x30>)
     564:	47a0      	blx	r4
	USART_0_PORT_init();
     566:	4b06      	ldr	r3, [pc, #24]	; (580 <USART_0_init+0x34>)
     568:	4798      	blx	r3
}
     56a:	b002      	add	sp, #8
     56c:	bd10      	pop	{r4, pc}
     56e:	bf00      	nop
     570:	000004e1 	.word	0x000004e1
     574:	2000002c 	.word	0x2000002c
     578:	2000006c 	.word	0x2000006c
     57c:	00000c8d 	.word	0x00000c8d
     580:	00000505 	.word	0x00000505

00000584 <delay_driver_init>:

void delay_driver_init(void)
{
     584:	b508      	push	{r3, lr}
	delay_init(SysTick);
     586:	4802      	ldr	r0, [pc, #8]	; (590 <delay_driver_init+0xc>)
     588:	4b02      	ldr	r3, [pc, #8]	; (594 <delay_driver_init+0x10>)
     58a:	4798      	blx	r3
     58c:	bd08      	pop	{r3, pc}
     58e:	bf00      	nop
     590:	e000e010 	.word	0xe000e010
     594:	000006c9 	.word	0x000006c9

00000598 <system_init>:

	timer_init(&TIMER_0, TC7, _tc_get_timer());
}

void system_init(void)
{
     598:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     59a:	4b35      	ldr	r3, [pc, #212]	; (670 <system_init+0xd8>)
     59c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     59e:	4b35      	ldr	r3, [pc, #212]	; (674 <system_init+0xdc>)
     5a0:	2202      	movs	r2, #2
     5a2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5aa:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     5ae:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     5b2:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     5b6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ba:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
	tmp &= ~PORT_PINCFG_PMUXEN;
     5be:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5c2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     5c6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     5ca:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5ce:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5d2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     5d6:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
     5da:	4a27      	ldr	r2, [pc, #156]	; (678 <system_init+0xe0>)
     5dc:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5e0:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     5e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5e8:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     5ec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
     5f0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5f4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5f8:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
     5fc:	4a1f      	ldr	r2, [pc, #124]	; (67c <system_init+0xe4>)
     5fe:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     602:	f893 2153 	ldrb.w	r2, [r3, #339]	; 0x153
	tmp &= ~PORT_PINCFG_PMUXEN;
     606:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     60a:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     60e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
     612:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     616:	4a1a      	ldr	r2, [pc, #104]	; (680 <system_init+0xe8>)
     618:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     61c:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
     620:	3210      	adds	r2, #16
     622:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     626:	f893 2154 	ldrb.w	r2, [r3, #340]	; 0x154
     62a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     62e:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     632:	f893 2154 	ldrb.w	r2, [r3, #340]	; 0x154
	tmp &= ~PORT_PINCFG_PMUXEN;
     636:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     63a:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(BUSY, GPIO_PIN_FUNCTION_OFF);

	EXTERNAL_IRQ_0_init();
     63e:	4b11      	ldr	r3, [pc, #68]	; (684 <system_init+0xec>)
     640:	4798      	blx	r3

	SPI_0_init();
     642:	4b11      	ldr	r3, [pc, #68]	; (688 <system_init+0xf0>)
     644:	4798      	blx	r3
	USART_0_init();
     646:	4b11      	ldr	r3, [pc, #68]	; (68c <system_init+0xf4>)
     648:	4798      	blx	r3

	delay_driver_init();
     64a:	4b11      	ldr	r3, [pc, #68]	; (690 <system_init+0xf8>)
     64c:	4798      	blx	r3
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
     64e:	4a11      	ldr	r2, [pc, #68]	; (694 <system_init+0xfc>)
     650:	6a13      	ldr	r3, [r2, #32]
     652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     656:	6213      	str	r3, [r2, #32]
     658:	2240      	movs	r2, #64	; 0x40
     65a:	4b0f      	ldr	r3, [pc, #60]	; (698 <system_init+0x100>)
     65c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	timer_init(&TIMER_0, TC7, _tc_get_timer());
     660:	4b0e      	ldr	r3, [pc, #56]	; (69c <system_init+0x104>)
     662:	4798      	blx	r3
     664:	4602      	mov	r2, r0
     666:	490e      	ldr	r1, [pc, #56]	; (6a0 <system_init+0x108>)
     668:	480e      	ldr	r0, [pc, #56]	; (6a4 <system_init+0x10c>)
     66a:	4b0f      	ldr	r3, [pc, #60]	; (6a8 <system_init+0x110>)
     66c:	4798      	blx	r3
     66e:	bd08      	pop	{r3, pc}
     670:	00000f6d 	.word	0x00000f6d
     674:	41008000 	.word	0x41008000
     678:	c0000004 	.word	0xc0000004
     67c:	c0000008 	.word	0xc0000008
     680:	40020000 	.word	0x40020000
     684:	00000379 	.word	0x00000379
     688:	000004b9 	.word	0x000004b9
     68c:	0000054d 	.word	0x0000054d
     690:	00000585 	.word	0x00000585
     694:	40000800 	.word	0x40000800
     698:	40001c00 	.word	0x40001c00
     69c:	00001a6f 	.word	0x00001a6f
     6a0:	43001800 	.word	0x43001800
     6a4:	200000bc 	.word	0x200000bc
     6a8:	000009bd 	.word	0x000009bd

000006ac <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     6ac:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     6b0:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     6b2:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     6b4:	f3bf 8f5f 	dmb	sy
     6b8:	4770      	bx	lr

000006ba <atomic_leave_critical>:
     6ba:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     6be:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     6c0:	f383 8810 	msr	PRIMASK, r3
     6c4:	4770      	bx	lr
	...

000006c8 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     6c8:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
     6ca:	4b02      	ldr	r3, [pc, #8]	; (6d4 <delay_init+0xc>)
     6cc:	6018      	str	r0, [r3, #0]
     6ce:	4b02      	ldr	r3, [pc, #8]	; (6d8 <delay_init+0x10>)
     6d0:	4798      	blx	r3
     6d2:	bd08      	pop	{r3, pc}
     6d4:	2000003c 	.word	0x2000003c
     6d8:	000017d5 	.word	0x000017d5

000006dc <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     6dc:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     6de:	4b04      	ldr	r3, [pc, #16]	; (6f0 <delay_ms+0x14>)
     6e0:	681c      	ldr	r4, [r3, #0]
     6e2:	4b04      	ldr	r3, [pc, #16]	; (6f4 <delay_ms+0x18>)
     6e4:	4798      	blx	r3
     6e6:	4601      	mov	r1, r0
     6e8:	4620      	mov	r0, r4
     6ea:	4b03      	ldr	r3, [pc, #12]	; (6f8 <delay_ms+0x1c>)
     6ec:	4798      	blx	r3
     6ee:	bd10      	pop	{r4, pc}
     6f0:	2000003c 	.word	0x2000003c
     6f4:	00000f61 	.word	0x00000f61
     6f8:	000017e9 	.word	0x000017e9

000006fc <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     6fc:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
     6fe:	4b0c      	ldr	r3, [pc, #48]	; (730 <process_ext_irq+0x34>)
     700:	685c      	ldr	r4, [r3, #4]
     702:	42a0      	cmp	r0, r4
     704:	d00e      	beq.n	724 <process_ext_irq+0x28>
     706:	2301      	movs	r3, #1
     708:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
     70a:	461e      	mov	r6, r3
		} else {
			upper = middle - 1;
     70c:	25ff      	movs	r5, #255	; 0xff
     70e:	e003      	b.n	718 <process_ext_irq+0x1c>
     710:	462b      	mov	r3, r5
		if (middle >= EXT_IRQ_AMOUNT) {
     712:	185a      	adds	r2, r3, r1
     714:	0852      	lsrs	r2, r2, #1
     716:	d104      	bne.n	722 <process_ext_irq+0x26>
		if (ext_irqs[middle].pin < pin) {
     718:	42a0      	cmp	r0, r4
     71a:	d9f9      	bls.n	710 <process_ext_irq+0x14>
	while (upper >= lower) {
     71c:	b13b      	cbz	r3, 72e <process_ext_irq+0x32>
			lower = middle + 1;
     71e:	4631      	mov	r1, r6
     720:	e7f7      	b.n	712 <process_ext_irq+0x16>
     722:	bd70      	pop	{r4, r5, r6, pc}
			if (ext_irqs[middle].cb) {
     724:	4b02      	ldr	r3, [pc, #8]	; (730 <process_ext_irq+0x34>)
     726:	681b      	ldr	r3, [r3, #0]
     728:	b10b      	cbz	r3, 72e <process_ext_irq+0x32>
				ext_irqs[middle].cb();
     72a:	4798      	blx	r3
     72c:	bd70      	pop	{r4, r5, r6, pc}
     72e:	bd70      	pop	{r4, r5, r6, pc}
     730:	20000040 	.word	0x20000040

00000734 <ext_irq_init>:
{
     734:	b508      	push	{r3, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
     736:	4b05      	ldr	r3, [pc, #20]	; (74c <ext_irq_init+0x18>)
     738:	f04f 32ff 	mov.w	r2, #4294967295
     73c:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
     73e:	2200      	movs	r2, #0
     740:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
     742:	4803      	ldr	r0, [pc, #12]	; (750 <ext_irq_init+0x1c>)
     744:	4b03      	ldr	r3, [pc, #12]	; (754 <ext_irq_init+0x20>)
     746:	4798      	blx	r3
}
     748:	bd08      	pop	{r3, pc}
     74a:	bf00      	nop
     74c:	20000040 	.word	0x20000040
     750:	000006fd 	.word	0x000006fd
     754:	00000fad 	.word	0x00000fad

00000758 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     758:	b570      	push	{r4, r5, r6, lr}
     75a:	460d      	mov	r5, r1
     75c:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     75e:	4604      	mov	r4, r0
     760:	b160      	cbz	r0, 77c <io_write+0x24>
     762:	1c08      	adds	r0, r1, #0
     764:	bf18      	it	ne
     766:	2001      	movne	r0, #1
     768:	2234      	movs	r2, #52	; 0x34
     76a:	4905      	ldr	r1, [pc, #20]	; (780 <io_write+0x28>)
     76c:	4b05      	ldr	r3, [pc, #20]	; (784 <io_write+0x2c>)
     76e:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     770:	6823      	ldr	r3, [r4, #0]
     772:	4632      	mov	r2, r6
     774:	4629      	mov	r1, r5
     776:	4620      	mov	r0, r4
     778:	4798      	blx	r3
}
     77a:	bd70      	pop	{r4, r5, r6, pc}
     77c:	2000      	movs	r0, #0
     77e:	e7f3      	b.n	768 <io_write+0x10>
     780:	00001d44 	.word	0x00001d44
     784:	00000de5 	.word	0x00000de5

00000788 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     788:	b538      	push	{r3, r4, r5, lr}
     78a:	460d      	mov	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
     78c:	4604      	mov	r4, r0
     78e:	b1b8      	cbz	r0, 7c0 <spi_m_sync_init+0x38>
     790:	1c08      	adds	r0, r1, #0
     792:	bf18      	it	ne
     794:	2001      	movne	r0, #1
     796:	2240      	movs	r2, #64	; 0x40
     798:	490a      	ldr	r1, [pc, #40]	; (7c4 <spi_m_sync_init+0x3c>)
     79a:	4b0b      	ldr	r3, [pc, #44]	; (7c8 <spi_m_sync_init+0x40>)
     79c:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     79e:	4620      	mov	r0, r4
     7a0:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
     7a4:	4629      	mov	r1, r5
     7a6:	4b09      	ldr	r3, [pc, #36]	; (7cc <spi_m_sync_init+0x44>)
     7a8:	4798      	blx	r3

	if (rc < 0) {
     7aa:	2800      	cmp	r0, #0
     7ac:	db07      	blt.n	7be <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     7ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     7b2:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
     7b4:	4b06      	ldr	r3, [pc, #24]	; (7d0 <spi_m_sync_init+0x48>)
     7b6:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
     7b8:	4b06      	ldr	r3, [pc, #24]	; (7d4 <spi_m_sync_init+0x4c>)
     7ba:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
     7bc:	2000      	movs	r0, #0
}
     7be:	bd38      	pop	{r3, r4, r5, pc}
     7c0:	2000      	movs	r0, #0
     7c2:	e7e8      	b.n	796 <spi_m_sync_init+0xe>
     7c4:	00001d58 	.word	0x00001d58
     7c8:	00000de5 	.word	0x00000de5
     7cc:	000015d1 	.word	0x000015d1
     7d0:	0000087d 	.word	0x0000087d
     7d4:	00000841 	.word	0x00000841

000007d8 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
     7d8:	b510      	push	{r4, lr}
	ASSERT(spi);
     7da:	4604      	mov	r4, r0
     7dc:	2257      	movs	r2, #87	; 0x57
     7de:	4905      	ldr	r1, [pc, #20]	; (7f4 <spi_m_sync_enable+0x1c>)
     7e0:	3000      	adds	r0, #0
     7e2:	bf18      	it	ne
     7e4:	2001      	movne	r0, #1
     7e6:	4b04      	ldr	r3, [pc, #16]	; (7f8 <spi_m_sync_enable+0x20>)
     7e8:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
     7ea:	1d20      	adds	r0, r4, #4
     7ec:	4b03      	ldr	r3, [pc, #12]	; (7fc <spi_m_sync_enable+0x24>)
     7ee:	4798      	blx	r3
     7f0:	bd10      	pop	{r4, pc}
     7f2:	bf00      	nop
     7f4:	00001d58 	.word	0x00001d58
     7f8:	00000de5 	.word	0x00000de5
     7fc:	000016c5 	.word	0x000016c5

00000800 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     800:	b530      	push	{r4, r5, lr}
     802:	b085      	sub	sp, #20
     804:	460c      	mov	r4, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     806:	4605      	mov	r5, r0
     808:	b190      	cbz	r0, 830 <spi_m_sync_transfer+0x30>
     80a:	1c08      	adds	r0, r1, #0
     80c:	bf18      	it	ne
     80e:	2001      	movne	r0, #1
     810:	22b3      	movs	r2, #179	; 0xb3
     812:	4908      	ldr	r1, [pc, #32]	; (834 <spi_m_sync_transfer+0x34>)
     814:	4b08      	ldr	r3, [pc, #32]	; (838 <spi_m_sync_transfer+0x38>)
     816:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
     818:	6823      	ldr	r3, [r4, #0]
     81a:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
     81c:	6863      	ldr	r3, [r4, #4]
     81e:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
     820:	68a3      	ldr	r3, [r4, #8]
     822:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
     824:	a901      	add	r1, sp, #4
     826:	1d28      	adds	r0, r5, #4
     828:	4b04      	ldr	r3, [pc, #16]	; (83c <spi_m_sync_transfer+0x3c>)
     82a:	4798      	blx	r3
}
     82c:	b005      	add	sp, #20
     82e:	bd30      	pop	{r4, r5, pc}
     830:	2000      	movs	r0, #0
     832:	e7ed      	b.n	810 <spi_m_sync_transfer+0x10>
     834:	00001d58 	.word	0x00001d58
     838:	00000de5 	.word	0x00000de5
     83c:	000016f5 	.word	0x000016f5

00000840 <_spi_m_sync_io_write>:
{
     840:	b570      	push	{r4, r5, r6, lr}
     842:	b084      	sub	sp, #16
     844:	460e      	mov	r6, r1
     846:	4615      	mov	r5, r2
	ASSERT(io);
     848:	4604      	mov	r4, r0
     84a:	22a3      	movs	r2, #163	; 0xa3
     84c:	4908      	ldr	r1, [pc, #32]	; (870 <_spi_m_sync_io_write+0x30>)
     84e:	3000      	adds	r0, #0
     850:	bf18      	it	ne
     852:	2001      	movne	r0, #1
     854:	4b07      	ldr	r3, [pc, #28]	; (874 <_spi_m_sync_io_write+0x34>)
     856:	4798      	blx	r3
	xfer.rxbuf = 0;
     858:	2300      	movs	r3, #0
     85a:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
     85c:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
     85e:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     860:	a901      	add	r1, sp, #4
     862:	f1a4 000c 	sub.w	r0, r4, #12
     866:	4b04      	ldr	r3, [pc, #16]	; (878 <_spi_m_sync_io_write+0x38>)
     868:	4798      	blx	r3
}
     86a:	b004      	add	sp, #16
     86c:	bd70      	pop	{r4, r5, r6, pc}
     86e:	bf00      	nop
     870:	00001d58 	.word	0x00001d58
     874:	00000de5 	.word	0x00000de5
     878:	00000801 	.word	0x00000801

0000087c <_spi_m_sync_io_read>:
{
     87c:	b570      	push	{r4, r5, r6, lr}
     87e:	b084      	sub	sp, #16
     880:	460e      	mov	r6, r1
     882:	4615      	mov	r5, r2
	ASSERT(io);
     884:	4604      	mov	r4, r0
     886:	2287      	movs	r2, #135	; 0x87
     888:	4908      	ldr	r1, [pc, #32]	; (8ac <_spi_m_sync_io_read+0x30>)
     88a:	3000      	adds	r0, #0
     88c:	bf18      	it	ne
     88e:	2001      	movne	r0, #1
     890:	4b07      	ldr	r3, [pc, #28]	; (8b0 <_spi_m_sync_io_read+0x34>)
     892:	4798      	blx	r3
	xfer.rxbuf = buf;
     894:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
     896:	2300      	movs	r3, #0
     898:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
     89a:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     89c:	a901      	add	r1, sp, #4
     89e:	f1a4 000c 	sub.w	r0, r4, #12
     8a2:	4b04      	ldr	r3, [pc, #16]	; (8b4 <_spi_m_sync_io_read+0x38>)
     8a4:	4798      	blx	r3
}
     8a6:	b004      	add	sp, #16
     8a8:	bd70      	pop	{r4, r5, r6, pc}
     8aa:	bf00      	nop
     8ac:	00001d58 	.word	0x00001d58
     8b0:	00000de5 	.word	0x00000de5
     8b4:	00000801 	.word	0x00000801

000008b8 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
     8b8:	b538      	push	{r3, r4, r5, lr}
     8ba:	460d      	mov	r5, r1
	ASSERT(spi && io);
     8bc:	4604      	mov	r4, r0
     8be:	b150      	cbz	r0, 8d6 <spi_m_sync_get_io_descriptor+0x1e>
     8c0:	1c08      	adds	r0, r1, #0
     8c2:	bf18      	it	ne
     8c4:	2001      	movne	r0, #1
     8c6:	22bd      	movs	r2, #189	; 0xbd
     8c8:	4904      	ldr	r1, [pc, #16]	; (8dc <spi_m_sync_get_io_descriptor+0x24>)
     8ca:	4b05      	ldr	r3, [pc, #20]	; (8e0 <spi_m_sync_get_io_descriptor+0x28>)
     8cc:	4798      	blx	r3
	*io = &spi->io;
     8ce:	340c      	adds	r4, #12
     8d0:	602c      	str	r4, [r5, #0]
	return 0;
}
     8d2:	2000      	movs	r0, #0
     8d4:	bd38      	pop	{r3, r4, r5, pc}
     8d6:	2000      	movs	r0, #0
     8d8:	e7f5      	b.n	8c6 <spi_m_sync_get_io_descriptor+0xe>
     8da:	bf00      	nop
     8dc:	00001d58 	.word	0x00001d58
     8e0:	00000de5 	.word	0x00000de5

000008e4 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8e6:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     8e8:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     8ea:	b12f      	cbz	r7, 8f8 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
     8ec:	688d      	ldr	r5, [r1, #8]
     8ee:	463c      	mov	r4, r7
     8f0:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     8f2:	f1c2 0e01 	rsb	lr, r2, #1
     8f6:	e00b      	b.n	910 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
     8f8:	4b0e      	ldr	r3, [pc, #56]	; (934 <timer_add_timer_task+0x50>)
     8fa:	4798      	blx	r3
		return;
     8fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     8fe:	4473      	add	r3, lr
     900:	68a0      	ldr	r0, [r4, #8]
     902:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
     904:	42ab      	cmp	r3, r5
     906:	d20a      	bcs.n	91e <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
     908:	6823      	ldr	r3, [r4, #0]
     90a:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     90c:	b153      	cbz	r3, 924 <timer_add_timer_task+0x40>
     90e:	461c      	mov	r4, r3
		if (it->time_label <= time) {
     910:	6863      	ldr	r3, [r4, #4]
     912:	4293      	cmp	r3, r2
     914:	d8f3      	bhi.n	8fe <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
     916:	68a0      	ldr	r0, [r4, #8]
     918:	4403      	add	r3, r0
     91a:	1a9b      	subs	r3, r3, r2
     91c:	e7f2      	b.n	904 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
     91e:	42a7      	cmp	r7, r4
     920:	d004      	beq.n	92c <timer_add_timer_task+0x48>
     922:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     924:	4620      	mov	r0, r4
     926:	4b04      	ldr	r3, [pc, #16]	; (938 <timer_add_timer_task+0x54>)
     928:	4798      	blx	r3
     92a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     92c:	4660      	mov	r0, ip
     92e:	4b01      	ldr	r3, [pc, #4]	; (934 <timer_add_timer_task+0x50>)
     930:	4798      	blx	r3
     932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     934:	00000e0d 	.word	0x00000e0d
     938:	00000e39 	.word	0x00000e39

0000093c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     93c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
     940:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     942:	6907      	ldr	r7, [r0, #16]
     944:	3701      	adds	r7, #1
     946:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     948:	7e03      	ldrb	r3, [r0, #24]
     94a:	f013 0f01 	tst.w	r3, #1
     94e:	d113      	bne.n	978 <timer_process_counted+0x3c>
     950:	7e03      	ldrb	r3, [r0, #24]
     952:	f013 0f02 	tst.w	r3, #2
     956:	d10f      	bne.n	978 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
     958:	b354      	cbz	r4, 9b0 <timer_process_counted+0x74>
     95a:	6863      	ldr	r3, [r4, #4]
     95c:	1afb      	subs	r3, r7, r3
     95e:	68a2      	ldr	r2, [r4, #8]
     960:	4293      	cmp	r3, r2
     962:	d307      	bcc.n	974 <timer_process_counted+0x38>
     964:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
     966:	f100 0814 	add.w	r8, r0, #20
     96a:	f8df 9048 	ldr.w	r9, [pc, #72]	; 9b4 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
     96e:	f8df a048 	ldr.w	sl, [pc, #72]	; 9b8 <timer_process_counted+0x7c>
     972:	e012      	b.n	99a <timer_process_counted+0x5e>
     974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     978:	7e03      	ldrb	r3, [r0, #24]
     97a:	f043 0302 	orr.w	r3, r3, #2
     97e:	7603      	strb	r3, [r0, #24]
		return;
     980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     984:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
     986:	68e3      	ldr	r3, [r4, #12]
     988:	4620      	mov	r0, r4
     98a:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     98c:	b185      	cbz	r5, 9b0 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
     98e:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
     990:	686b      	ldr	r3, [r5, #4]
     992:	1afb      	subs	r3, r7, r3
     994:	68aa      	ldr	r2, [r5, #8]
     996:	4293      	cmp	r3, r2
     998:	d30a      	bcc.n	9b0 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
     99a:	4640      	mov	r0, r8
     99c:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
     99e:	7c23      	ldrb	r3, [r4, #16]
     9a0:	2b01      	cmp	r3, #1
     9a2:	d1ef      	bne.n	984 <timer_process_counted+0x48>
			tmp->time_label = time;
     9a4:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     9a6:	463a      	mov	r2, r7
     9a8:	4621      	mov	r1, r4
     9aa:	4640      	mov	r0, r8
     9ac:	47d0      	blx	sl
     9ae:	e7e9      	b.n	984 <timer_process_counted+0x48>
     9b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     9b4:	00000e41 	.word	0x00000e41
     9b8:	000008e5 	.word	0x000008e5

000009bc <timer_init>:
{
     9bc:	b538      	push	{r3, r4, r5, lr}
     9be:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     9c0:	4604      	mov	r4, r0
     9c2:	b178      	cbz	r0, 9e4 <timer_init+0x28>
     9c4:	1c08      	adds	r0, r1, #0
     9c6:	bf18      	it	ne
     9c8:	2001      	movne	r0, #1
     9ca:	223b      	movs	r2, #59	; 0x3b
     9cc:	4906      	ldr	r1, [pc, #24]	; (9e8 <timer_init+0x2c>)
     9ce:	4b07      	ldr	r3, [pc, #28]	; (9ec <timer_init+0x30>)
     9d0:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     9d2:	4629      	mov	r1, r5
     9d4:	4620      	mov	r0, r4
     9d6:	4b06      	ldr	r3, [pc, #24]	; (9f0 <timer_init+0x34>)
     9d8:	4798      	blx	r3
	descr->time                           = 0;
     9da:	2000      	movs	r0, #0
     9dc:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     9de:	4b05      	ldr	r3, [pc, #20]	; (9f4 <timer_init+0x38>)
     9e0:	6023      	str	r3, [r4, #0]
}
     9e2:	bd38      	pop	{r3, r4, r5, pc}
     9e4:	2000      	movs	r0, #0
     9e6:	e7f0      	b.n	9ca <timer_init+0xe>
     9e8:	00001d74 	.word	0x00001d74
     9ec:	00000de5 	.word	0x00000de5
     9f0:	000018a1 	.word	0x000018a1
     9f4:	0000093d 	.word	0x0000093d

000009f8 <timer_start>:
{
     9f8:	b510      	push	{r4, lr}
	ASSERT(descr);
     9fa:	4604      	mov	r4, r0
     9fc:	2253      	movs	r2, #83	; 0x53
     9fe:	4909      	ldr	r1, [pc, #36]	; (a24 <timer_start+0x2c>)
     a00:	3000      	adds	r0, #0
     a02:	bf18      	it	ne
     a04:	2001      	movne	r0, #1
     a06:	4b08      	ldr	r3, [pc, #32]	; (a28 <timer_start+0x30>)
     a08:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
     a0a:	4620      	mov	r0, r4
     a0c:	4b07      	ldr	r3, [pc, #28]	; (a2c <timer_start+0x34>)
     a0e:	4798      	blx	r3
     a10:	b920      	cbnz	r0, a1c <timer_start+0x24>
	_timer_start(&descr->device);
     a12:	4620      	mov	r0, r4
     a14:	4b06      	ldr	r3, [pc, #24]	; (a30 <timer_start+0x38>)
     a16:	4798      	blx	r3
	return ERR_NONE;
     a18:	2000      	movs	r0, #0
     a1a:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     a1c:	f06f 0010 	mvn.w	r0, #16
}
     a20:	bd10      	pop	{r4, pc}
     a22:	bf00      	nop
     a24:	00001d74 	.word	0x00001d74
     a28:	00000de5 	.word	0x00000de5
     a2c:	00001a5d 	.word	0x00001a5d
     a30:	00001a49 	.word	0x00001a49

00000a34 <timer_add_task>:
{
     a34:	b570      	push	{r4, r5, r6, lr}
     a36:	b082      	sub	sp, #8
     a38:	460d      	mov	r5, r1
	ASSERT(descr && task);
     a3a:	4604      	mov	r4, r0
     a3c:	b318      	cbz	r0, a86 <timer_add_task+0x52>
     a3e:	1c08      	adds	r0, r1, #0
     a40:	bf18      	it	ne
     a42:	2001      	movne	r0, #1
     a44:	227a      	movs	r2, #122	; 0x7a
     a46:	491e      	ldr	r1, [pc, #120]	; (ac0 <timer_add_task+0x8c>)
     a48:	4b1e      	ldr	r3, [pc, #120]	; (ac4 <timer_add_task+0x90>)
     a4a:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
     a4c:	7e23      	ldrb	r3, [r4, #24]
     a4e:	f043 0301 	orr.w	r3, r3, #1
     a52:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
     a54:	f104 0614 	add.w	r6, r4, #20
     a58:	4629      	mov	r1, r5
     a5a:	4630      	mov	r0, r6
     a5c:	4b1a      	ldr	r3, [pc, #104]	; (ac8 <timer_add_task+0x94>)
     a5e:	4798      	blx	r3
     a60:	b998      	cbnz	r0, a8a <timer_add_task+0x56>
	task->time_label = descr->time;
     a62:	6923      	ldr	r3, [r4, #16]
     a64:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
     a66:	6922      	ldr	r2, [r4, #16]
     a68:	4629      	mov	r1, r5
     a6a:	4630      	mov	r0, r6
     a6c:	4b17      	ldr	r3, [pc, #92]	; (acc <timer_add_task+0x98>)
     a6e:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     a70:	7e23      	ldrb	r3, [r4, #24]
     a72:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
     a76:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     a78:	7e23      	ldrb	r3, [r4, #24]
     a7a:	f013 0f02 	tst.w	r3, #2
     a7e:	d110      	bne.n	aa2 <timer_add_task+0x6e>
	return ERR_NONE;
     a80:	2000      	movs	r0, #0
}
     a82:	b002      	add	sp, #8
     a84:	bd70      	pop	{r4, r5, r6, pc}
     a86:	2000      	movs	r0, #0
     a88:	e7dc      	b.n	a44 <timer_add_task+0x10>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     a8a:	7e23      	ldrb	r3, [r4, #24]
     a8c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
     a90:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
     a92:	227f      	movs	r2, #127	; 0x7f
     a94:	490a      	ldr	r1, [pc, #40]	; (ac0 <timer_add_task+0x8c>)
     a96:	2000      	movs	r0, #0
     a98:	4b0a      	ldr	r3, [pc, #40]	; (ac4 <timer_add_task+0x90>)
     a9a:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
     a9c:	f06f 0011 	mvn.w	r0, #17
     aa0:	e7ef      	b.n	a82 <timer_add_task+0x4e>
		CRITICAL_SECTION_ENTER()
     aa2:	a801      	add	r0, sp, #4
     aa4:	4b0a      	ldr	r3, [pc, #40]	; (ad0 <timer_add_task+0x9c>)
     aa6:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
     aa8:	7e23      	ldrb	r3, [r4, #24]
     aaa:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
     aae:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
     ab0:	4620      	mov	r0, r4
     ab2:	4b08      	ldr	r3, [pc, #32]	; (ad4 <timer_add_task+0xa0>)
     ab4:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
     ab6:	a801      	add	r0, sp, #4
     ab8:	4b07      	ldr	r3, [pc, #28]	; (ad8 <timer_add_task+0xa4>)
     aba:	4798      	blx	r3
	return ERR_NONE;
     abc:	2000      	movs	r0, #0
     abe:	e7e0      	b.n	a82 <timer_add_task+0x4e>
     ac0:	00001d74 	.word	0x00001d74
     ac4:	00000de5 	.word	0x00000de5
     ac8:	00000deb 	.word	0x00000deb
     acc:	000008e5 	.word	0x000008e5
     ad0:	000006ad 	.word	0x000006ad
     ad4:	00001a75 	.word	0x00001a75
     ad8:	000006bb 	.word	0x000006bb

00000adc <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
     adc:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
     ade:	2300      	movs	r3, #0
     ae0:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
     ae2:	69c3      	ldr	r3, [r0, #28]
     ae4:	b11b      	cbz	r3, aee <usart_transmission_complete+0x12>
     ae6:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
     aea:	4610      	mov	r0, r2
     aec:	4798      	blx	r3
     aee:	bd08      	pop	{r3, pc}

00000af0 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
     af0:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
     af2:	2300      	movs	r3, #0
     af4:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
     af6:	6a43      	ldr	r3, [r0, #36]	; 0x24
     af8:	b11b      	cbz	r3, b02 <usart_error+0x12>
     afa:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
     afe:	4610      	mov	r0, r2
     b00:	4798      	blx	r3
     b02:	bd08      	pop	{r3, pc}

00000b04 <usart_fill_rx_buffer>:
{
     b04:	b538      	push	{r3, r4, r5, lr}
     b06:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     b08:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
     b0c:	302c      	adds	r0, #44	; 0x2c
     b0e:	4b03      	ldr	r3, [pc, #12]	; (b1c <usart_fill_rx_buffer+0x18>)
     b10:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
     b12:	6a23      	ldr	r3, [r4, #32]
     b14:	b10b      	cbz	r3, b1a <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
     b16:	4628      	mov	r0, r5
     b18:	4798      	blx	r3
     b1a:	bd38      	pop	{r3, r4, r5, pc}
     b1c:	00000ee1 	.word	0x00000ee1

00000b20 <usart_async_write>:
{
     b20:	b570      	push	{r4, r5, r6, lr}
     b22:	460e      	mov	r6, r1
     b24:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
     b26:	4604      	mov	r4, r0
     b28:	b1e0      	cbz	r0, b64 <usart_async_write+0x44>
     b2a:	b1e9      	cbz	r1, b68 <usart_async_write+0x48>
     b2c:	1c10      	adds	r0, r2, #0
     b2e:	bf18      	it	ne
     b30:	2001      	movne	r0, #1
     b32:	f240 123b 	movw	r2, #315	; 0x13b
     b36:	490f      	ldr	r1, [pc, #60]	; (b74 <usart_async_write+0x54>)
     b38:	4b0f      	ldr	r3, [pc, #60]	; (b78 <usart_async_write+0x58>)
     b3a:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
     b3c:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
     b40:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
     b44:	429a      	cmp	r2, r3
     b46:	d111      	bne.n	b6c <usart_async_write+0x4c>
	descr->tx_buffer        = (uint8_t *)buf;
     b48:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
     b4a:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
     b4e:	2300      	movs	r3, #0
     b50:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
     b54:	2301      	movs	r3, #1
     b56:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
     b58:	f104 0008 	add.w	r0, r4, #8
     b5c:	4b07      	ldr	r3, [pc, #28]	; (b7c <usart_async_write+0x5c>)
     b5e:	4798      	blx	r3
	return (int32_t)length;
     b60:	4628      	mov	r0, r5
     b62:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
     b64:	2000      	movs	r0, #0
     b66:	e7e4      	b.n	b32 <usart_async_write+0x12>
     b68:	2000      	movs	r0, #0
     b6a:	e7e2      	b.n	b32 <usart_async_write+0x12>
		return ERR_NO_RESOURCE;
     b6c:	f06f 001b 	mvn.w	r0, #27
}
     b70:	bd70      	pop	{r4, r5, r6, pc}
     b72:	bf00      	nop
     b74:	00001d8c 	.word	0x00001d8c
     b78:	00000de5 	.word	0x00000de5
     b7c:	00001503 	.word	0x00001503

00000b80 <usart_process_byte_sent>:
{
     b80:	b510      	push	{r4, lr}
     b82:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
     b84:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
     b86:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
     b8a:	429a      	cmp	r2, r3
     b8c:	d009      	beq.n	ba2 <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
     b8e:	6c02      	ldr	r2, [r0, #64]	; 0x40
     b90:	1c59      	adds	r1, r3, #1
     b92:	8781      	strh	r1, [r0, #60]	; 0x3c
     b94:	5cd1      	ldrb	r1, [r2, r3]
     b96:	4b04      	ldr	r3, [pc, #16]	; (ba8 <usart_process_byte_sent+0x28>)
     b98:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
     b9a:	4620      	mov	r0, r4
     b9c:	4b03      	ldr	r3, [pc, #12]	; (bac <usart_process_byte_sent+0x2c>)
     b9e:	4798      	blx	r3
     ba0:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
     ba2:	4b03      	ldr	r3, [pc, #12]	; (bb0 <usart_process_byte_sent+0x30>)
     ba4:	4798      	blx	r3
     ba6:	bd10      	pop	{r4, pc}
     ba8:	000014fd 	.word	0x000014fd
     bac:	00001503 	.word	0x00001503
     bb0:	0000150b 	.word	0x0000150b

00000bb4 <usart_async_read>:
{
     bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     bb8:	b082      	sub	sp, #8
     bba:	460f      	mov	r7, r1
     bbc:	4690      	mov	r8, r2
	ASSERT(descr && buf && length);
     bbe:	4606      	mov	r6, r0
     bc0:	b1a0      	cbz	r0, bec <usart_async_read+0x38>
     bc2:	b199      	cbz	r1, bec <usart_async_read+0x38>
     bc4:	2a00      	cmp	r2, #0
     bc6:	d12d      	bne.n	c24 <usart_async_read+0x70>
     bc8:	f44f 72ac 	mov.w	r2, #344	; 0x158
     bcc:	4929      	ldr	r1, [pc, #164]	; (c74 <usart_async_read+0xc0>)
     bce:	2000      	movs	r0, #0
     bd0:	4b29      	ldr	r3, [pc, #164]	; (c78 <usart_async_read+0xc4>)
     bd2:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     bd4:	a801      	add	r0, sp, #4
     bd6:	4b29      	ldr	r3, [pc, #164]	; (c7c <usart_async_read+0xc8>)
     bd8:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     bda:	f106 0034 	add.w	r0, r6, #52	; 0x34
     bde:	4b28      	ldr	r3, [pc, #160]	; (c80 <usart_async_read+0xcc>)
     be0:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
     be2:	a801      	add	r0, sp, #4
     be4:	4b27      	ldr	r3, [pc, #156]	; (c84 <usart_async_read+0xd0>)
     be6:	4798      	blx	r3
	uint16_t                       was_read = 0;
     be8:	2500      	movs	r5, #0
	return (int32_t)was_read;
     bea:	e03e      	b.n	c6a <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
     bec:	f44f 72ac 	mov.w	r2, #344	; 0x158
     bf0:	4920      	ldr	r1, [pc, #128]	; (c74 <usart_async_read+0xc0>)
     bf2:	2000      	movs	r0, #0
     bf4:	4b20      	ldr	r3, [pc, #128]	; (c78 <usart_async_read+0xc4>)
     bf6:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     bf8:	a801      	add	r0, sp, #4
     bfa:	4b20      	ldr	r3, [pc, #128]	; (c7c <usart_async_read+0xc8>)
     bfc:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     bfe:	f106 0a34 	add.w	sl, r6, #52	; 0x34
     c02:	4650      	mov	r0, sl
     c04:	4b1e      	ldr	r3, [pc, #120]	; (c80 <usart_async_read+0xcc>)
     c06:	4798      	blx	r3
     c08:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
     c0a:	a801      	add	r0, sp, #4
     c0c:	4b1d      	ldr	r3, [pc, #116]	; (c84 <usart_async_read+0xd0>)
     c0e:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     c10:	f1b9 0f00 	cmp.w	r9, #0
     c14:	d004      	beq.n	c20 <usart_async_read+0x6c>
     c16:	f1b8 0f00 	cmp.w	r8, #0
     c1a:	d119      	bne.n	c50 <usart_async_read+0x9c>
	uint16_t                       was_read = 0;
     c1c:	2500      	movs	r5, #0
     c1e:	e024      	b.n	c6a <usart_async_read+0xb6>
     c20:	2500      	movs	r5, #0
     c22:	e022      	b.n	c6a <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
     c24:	f44f 72ac 	mov.w	r2, #344	; 0x158
     c28:	4912      	ldr	r1, [pc, #72]	; (c74 <usart_async_read+0xc0>)
     c2a:	2001      	movs	r0, #1
     c2c:	4b12      	ldr	r3, [pc, #72]	; (c78 <usart_async_read+0xc4>)
     c2e:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     c30:	a801      	add	r0, sp, #4
     c32:	4b12      	ldr	r3, [pc, #72]	; (c7c <usart_async_read+0xc8>)
     c34:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     c36:	f106 0a34 	add.w	sl, r6, #52	; 0x34
     c3a:	4650      	mov	r0, sl
     c3c:	4b10      	ldr	r3, [pc, #64]	; (c80 <usart_async_read+0xcc>)
     c3e:	4798      	blx	r3
     c40:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
     c42:	a801      	add	r0, sp, #4
     c44:	4b0f      	ldr	r3, [pc, #60]	; (c84 <usart_async_read+0xd0>)
     c46:	4798      	blx	r3
	uint16_t                       was_read = 0;
     c48:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
     c4a:	f1b9 0f00 	cmp.w	r9, #0
     c4e:	d00c      	beq.n	c6a <usart_async_read+0xb6>
{
     c50:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
     c52:	4e0d      	ldr	r6, [pc, #52]	; (c88 <usart_async_read+0xd4>)
     c54:	1c60      	adds	r0, r4, #1
     c56:	b285      	uxth	r5, r0
     c58:	1939      	adds	r1, r7, r4
     c5a:	4650      	mov	r0, sl
     c5c:	47b0      	blx	r6
     c5e:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
     c60:	454c      	cmp	r4, r9
     c62:	d202      	bcs.n	c6a <usart_async_read+0xb6>
     c64:	b2a3      	uxth	r3, r4
     c66:	4598      	cmp	r8, r3
     c68:	d8f4      	bhi.n	c54 <usart_async_read+0xa0>
}
     c6a:	4628      	mov	r0, r5
     c6c:	b002      	add	sp, #8
     c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     c72:	bf00      	nop
     c74:	00001d8c 	.word	0x00001d8c
     c78:	00000de5 	.word	0x00000de5
     c7c:	000006ad 	.word	0x000006ad
     c80:	00000f21 	.word	0x00000f21
     c84:	000006bb 	.word	0x000006bb
     c88:	00000e9d 	.word	0x00000e9d

00000c8c <usart_async_init>:
{
     c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c8e:	460d      	mov	r5, r1
     c90:	4616      	mov	r6, r2
     c92:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     c94:	4604      	mov	r4, r0
     c96:	b320      	cbz	r0, ce2 <usart_async_init+0x56>
     c98:	b329      	cbz	r1, ce6 <usart_async_init+0x5a>
     c9a:	b332      	cbz	r2, cea <usart_async_init+0x5e>
     c9c:	1c18      	adds	r0, r3, #0
     c9e:	bf18      	it	ne
     ca0:	2001      	movne	r0, #1
     ca2:	223a      	movs	r2, #58	; 0x3a
     ca4:	4913      	ldr	r1, [pc, #76]	; (cf4 <usart_async_init+0x68>)
     ca6:	4b14      	ldr	r3, [pc, #80]	; (cf8 <usart_async_init+0x6c>)
     ca8:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
     caa:	463a      	mov	r2, r7
     cac:	4631      	mov	r1, r6
     cae:	f104 0034 	add.w	r0, r4, #52	; 0x34
     cb2:	4b12      	ldr	r3, [pc, #72]	; (cfc <usart_async_init+0x70>)
     cb4:	4798      	blx	r3
     cb6:	b9d0      	cbnz	r0, cee <usart_async_init+0x62>
	init_status = _usart_async_init(&descr->device, hw);
     cb8:	4629      	mov	r1, r5
     cba:	f104 0008 	add.w	r0, r4, #8
     cbe:	4b10      	ldr	r3, [pc, #64]	; (d00 <usart_async_init+0x74>)
     cc0:	4798      	blx	r3
	if (init_status) {
     cc2:	4603      	mov	r3, r0
     cc4:	b958      	cbnz	r0, cde <usart_async_init+0x52>
	descr->io.read  = usart_async_read;
     cc6:	4a0f      	ldr	r2, [pc, #60]	; (d04 <usart_async_init+0x78>)
     cc8:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
     cca:	4a0f      	ldr	r2, [pc, #60]	; (d08 <usart_async_init+0x7c>)
     ccc:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
     cce:	4a0f      	ldr	r2, [pc, #60]	; (d0c <usart_async_init+0x80>)
     cd0:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
     cd2:	4a0f      	ldr	r2, [pc, #60]	; (d10 <usart_async_init+0x84>)
     cd4:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
     cd6:	4a0f      	ldr	r2, [pc, #60]	; (d14 <usart_async_init+0x88>)
     cd8:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
     cda:	4a0f      	ldr	r2, [pc, #60]	; (d18 <usart_async_init+0x8c>)
     cdc:	6162      	str	r2, [r4, #20]
}
     cde:	4618      	mov	r0, r3
     ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     ce2:	2000      	movs	r0, #0
     ce4:	e7dd      	b.n	ca2 <usart_async_init+0x16>
     ce6:	2000      	movs	r0, #0
     ce8:	e7db      	b.n	ca2 <usart_async_init+0x16>
     cea:	2000      	movs	r0, #0
     cec:	e7d9      	b.n	ca2 <usart_async_init+0x16>
		return ERR_INVALID_ARG;
     cee:	f06f 030c 	mvn.w	r3, #12
     cf2:	e7f4      	b.n	cde <usart_async_init+0x52>
     cf4:	00001d8c 	.word	0x00001d8c
     cf8:	00000de5 	.word	0x00000de5
     cfc:	00000e4d 	.word	0x00000e4d
     d00:	00001469 	.word	0x00001469
     d04:	00000bb5 	.word	0x00000bb5
     d08:	00000b21 	.word	0x00000b21
     d0c:	00000b81 	.word	0x00000b81
     d10:	00000b05 	.word	0x00000b05
     d14:	00000add 	.word	0x00000add
     d18:	00000af1 	.word	0x00000af1

00000d1c <usart_async_enable>:
{
     d1c:	b510      	push	{r4, lr}
	ASSERT(descr);
     d1e:	4604      	mov	r4, r0
     d20:	2261      	movs	r2, #97	; 0x61
     d22:	4906      	ldr	r1, [pc, #24]	; (d3c <usart_async_enable+0x20>)
     d24:	3000      	adds	r0, #0
     d26:	bf18      	it	ne
     d28:	2001      	movne	r0, #1
     d2a:	4b05      	ldr	r3, [pc, #20]	; (d40 <usart_async_enable+0x24>)
     d2c:	4798      	blx	r3
	_usart_async_enable(&descr->device);
     d2e:	f104 0008 	add.w	r0, r4, #8
     d32:	4b04      	ldr	r3, [pc, #16]	; (d44 <usart_async_enable+0x28>)
     d34:	4798      	blx	r3
}
     d36:	2000      	movs	r0, #0
     d38:	bd10      	pop	{r4, pc}
     d3a:	bf00      	nop
     d3c:	00001d8c 	.word	0x00001d8c
     d40:	00000de5 	.word	0x00000de5
     d44:	000014e9 	.word	0x000014e9

00000d48 <usart_async_get_io_descriptor>:
{
     d48:	b538      	push	{r3, r4, r5, lr}
     d4a:	460c      	mov	r4, r1
	ASSERT(descr && io);
     d4c:	4605      	mov	r5, r0
     d4e:	b148      	cbz	r0, d64 <usart_async_get_io_descriptor+0x1c>
     d50:	1c08      	adds	r0, r1, #0
     d52:	bf18      	it	ne
     d54:	2001      	movne	r0, #1
     d56:	2277      	movs	r2, #119	; 0x77
     d58:	4903      	ldr	r1, [pc, #12]	; (d68 <usart_async_get_io_descriptor+0x20>)
     d5a:	4b04      	ldr	r3, [pc, #16]	; (d6c <usart_async_get_io_descriptor+0x24>)
     d5c:	4798      	blx	r3
	*io = &descr->io;
     d5e:	6025      	str	r5, [r4, #0]
}
     d60:	2000      	movs	r0, #0
     d62:	bd38      	pop	{r3, r4, r5, pc}
     d64:	2000      	movs	r0, #0
     d66:	e7f6      	b.n	d56 <usart_async_get_io_descriptor+0xe>
     d68:	00001d8c 	.word	0x00001d8c
     d6c:	00000de5 	.word	0x00000de5

00000d70 <usart_async_register_callback>:
{
     d70:	b570      	push	{r4, r5, r6, lr}
     d72:	460c      	mov	r4, r1
     d74:	4616      	mov	r6, r2
	ASSERT(descr);
     d76:	4605      	mov	r5, r0
     d78:	2283      	movs	r2, #131	; 0x83
     d7a:	4917      	ldr	r1, [pc, #92]	; (dd8 <usart_async_register_callback+0x68>)
     d7c:	3000      	adds	r0, #0
     d7e:	bf18      	it	ne
     d80:	2001      	movne	r0, #1
     d82:	4b16      	ldr	r3, [pc, #88]	; (ddc <usart_async_register_callback+0x6c>)
     d84:	4798      	blx	r3
	switch (type) {
     d86:	2c01      	cmp	r4, #1
     d88:	d010      	beq.n	dac <usart_async_register_callback+0x3c>
     d8a:	b124      	cbz	r4, d96 <usart_async_register_callback+0x26>
     d8c:	2c02      	cmp	r4, #2
     d8e:	d018      	beq.n	dc2 <usart_async_register_callback+0x52>
		return ERR_INVALID_ARG;
     d90:	f06f 000c 	mvn.w	r0, #12
}
     d94:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.rx_done = cb;
     d96:	62ae      	str	r6, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
     d98:	1c32      	adds	r2, r6, #0
     d9a:	bf18      	it	ne
     d9c:	2201      	movne	r2, #1
     d9e:	2101      	movs	r1, #1
     da0:	f105 0008 	add.w	r0, r5, #8
     da4:	4b0e      	ldr	r3, [pc, #56]	; (de0 <usart_async_register_callback+0x70>)
     da6:	4798      	blx	r3
	return ERR_NONE;
     da8:	2000      	movs	r0, #0
		break;
     daa:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
     dac:	626e      	str	r6, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
     dae:	1c32      	adds	r2, r6, #0
     db0:	bf18      	it	ne
     db2:	2201      	movne	r2, #1
     db4:	2102      	movs	r1, #2
     db6:	f105 0008 	add.w	r0, r5, #8
     dba:	4b09      	ldr	r3, [pc, #36]	; (de0 <usart_async_register_callback+0x70>)
     dbc:	4798      	blx	r3
	return ERR_NONE;
     dbe:	2000      	movs	r0, #0
		break;
     dc0:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.error = cb;
     dc2:	62ee      	str	r6, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
     dc4:	1c32      	adds	r2, r6, #0
     dc6:	bf18      	it	ne
     dc8:	2201      	movne	r2, #1
     dca:	2103      	movs	r1, #3
     dcc:	f105 0008 	add.w	r0, r5, #8
     dd0:	4b03      	ldr	r3, [pc, #12]	; (de0 <usart_async_register_callback+0x70>)
     dd2:	4798      	blx	r3
	return ERR_NONE;
     dd4:	2000      	movs	r0, #0
		break;
     dd6:	bd70      	pop	{r4, r5, r6, pc}
     dd8:	00001d8c 	.word	0x00001d8c
     ddc:	00000de5 	.word	0x00000de5
     de0:	00001515 	.word	0x00001515

00000de4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     de4:	b900      	cbnz	r0, de8 <assert+0x4>
		__asm("BKPT #0");
     de6:	be00      	bkpt	0x0000
     de8:	4770      	bx	lr

00000dea <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     dea:	6803      	ldr	r3, [r0, #0]
     dec:	b14b      	cbz	r3, e02 <is_list_element+0x18>
		if (it == element) {
     dee:	428b      	cmp	r3, r1
     df0:	d009      	beq.n	e06 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
     df2:	681b      	ldr	r3, [r3, #0]
     df4:	b11b      	cbz	r3, dfe <is_list_element+0x14>
		if (it == element) {
     df6:	4299      	cmp	r1, r3
     df8:	d1fb      	bne.n	df2 <is_list_element+0x8>
			return true;
     dfa:	2001      	movs	r0, #1
		}
	}

	return false;
}
     dfc:	4770      	bx	lr
	return false;
     dfe:	2000      	movs	r0, #0
     e00:	4770      	bx	lr
     e02:	2000      	movs	r0, #0
     e04:	4770      	bx	lr
			return true;
     e06:	2001      	movs	r0, #1
     e08:	4770      	bx	lr
	...

00000e0c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     e0c:	b538      	push	{r3, r4, r5, lr}
     e0e:	4604      	mov	r4, r0
     e10:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
     e12:	4b06      	ldr	r3, [pc, #24]	; (e2c <list_insert_as_head+0x20>)
     e14:	4798      	blx	r3
     e16:	f080 0001 	eor.w	r0, r0, #1
     e1a:	2239      	movs	r2, #57	; 0x39
     e1c:	4904      	ldr	r1, [pc, #16]	; (e30 <list_insert_as_head+0x24>)
     e1e:	b2c0      	uxtb	r0, r0
     e20:	4b04      	ldr	r3, [pc, #16]	; (e34 <list_insert_as_head+0x28>)
     e22:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     e24:	6823      	ldr	r3, [r4, #0]
     e26:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     e28:	6025      	str	r5, [r4, #0]
     e2a:	bd38      	pop	{r3, r4, r5, pc}
     e2c:	00000deb 	.word	0x00000deb
     e30:	00001dac 	.word	0x00001dac
     e34:	00000de5 	.word	0x00000de5

00000e38 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     e38:	6803      	ldr	r3, [r0, #0]
     e3a:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     e3c:	6001      	str	r1, [r0, #0]
     e3e:	4770      	bx	lr

00000e40 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     e40:	6803      	ldr	r3, [r0, #0]
     e42:	b10b      	cbz	r3, e48 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     e44:	681a      	ldr	r2, [r3, #0]
     e46:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
     e48:	4618      	mov	r0, r3
     e4a:	4770      	bx	lr

00000e4c <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
     e4c:	b570      	push	{r4, r5, r6, lr}
     e4e:	460e      	mov	r6, r1
     e50:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
     e52:	4604      	mov	r4, r0
     e54:	b178      	cbz	r0, e76 <ringbuffer_init+0x2a>
     e56:	b181      	cbz	r1, e7a <ringbuffer_init+0x2e>
     e58:	b1a2      	cbz	r2, e84 <ringbuffer_init+0x38>
     e5a:	2001      	movs	r0, #1
     e5c:	2228      	movs	r2, #40	; 0x28
     e5e:	490d      	ldr	r1, [pc, #52]	; (e94 <ringbuffer_init+0x48>)
     e60:	4b0d      	ldr	r3, [pc, #52]	; (e98 <ringbuffer_init+0x4c>)
     e62:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
     e64:	1e6b      	subs	r3, r5, #1
     e66:	421d      	tst	r5, r3
     e68:	d109      	bne.n	e7e <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
     e6a:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
     e6c:	2000      	movs	r0, #0
     e6e:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
     e70:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
     e72:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
     e74:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
     e76:	2000      	movs	r0, #0
     e78:	e7f0      	b.n	e5c <ringbuffer_init+0x10>
     e7a:	2000      	movs	r0, #0
     e7c:	e7ee      	b.n	e5c <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
     e7e:	f06f 000c 	mvn.w	r0, #12
     e82:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
     e84:	2228      	movs	r2, #40	; 0x28
     e86:	4903      	ldr	r1, [pc, #12]	; (e94 <ringbuffer_init+0x48>)
     e88:	2000      	movs	r0, #0
     e8a:	4b03      	ldr	r3, [pc, #12]	; (e98 <ringbuffer_init+0x4c>)
     e8c:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
     e8e:	1e6b      	subs	r3, r5, #1
     e90:	e7eb      	b.n	e6a <ringbuffer_init+0x1e>
     e92:	bf00      	nop
     e94:	00001dcc 	.word	0x00001dcc
     e98:	00000de5 	.word	0x00000de5

00000e9c <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
     e9c:	b538      	push	{r3, r4, r5, lr}
     e9e:	460d      	mov	r5, r1
	ASSERT(rb && data);
     ea0:	4604      	mov	r4, r0
     ea2:	b1a0      	cbz	r0, ece <ringbuffer_get+0x32>
     ea4:	1c08      	adds	r0, r1, #0
     ea6:	bf18      	it	ne
     ea8:	2001      	movne	r0, #1
     eaa:	2240      	movs	r2, #64	; 0x40
     eac:	490a      	ldr	r1, [pc, #40]	; (ed8 <ringbuffer_get+0x3c>)
     eae:	4b0b      	ldr	r3, [pc, #44]	; (edc <ringbuffer_get+0x40>)
     eb0:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
     eb2:	68a3      	ldr	r3, [r4, #8]
     eb4:	68e2      	ldr	r2, [r4, #12]
     eb6:	429a      	cmp	r2, r3
     eb8:	d00b      	beq.n	ed2 <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
     eba:	6862      	ldr	r2, [r4, #4]
     ebc:	4013      	ands	r3, r2
     ebe:	6822      	ldr	r2, [r4, #0]
     ec0:	5cd3      	ldrb	r3, [r2, r3]
     ec2:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
     ec4:	68a3      	ldr	r3, [r4, #8]
     ec6:	3301      	adds	r3, #1
     ec8:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
     eca:	2000      	movs	r0, #0
     ecc:	bd38      	pop	{r3, r4, r5, pc}
     ece:	2000      	movs	r0, #0
     ed0:	e7eb      	b.n	eaa <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
     ed2:	f06f 0009 	mvn.w	r0, #9
}
     ed6:	bd38      	pop	{r3, r4, r5, pc}
     ed8:	00001dcc 	.word	0x00001dcc
     edc:	00000de5 	.word	0x00000de5

00000ee0 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
     ee0:	b538      	push	{r3, r4, r5, lr}
     ee2:	460d      	mov	r5, r1
	ASSERT(rb);
     ee4:	4604      	mov	r4, r0
     ee6:	2251      	movs	r2, #81	; 0x51
     ee8:	490b      	ldr	r1, [pc, #44]	; (f18 <ringbuffer_put+0x38>)
     eea:	3000      	adds	r0, #0
     eec:	bf18      	it	ne
     eee:	2001      	movne	r0, #1
     ef0:	4b0a      	ldr	r3, [pc, #40]	; (f1c <ringbuffer_put+0x3c>)
     ef2:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
     ef4:	68e3      	ldr	r3, [r4, #12]
     ef6:	6862      	ldr	r2, [r4, #4]
     ef8:	4013      	ands	r3, r2
     efa:	6822      	ldr	r2, [r4, #0]
     efc:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
     efe:	68e3      	ldr	r3, [r4, #12]
     f00:	6861      	ldr	r1, [r4, #4]
     f02:	68a2      	ldr	r2, [r4, #8]
     f04:	1a9a      	subs	r2, r3, r2
     f06:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
     f08:	bf84      	itt	hi
     f0a:	1a59      	subhi	r1, r3, r1
     f0c:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
     f0e:	3301      	adds	r3, #1
     f10:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
     f12:	2000      	movs	r0, #0
     f14:	bd38      	pop	{r3, r4, r5, pc}
     f16:	bf00      	nop
     f18:	00001dcc 	.word	0x00001dcc
     f1c:	00000de5 	.word	0x00000de5

00000f20 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
     f20:	b510      	push	{r4, lr}
	ASSERT(rb);
     f22:	4604      	mov	r4, r0
     f24:	2267      	movs	r2, #103	; 0x67
     f26:	4905      	ldr	r1, [pc, #20]	; (f3c <ringbuffer_num+0x1c>)
     f28:	3000      	adds	r0, #0
     f2a:	bf18      	it	ne
     f2c:	2001      	movne	r0, #1
     f2e:	4b04      	ldr	r3, [pc, #16]	; (f40 <ringbuffer_num+0x20>)
     f30:	4798      	blx	r3

	return rb->write_index - rb->read_index;
     f32:	68e0      	ldr	r0, [r4, #12]
     f34:	68a3      	ldr	r3, [r4, #8]
}
     f36:	1ac0      	subs	r0, r0, r3
     f38:	bd10      	pop	{r4, pc}
     f3a:	bf00      	nop
     f3c:	00001dcc 	.word	0x00001dcc
     f40:	00000de5 	.word	0x00000de5

00000f44 <_irq_set>:
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     f44:	0943      	lsrs	r3, r0, #5
     f46:	f000 001f 	and.w	r0, r0, #31
     f4a:	2201      	movs	r2, #1
     f4c:	fa02 f000 	lsl.w	r0, r2, r0
     f50:	3340      	adds	r3, #64	; 0x40
     f52:	4a02      	ldr	r2, [pc, #8]	; (f5c <_irq_set+0x18>)
     f54:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
     f58:	4770      	bx	lr
     f5a:	bf00      	nop
     f5c:	e000e100 	.word	0xe000e100

00000f60 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     f60:	f64b 3380 	movw	r3, #48000	; 0xbb80
     f64:	fb03 f000 	mul.w	r0, r3, r0
     f68:	4770      	bx	lr
	...

00000f6c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     f6c:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     f6e:	4a09      	ldr	r2, [pc, #36]	; (f94 <_init_chip+0x28>)
     f70:	8813      	ldrh	r3, [r2, #0]
     f72:	b29b      	uxth	r3, r3
     f74:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     f76:	4b08      	ldr	r3, [pc, #32]	; (f98 <_init_chip+0x2c>)
     f78:	4798      	blx	r3
	_oscctrl_init_sources();
     f7a:	4b08      	ldr	r3, [pc, #32]	; (f9c <_init_chip+0x30>)
     f7c:	4798      	blx	r3
	_mclk_init();
     f7e:	4b08      	ldr	r3, [pc, #32]	; (fa0 <_init_chip+0x34>)
     f80:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
     f82:	2008      	movs	r0, #8
     f84:	4c07      	ldr	r4, [pc, #28]	; (fa4 <_init_chip+0x38>)
     f86:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
     f88:	4b07      	ldr	r3, [pc, #28]	; (fa8 <_init_chip+0x3c>)
     f8a:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     f8c:	f640 70f7 	movw	r0, #4087	; 0xff7
     f90:	47a0      	blx	r4
     f92:	bd10      	pop	{r4, pc}
     f94:	41004000 	.word	0x41004000
     f98:	0000118d 	.word	0x0000118d
     f9c:	000011ad 	.word	0x000011ad
     fa0:	00001181 	.word	0x00001181
     fa4:	00001141 	.word	0x00001141
     fa8:	000011b1 	.word	0x000011b1

00000fac <_ext_irq_init>:
	};
}

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
     fac:	4b2a      	ldr	r3, [pc, #168]	; (1058 <_ext_irq_init+0xac>)
     fae:	685b      	ldr	r3, [r3, #4]
/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
     fb0:	f013 0f01 	tst.w	r3, #1
     fb4:	d11f      	bne.n	ff6 <_ext_irq_init+0x4a>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     fb6:	4a28      	ldr	r2, [pc, #160]	; (1058 <_ext_irq_init+0xac>)
     fb8:	6853      	ldr	r3, [r2, #4]
     fba:	f013 0f03 	tst.w	r3, #3
     fbe:	d1fb      	bne.n	fb8 <_ext_irq_init+0xc>

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
     fc0:	4b25      	ldr	r3, [pc, #148]	; (1058 <_ext_irq_init+0xac>)
     fc2:	781b      	ldrb	r3, [r3, #0]
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
     fc4:	f013 0f02 	tst.w	r3, #2
     fc8:	d00d      	beq.n	fe6 <_ext_irq_init+0x3a>
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
     fca:	4a23      	ldr	r2, [pc, #140]	; (1058 <_ext_irq_init+0xac>)
     fcc:	7813      	ldrb	r3, [r2, #0]
     fce:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
     fd2:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     fd4:	6853      	ldr	r3, [r2, #4]
     fd6:	f013 0f03 	tst.w	r3, #3
     fda:	d1fb      	bne.n	fd4 <_ext_irq_init+0x28>
     fdc:	4a1e      	ldr	r2, [pc, #120]	; (1058 <_ext_irq_init+0xac>)
     fde:	6853      	ldr	r3, [r2, #4]
     fe0:	f013 0f02 	tst.w	r3, #2
     fe4:	d1fb      	bne.n	fde <_ext_irq_init+0x32>
}

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
     fe6:	2201      	movs	r2, #1
     fe8:	4b1b      	ldr	r3, [pc, #108]	; (1058 <_ext_irq_init+0xac>)
     fea:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     fec:	461a      	mov	r2, r3
     fee:	6853      	ldr	r3, [r2, #4]
     ff0:	f013 0f03 	tst.w	r3, #3
     ff4:	d1fb      	bne.n	fee <_ext_irq_init+0x42>
     ff6:	4a18      	ldr	r2, [pc, #96]	; (1058 <_ext_irq_init+0xac>)
     ff8:	6853      	ldr	r3, [r2, #4]
     ffa:	f013 0f01 	tst.w	r3, #1
     ffe:	d1fb      	bne.n	ff8 <_ext_irq_init+0x4c>
	tmp = ((Eic *)hw)->CTRLA.reg;
    1000:	4a15      	ldr	r2, [pc, #84]	; (1058 <_ext_irq_init+0xac>)
    1002:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    1004:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	((Eic *)hw)->CTRLA.reg = tmp;
    1008:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    100a:	6853      	ldr	r3, [r2, #4]
    100c:	f013 0f03 	tst.w	r3, #3
    1010:	d1fb      	bne.n	100a <_ext_irq_init+0x5e>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    1012:	4b11      	ldr	r3, [pc, #68]	; (1058 <_ext_irq_init+0xac>)
    1014:	2200      	movs	r2, #0
    1016:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    1018:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    101a:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    101c:	2101      	movs	r1, #1
    101e:	6319      	str	r1, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    1020:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
    1022:	61d9      	str	r1, [r3, #28]
    1024:	621a      	str	r2, [r3, #32]
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    1026:	781a      	ldrb	r2, [r3, #0]
    1028:	f042 0202 	orr.w	r2, r2, #2
    102c:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    102e:	461a      	mov	r2, r3
    1030:	6853      	ldr	r3, [r2, #4]
    1032:	f013 0f03 	tst.w	r3, #3
    1036:	d1fb      	bne.n	1030 <_ext_irq_init+0x84>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1038:	4b08      	ldr	r3, [pc, #32]	; (105c <_ext_irq_init+0xb0>)
    103a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    103e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1042:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1046:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    104a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    104e:	601a      	str	r2, [r3, #0]
	hri_eic_set_CTRLA_ENABLE_bit(EIC);
	NVIC_DisableIRQ(EIC_0_IRQn);
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
	NVIC_EnableIRQ(EIC_0_IRQn);

	callback = cb;
    1050:	4b03      	ldr	r3, [pc, #12]	; (1060 <_ext_irq_init+0xb4>)
    1052:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
    1054:	2000      	movs	r0, #0
    1056:	4770      	bx	lr
    1058:	40002800 	.word	0x40002800
    105c:	e000e100 	.word	0xe000e100
    1060:	20000048 	.word	0x20000048

00001064 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    1064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1068:	b082      	sub	sp, #8
	return ((Eic *)hw)->INTFLAG.reg;
    106a:	4b30      	ldr	r3, [pc, #192]	; (112c <EIC_0_Handler+0xc8>)
    106c:	695a      	ldr	r2, [r3, #20]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    106e:	9201      	str	r2, [sp, #4]
	hri_eic_clear_INTFLAG_reg(EIC, flags);
    1070:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    1072:	615a      	str	r2, [r3, #20]
	ASSERT(callback);
    1074:	4b2e      	ldr	r3, [pc, #184]	; (1130 <EIC_0_Handler+0xcc>)
    1076:	6818      	ldr	r0, [r3, #0]
    1078:	22e8      	movs	r2, #232	; 0xe8
    107a:	492e      	ldr	r1, [pc, #184]	; (1134 <EIC_0_Handler+0xd0>)
    107c:	3000      	adds	r0, #0
    107e:	bf18      	it	ne
    1080:	2001      	movne	r0, #1
    1082:	4b2d      	ldr	r3, [pc, #180]	; (1138 <EIC_0_Handler+0xd4>)
    1084:	4798      	blx	r3
	while (flags) {
    1086:	9b01      	ldr	r3, [sp, #4]
    1088:	2b00      	cmp	r3, #0
    108a:	d04b      	beq.n	1124 <EIC_0_Handler+0xc0>
    108c:	f04f 36ff 	mov.w	r6, #4294967295
				callback(pin);
    1090:	4f27      	ldr	r7, [pc, #156]	; (1130 <EIC_0_Handler+0xcc>)
				if (_map[middle].extint == pos) {
    1092:	4d2a      	ldr	r5, [pc, #168]	; (113c <EIC_0_Handler+0xd8>)
	return ((Eic *)hw)->INTFLAG.reg;
    1094:	f8df 8094 	ldr.w	r8, [pc, #148]	; 112c <EIC_0_Handler+0xc8>
    1098:	e039      	b.n	110e <EIC_0_Handler+0xaa>
			if (INVALID_PIN_NUMBER != pin) {
    109a:	f1b6 3fff 	cmp.w	r6, #4294967295
    109e:	d004      	beq.n	10aa <EIC_0_Handler+0x46>
    10a0:	e000      	b.n	10a4 <EIC_0_Handler+0x40>
				if (_map[middle].extint == pos) {
    10a2:	2640      	movs	r6, #64	; 0x40
				callback(pin);
    10a4:	4630      	mov	r0, r6
    10a6:	683b      	ldr	r3, [r7, #0]
    10a8:	4798      	blx	r3
			flags &= ~(1ul << pos);
    10aa:	9b01      	ldr	r3, [sp, #4]
    10ac:	2201      	movs	r2, #1
    10ae:	fa02 f404 	lsl.w	r4, r2, r4
    10b2:	ea23 0404 	bic.w	r4, r3, r4
    10b6:	9401      	str	r4, [sp, #4]
			pos = ffs(flags) - 1;
    10b8:	9a01      	ldr	r2, [sp, #4]
    10ba:	fa92 f3a2 	rbit	r3, r2
    10be:	fab3 f383 	clz	r3, r3
    10c2:	2a00      	cmp	r2, #0
		while (-1 != pos) {
    10c4:	bf08      	it	eq
    10c6:	f04f 33ff 	moveq.w	r3, #4294967295
    10ca:	d018      	beq.n	10fe <EIC_0_Handler+0x9a>
				if (_map[middle].extint == pos) {
    10cc:	461c      	mov	r4, r3
    10ce:	2b00      	cmp	r3, #0
    10d0:	d0e7      	beq.n	10a2 <EIC_0_Handler+0x3e>
    10d2:	2200      	movs	r2, #0
    10d4:	4613      	mov	r3, r2
    10d6:	4610      	mov	r0, r2
    10d8:	2101      	movs	r1, #1
				if (_map[middle].extint < pos) {
    10da:	4294      	cmp	r4, r2
					lower = middle + 1;
    10dc:	bfc7      	ittee	gt
    10de:	3301      	addgt	r3, #1
    10e0:	b2d8      	uxtbgt	r0, r3
					upper = middle - 1;
    10e2:	f103 33ff 	addle.w	r3, r3, #4294967295
    10e6:	b2d9      	uxtble	r1, r3
			while (upper >= lower) {
    10e8:	4288      	cmp	r0, r1
    10ea:	d8d6      	bhi.n	109a <EIC_0_Handler+0x36>
				middle = (upper + lower) >> 1;
    10ec:	180b      	adds	r3, r1, r0
    10ee:	f3c3 0347 	ubfx	r3, r3, #1, #8
				if (_map[middle].extint == pos) {
    10f2:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
    10f6:	42a2      	cmp	r2, r4
    10f8:	d1ef      	bne.n	10da <EIC_0_Handler+0x76>
    10fa:	2640      	movs	r6, #64	; 0x40
    10fc:	e7d2      	b.n	10a4 <EIC_0_Handler+0x40>
    10fe:	f8d8 3014 	ldr.w	r3, [r8, #20]
		flags = hri_eic_read_INTFLAG_reg(EIC);
    1102:	9301      	str	r3, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    1104:	9b01      	ldr	r3, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    1106:	f8c8 3014 	str.w	r3, [r8, #20]
	while (flags) {
    110a:	9b01      	ldr	r3, [sp, #4]
    110c:	b153      	cbz	r3, 1124 <EIC_0_Handler+0xc0>
		pos = ffs(flags) - 1;
    110e:	9a01      	ldr	r2, [sp, #4]
    1110:	fa92 f3a2 	rbit	r3, r2
    1114:	fab3 f383 	clz	r3, r3
    1118:	2a00      	cmp	r2, #0
		while (-1 != pos) {
    111a:	bf08      	it	eq
    111c:	f04f 33ff 	moveq.w	r3, #4294967295
    1120:	d1d4      	bne.n	10cc <EIC_0_Handler+0x68>
    1122:	e7ec      	b.n	10fe <EIC_0_Handler+0x9a>
	_ext_irq_handler();
}
    1124:	b002      	add	sp, #8
    1126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    112a:	bf00      	nop
    112c:	40002800 	.word	0x40002800
    1130:	20000048 	.word	0x20000048
    1134:	00001df8 	.word	0x00001df8
    1138:	00000de5 	.word	0x00000de5
    113c:	00001df0 	.word	0x00001df0

00001140 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1140:	f010 0f01 	tst.w	r0, #1
    1144:	d008      	beq.n	1158 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1146:	4a0b      	ldr	r2, [pc, #44]	; (1174 <_gclk_init_generators_by_fref+0x34>)
    1148:	4b0b      	ldr	r3, [pc, #44]	; (1178 <_gclk_init_generators_by_fref+0x38>)
    114a:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    114c:	4619      	mov	r1, r3
    114e:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1152:	684b      	ldr	r3, [r1, #4]
    1154:	4213      	tst	r3, r2
    1156:	d1fc      	bne.n	1152 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    1158:	f010 0f08 	tst.w	r0, #8
    115c:	d008      	beq.n	1170 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    115e:	4a07      	ldr	r2, [pc, #28]	; (117c <_gclk_init_generators_by_fref+0x3c>)
    1160:	4b05      	ldr	r3, [pc, #20]	; (1178 <_gclk_init_generators_by_fref+0x38>)
    1162:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1164:	4619      	mov	r1, r3
    1166:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    116a:	684b      	ldr	r3, [r1, #4]
    116c:	4213      	tst	r3, r2
    116e:	d1fc      	bne.n	116a <_gclk_init_generators_by_fref+0x2a>
    1170:	4770      	bx	lr
    1172:	bf00      	nop
    1174:	00010906 	.word	0x00010906
    1178:	40001c00 	.word	0x40001c00
    117c:	00010905 	.word	0x00010905

00001180 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1180:	2201      	movs	r2, #1
    1182:	4b01      	ldr	r3, [pc, #4]	; (1188 <_mclk_init+0x8>)
    1184:	715a      	strb	r2, [r3, #5]
    1186:	4770      	bx	lr
    1188:	40000800 	.word	0x40000800

0000118c <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    118c:	4b06      	ldr	r3, [pc, #24]	; (11a8 <_osc32kctrl_init_sources+0x1c>)
    118e:	f242 028e 	movw	r2, #8334	; 0x208e
    1192:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    1194:	2200      	movs	r2, #0
    1196:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    1198:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    119a:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    119c:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    11a0:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    11a2:	2201      	movs	r2, #1
    11a4:	741a      	strb	r2, [r3, #16]
    11a6:	4770      	bx	lr
    11a8:	40001400 	.word	0x40001400

000011ac <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    11ac:	4770      	bx	lr
	...

000011b0 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    11b0:	4a36      	ldr	r2, [pc, #216]	; (128c <_oscctrl_init_referenced_generators+0xdc>)
    11b2:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    11b4:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    11b8:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    11bc:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    11be:	4611      	mov	r1, r2
    11c0:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    11c4:	684b      	ldr	r3, [r1, #4]
    11c6:	4213      	tst	r3, r2
    11c8:	d1fc      	bne.n	11c4 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    11ca:	4a30      	ldr	r2, [pc, #192]	; (128c <_oscctrl_init_referenced_generators+0xdc>)
    11cc:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    11ce:	f013 0f04 	tst.w	r3, #4
    11d2:	d1fb      	bne.n	11cc <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    11d4:	4b2e      	ldr	r3, [pc, #184]	; (1290 <_oscctrl_init_referenced_generators+0xe0>)
    11d6:	2200      	movs	r2, #0
    11d8:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    11da:	4a2e      	ldr	r2, [pc, #184]	; (1294 <_oscctrl_init_referenced_generators+0xe4>)
    11dc:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    11de:	461a      	mov	r2, r3
    11e0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    11e4:	f013 0f10 	tst.w	r3, #16
    11e8:	d1fa      	bne.n	11e0 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    11ea:	2200      	movs	r2, #0
    11ec:	4b28      	ldr	r3, [pc, #160]	; (1290 <_oscctrl_init_referenced_generators+0xe0>)
    11ee:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    11f2:	461a      	mov	r2, r3
    11f4:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    11f8:	f013 0f04 	tst.w	r3, #4
    11fc:	d1fa      	bne.n	11f4 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    11fe:	2202      	movs	r2, #2
    1200:	4b23      	ldr	r3, [pc, #140]	; (1290 <_oscctrl_init_referenced_generators+0xe0>)
    1202:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1204:	461a      	mov	r2, r3
    1206:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    120a:	f013 0f02 	tst.w	r3, #2
    120e:	d1fa      	bne.n	1206 <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    1210:	4b1f      	ldr	r3, [pc, #124]	; (1290 <_oscctrl_init_referenced_generators+0xe0>)
    1212:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    1214:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1216:	461a      	mov	r2, r3
    1218:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    121c:	f013 0f08 	tst.w	r3, #8
    1220:	d1fa      	bne.n	1218 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1222:	2280      	movs	r2, #128	; 0x80
    1224:	4b1a      	ldr	r3, [pc, #104]	; (1290 <_oscctrl_init_referenced_generators+0xe0>)
    1226:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    122a:	461a      	mov	r2, r3
    122c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1230:	f013 0f04 	tst.w	r3, #4
    1234:	d1fa      	bne.n	122c <_oscctrl_init_referenced_generators+0x7c>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    1236:	4b16      	ldr	r3, [pc, #88]	; (1290 <_oscctrl_init_referenced_generators+0xe0>)
    1238:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    123c:	f013 0f01 	tst.w	r3, #1
    1240:	d01d      	beq.n	127e <_oscctrl_init_referenced_generators+0xce>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1242:	4a13      	ldr	r2, [pc, #76]	; (1290 <_oscctrl_init_referenced_generators+0xe0>)
    1244:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    1246:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    124a:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    124e:	d1f9      	bne.n	1244 <_oscctrl_init_referenced_generators+0x94>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    1250:	4a0e      	ldr	r2, [pc, #56]	; (128c <_oscctrl_init_referenced_generators+0xdc>)
    1252:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    1254:	2b00      	cmp	r3, #0
    1256:	d1fc      	bne.n	1252 <_oscctrl_init_referenced_generators+0xa2>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1258:	4a0c      	ldr	r2, [pc, #48]	; (128c <_oscctrl_init_referenced_generators+0xdc>)
    125a:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    125c:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1260:	f043 0306 	orr.w	r3, r3, #6
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1264:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1266:	4611      	mov	r1, r2
    1268:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    126c:	684b      	ldr	r3, [r1, #4]
    126e:	4213      	tst	r3, r2
    1270:	d1fc      	bne.n	126c <_oscctrl_init_referenced_generators+0xbc>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    1272:	4a06      	ldr	r2, [pc, #24]	; (128c <_oscctrl_init_referenced_generators+0xdc>)
    1274:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    1276:	f013 0f04 	tst.w	r3, #4
    127a:	d1fb      	bne.n	1274 <_oscctrl_init_referenced_generators+0xc4>
		;
#endif
	(void)hw;
}
    127c:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    127e:	4a04      	ldr	r2, [pc, #16]	; (1290 <_oscctrl_init_referenced_generators+0xe0>)
    1280:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    1282:	f413 7f80 	tst.w	r3, #256	; 0x100
    1286:	d0fb      	beq.n	1280 <_oscctrl_init_referenced_generators+0xd0>
    1288:	e7e2      	b.n	1250 <_oscctrl_init_referenced_generators+0xa0>
    128a:	bf00      	nop
    128c:	40001c00 	.word	0x40001c00
    1290:	40001000 	.word	0x40001000
    1294:	04010000 	.word	0x04010000

00001298 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    1298:	b500      	push	{lr}
    129a:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    129c:	4b0d      	ldr	r3, [pc, #52]	; (12d4 <RAMECC_Handler+0x3c>)
    129e:	789b      	ldrb	r3, [r3, #2]
    12a0:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    12a2:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    12a4:	9b01      	ldr	r3, [sp, #4]
    12a6:	f013 0f02 	tst.w	r3, #2
    12aa:	d006      	beq.n	12ba <RAMECC_Handler+0x22>
    12ac:	4b0a      	ldr	r3, [pc, #40]	; (12d8 <RAMECC_Handler+0x40>)
    12ae:	681b      	ldr	r3, [r3, #0]
    12b0:	b11b      	cbz	r3, 12ba <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    12b2:	4a08      	ldr	r2, [pc, #32]	; (12d4 <RAMECC_Handler+0x3c>)
    12b4:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    12b6:	4798      	blx	r3
    12b8:	e009      	b.n	12ce <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    12ba:	9b01      	ldr	r3, [sp, #4]
    12bc:	f013 0f01 	tst.w	r3, #1
    12c0:	d005      	beq.n	12ce <RAMECC_Handler+0x36>
    12c2:	4b05      	ldr	r3, [pc, #20]	; (12d8 <RAMECC_Handler+0x40>)
    12c4:	685b      	ldr	r3, [r3, #4]
    12c6:	b113      	cbz	r3, 12ce <RAMECC_Handler+0x36>
    12c8:	4a02      	ldr	r2, [pc, #8]	; (12d4 <RAMECC_Handler+0x3c>)
    12ca:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    12cc:	4798      	blx	r3
	} else {
		return;
	}
}
    12ce:	b003      	add	sp, #12
    12d0:	f85d fb04 	ldr.w	pc, [sp], #4
    12d4:	41020000 	.word	0x41020000
    12d8:	200000d8 	.word	0x200000d8

000012dc <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    12dc:	b470      	push	{r4, r5, r6}
    12de:	b089      	sub	sp, #36	; 0x24
    12e0:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    12e2:	466c      	mov	r4, sp
    12e4:	4d0d      	ldr	r5, [pc, #52]	; (131c <_sercom_get_hardware_index+0x40>)
    12e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    12e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    12ea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    12ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    12f2:	9b00      	ldr	r3, [sp, #0]
    12f4:	42b3      	cmp	r3, r6
    12f6:	d00d      	beq.n	1314 <_sercom_get_hardware_index+0x38>
    12f8:	4631      	mov	r1, r6
    12fa:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    12fc:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    12fe:	f853 2b04 	ldr.w	r2, [r3], #4
    1302:	428a      	cmp	r2, r1
    1304:	d007      	beq.n	1316 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1306:	3001      	adds	r0, #1
    1308:	2808      	cmp	r0, #8
    130a:	d1f8      	bne.n	12fe <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    130c:	2000      	movs	r0, #0
}
    130e:	b009      	add	sp, #36	; 0x24
    1310:	bc70      	pop	{r4, r5, r6}
    1312:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1314:	2000      	movs	r0, #0
			return i;
    1316:	b2c0      	uxtb	r0, r0
    1318:	e7f9      	b.n	130e <_sercom_get_hardware_index+0x32>
    131a:	bf00      	nop
    131c:	00001e10 	.word	0x00001e10

00001320 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    1320:	b510      	push	{r4, lr}
	void *hw = device->hw;
    1322:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1324:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    1326:	f013 0f01 	tst.w	r3, #1
    132a:	d003      	beq.n	1334 <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    132c:	7da3      	ldrb	r3, [r4, #22]
    132e:	f013 0f01 	tst.w	r3, #1
    1332:	d112      	bne.n	135a <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1334:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    1336:	f013 0f02 	tst.w	r3, #2
    133a:	d003      	beq.n	1344 <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    133c:	7da3      	ldrb	r3, [r4, #22]
    133e:	f013 0f02 	tst.w	r3, #2
    1342:	d10f      	bne.n	1364 <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1344:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    1346:	f013 0f04 	tst.w	r3, #4
    134a:	d015      	beq.n	1378 <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    134c:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    134e:	f003 0337 	and.w	r3, r3, #55	; 0x37
    1352:	b163      	cbz	r3, 136e <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    1354:	23ff      	movs	r3, #255	; 0xff
    1356:	8363      	strh	r3, [r4, #26]
    1358:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    135a:	2301      	movs	r3, #1
    135c:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    135e:	6803      	ldr	r3, [r0, #0]
    1360:	4798      	blx	r3
    1362:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    1364:	2302      	movs	r3, #2
    1366:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    1368:	6883      	ldr	r3, [r0, #8]
    136a:	4798      	blx	r3
    136c:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->USART.DATA.reg;
    136e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    1370:	6843      	ldr	r3, [r0, #4]
    1372:	b2c9      	uxtb	r1, r1
    1374:	4798      	blx	r3
    1376:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    1378:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    137a:	09db      	lsrs	r3, r3, #7
    137c:	d100      	bne.n	1380 <_sercom_usart_interrupt_handler+0x60>
    137e:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    1380:	2380      	movs	r3, #128	; 0x80
    1382:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    1384:	68c3      	ldr	r3, [r0, #12]
    1386:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    1388:	8b63      	ldrh	r3, [r4, #26]
    138a:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    138c:	8363      	strh	r3, [r4, #26]
    138e:	e7f6      	b.n	137e <_sercom_usart_interrupt_handler+0x5e>

00001390 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    1390:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    1392:	4b03      	ldr	r3, [pc, #12]	; (13a0 <_sercom_get_irq_num+0x10>)
    1394:	4798      	blx	r3
    1396:	0080      	lsls	r0, r0, #2
    1398:	302e      	adds	r0, #46	; 0x2e
}
    139a:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    139e:	bd08      	pop	{r3, pc}
    13a0:	000012dd 	.word	0x000012dd

000013a4 <_spi_sync_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    13a4:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    13a6:	f013 0f01 	tst.w	r3, #1
    13aa:	d109      	bne.n	13c0 <_spi_sync_enable+0x1c>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    13ac:	6803      	ldr	r3, [r0, #0]
    13ae:	f043 0302 	orr.w	r3, r3, #2
    13b2:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    13b4:	69c3      	ldr	r3, [r0, #28]
    13b6:	f013 0f03 	tst.w	r3, #3
    13ba:	d1fb      	bne.n	13b4 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    13bc:	2000      	movs	r0, #0
    13be:	4770      	bx	lr
		return ERR_BUSY;
    13c0:	f06f 0003 	mvn.w	r0, #3
}
    13c4:	4770      	bx	lr
	...

000013c8 <_usart_init>:
{
    13c8:	b510      	push	{r4, lr}
    13ca:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    13cc:	4b21      	ldr	r3, [pc, #132]	; (1454 <_usart_init+0x8c>)
    13ce:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    13d0:	2804      	cmp	r0, #4
    13d2:	d005      	beq.n	13e0 <_usart_init+0x18>
	ASSERT(false);
    13d4:	f240 226b 	movw	r2, #619	; 0x26b
    13d8:	491f      	ldr	r1, [pc, #124]	; (1458 <_usart_init+0x90>)
    13da:	2000      	movs	r0, #0
    13dc:	4b1f      	ldr	r3, [pc, #124]	; (145c <_usart_init+0x94>)
    13de:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    13e0:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    13e2:	f013 0f01 	tst.w	r3, #1
    13e6:	d119      	bne.n	141c <_usart_init+0x54>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    13e8:	69e3      	ldr	r3, [r4, #28]
    13ea:	f013 0f03 	tst.w	r3, #3
    13ee:	d1fb      	bne.n	13e8 <_usart_init+0x20>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    13f0:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    13f2:	f013 0f02 	tst.w	r3, #2
    13f6:	d00b      	beq.n	1410 <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    13f8:	6823      	ldr	r3, [r4, #0]
    13fa:	f023 0302 	bic.w	r3, r3, #2
    13fe:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1400:	69e3      	ldr	r3, [r4, #28]
    1402:	f013 0f03 	tst.w	r3, #3
    1406:	d1fb      	bne.n	1400 <_usart_init+0x38>
    1408:	69e3      	ldr	r3, [r4, #28]
    140a:	f013 0f02 	tst.w	r3, #2
    140e:	d1fb      	bne.n	1408 <_usart_init+0x40>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1410:	2305      	movs	r3, #5
    1412:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1414:	69e3      	ldr	r3, [r4, #28]
    1416:	f013 0f03 	tst.w	r3, #3
    141a:	d1fb      	bne.n	1414 <_usart_init+0x4c>
    141c:	69e3      	ldr	r3, [r4, #28]
    141e:	f013 0f01 	tst.w	r3, #1
    1422:	d1fb      	bne.n	141c <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1424:	4b0e      	ldr	r3, [pc, #56]	; (1460 <_usart_init+0x98>)
    1426:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1428:	69e3      	ldr	r3, [r4, #28]
    142a:	f013 0f03 	tst.w	r3, #3
    142e:	d1fb      	bne.n	1428 <_usart_init+0x60>
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1430:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    1434:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1436:	69e3      	ldr	r3, [r4, #28]
    1438:	f013 0f1f 	tst.w	r3, #31
    143c:	d1fb      	bne.n	1436 <_usart_init+0x6e>
	((Sercom *)hw)->USART.CTRLC.reg = data;
    143e:	4b09      	ldr	r3, [pc, #36]	; (1464 <_usart_init+0x9c>)
    1440:	60a3      	str	r3, [r4, #8]
	((Sercom *)hw)->USART.BAUD.reg = data;
    1442:	f24f 632b 	movw	r3, #63019	; 0xf62b
    1446:	81a3      	strh	r3, [r4, #12]
	((Sercom *)hw)->USART.RXPL.reg = data;
    1448:	2000      	movs	r0, #0
    144a:	73a0      	strb	r0, [r4, #14]
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    144c:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
}
    1450:	bd10      	pop	{r4, pc}
    1452:	bf00      	nop
    1454:	000012dd 	.word	0x000012dd
    1458:	00001e48 	.word	0x00001e48
    145c:	00000de5 	.word	0x00000de5
    1460:	40100004 	.word	0x40100004
    1464:	00700002 	.word	0x00700002

00001468 <_usart_async_init>:
{
    1468:	b570      	push	{r4, r5, r6, lr}
    146a:	460d      	mov	r5, r1
	ASSERT(device);
    146c:	4606      	mov	r6, r0
    146e:	22cb      	movs	r2, #203	; 0xcb
    1470:	4918      	ldr	r1, [pc, #96]	; (14d4 <_usart_async_init+0x6c>)
    1472:	3000      	adds	r0, #0
    1474:	bf18      	it	ne
    1476:	2001      	movne	r0, #1
    1478:	4b17      	ldr	r3, [pc, #92]	; (14d8 <_usart_async_init+0x70>)
    147a:	4798      	blx	r3
	init_status = _usart_init(hw);
    147c:	4628      	mov	r0, r5
    147e:	4b17      	ldr	r3, [pc, #92]	; (14dc <_usart_async_init+0x74>)
    1480:	4798      	blx	r3
	if (init_status) {
    1482:	4604      	mov	r4, r0
    1484:	b108      	cbz	r0, 148a <_usart_async_init+0x22>
}
    1486:	4620      	mov	r0, r4
    1488:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    148a:	61b5      	str	r5, [r6, #24]
	if (hw == SERCOM4) {
    148c:	f1b5 4f86 	cmp.w	r5, #1124073472	; 0x43000000
		_sercom4_dev = (struct _usart_async_device *)dev;
    1490:	bf04      	itt	eq
    1492:	4b13      	ldreq	r3, [pc, #76]	; (14e0 <_usart_async_init+0x78>)
    1494:	601e      	streq	r6, [r3, #0]
	uint8_t irq = _sercom_get_irq_num(hw);
    1496:	4628      	mov	r0, r5
    1498:	4b12      	ldr	r3, [pc, #72]	; (14e4 <_usart_async_init+0x7c>)
    149a:	4798      	blx	r3
    149c:	1d01      	adds	r1, r0, #4
    149e:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    14a0:	2501      	movs	r5, #1
    14a2:	f000 021f 	and.w	r2, r0, #31
    14a6:	fa05 f202 	lsl.w	r2, r5, r2
    14aa:	0943      	lsrs	r3, r0, #5
    14ac:	009b      	lsls	r3, r3, #2
    14ae:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    14b2:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    14b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    14ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    14be:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    14c2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    14c6:	601a      	str	r2, [r3, #0]
		irq++;
    14c8:	3001      	adds	r0, #1
    14ca:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    14cc:	4281      	cmp	r1, r0
    14ce:	d1e8      	bne.n	14a2 <_usart_async_init+0x3a>
    14d0:	e7d9      	b.n	1486 <_usart_async_init+0x1e>
    14d2:	bf00      	nop
    14d4:	00001e48 	.word	0x00001e48
    14d8:	00000de5 	.word	0x00000de5
    14dc:	000013c9 	.word	0x000013c9
    14e0:	2000004c 	.word	0x2000004c
    14e4:	00001391 	.word	0x00001391

000014e8 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    14e8:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    14ea:	6813      	ldr	r3, [r2, #0]
    14ec:	f043 0302 	orr.w	r3, r3, #2
    14f0:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    14f2:	69d3      	ldr	r3, [r2, #28]
    14f4:	f013 0f03 	tst.w	r3, #3
    14f8:	d1fb      	bne.n	14f2 <_usart_async_enable+0xa>
}
    14fa:	4770      	bx	lr

000014fc <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    14fc:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    14fe:	6299      	str	r1, [r3, #40]	; 0x28
    1500:	4770      	bx	lr

00001502 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    1502:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    1504:	2201      	movs	r2, #1
    1506:	759a      	strb	r2, [r3, #22]
    1508:	4770      	bx	lr

0000150a <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    150a:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    150c:	2202      	movs	r2, #2
    150e:	759a      	strb	r2, [r3, #22]
    1510:	4770      	bx	lr
	...

00001514 <_usart_async_set_irq_state>:
{
    1514:	b570      	push	{r4, r5, r6, lr}
    1516:	460c      	mov	r4, r1
    1518:	4616      	mov	r6, r2
	ASSERT(device);
    151a:	4605      	mov	r5, r0
    151c:	f240 222b 	movw	r2, #555	; 0x22b
    1520:	4915      	ldr	r1, [pc, #84]	; (1578 <_usart_async_set_irq_state+0x64>)
    1522:	3000      	adds	r0, #0
    1524:	bf18      	it	ne
    1526:	2001      	movne	r0, #1
    1528:	4b14      	ldr	r3, [pc, #80]	; (157c <_usart_async_set_irq_state+0x68>)
    152a:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    152c:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    1530:	d10d      	bne.n	154e <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    1532:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    1534:	b92e      	cbnz	r6, 1542 <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    1536:	2201      	movs	r2, #1
    1538:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    153a:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    153c:	2202      	movs	r2, #2
    153e:	751a      	strb	r2, [r3, #20]
    1540:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    1542:	2201      	movs	r2, #1
    1544:	759a      	strb	r2, [r3, #22]
    1546:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    1548:	2202      	movs	r2, #2
    154a:	759a      	strb	r2, [r3, #22]
    154c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    154e:	2c01      	cmp	r4, #1
    1550:	d002      	beq.n	1558 <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    1552:	2c03      	cmp	r4, #3
    1554:	d008      	beq.n	1568 <_usart_async_set_irq_state+0x54>
    1556:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    1558:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    155a:	b916      	cbnz	r6, 1562 <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    155c:	2204      	movs	r2, #4
    155e:	751a      	strb	r2, [r3, #20]
    1560:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    1562:	2204      	movs	r2, #4
    1564:	759a      	strb	r2, [r3, #22]
    1566:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    1568:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    156a:	b116      	cbz	r6, 1572 <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    156c:	2280      	movs	r2, #128	; 0x80
    156e:	759a      	strb	r2, [r3, #22]
}
    1570:	e7f1      	b.n	1556 <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    1572:	2280      	movs	r2, #128	; 0x80
    1574:	751a      	strb	r2, [r3, #20]
    1576:	bd70      	pop	{r4, r5, r6, pc}
    1578:	00001e48 	.word	0x00001e48
    157c:	00000de5 	.word	0x00000de5

00001580 <SERCOM4_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_0_Handler(void)
{
    1580:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    1582:	4b02      	ldr	r3, [pc, #8]	; (158c <SERCOM4_0_Handler+0xc>)
    1584:	6818      	ldr	r0, [r3, #0]
    1586:	4b02      	ldr	r3, [pc, #8]	; (1590 <SERCOM4_0_Handler+0x10>)
    1588:	4798      	blx	r3
    158a:	bd08      	pop	{r3, pc}
    158c:	2000004c 	.word	0x2000004c
    1590:	00001321 	.word	0x00001321

00001594 <SERCOM4_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_1_Handler(void)
{
    1594:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    1596:	4b02      	ldr	r3, [pc, #8]	; (15a0 <SERCOM4_1_Handler+0xc>)
    1598:	6818      	ldr	r0, [r3, #0]
    159a:	4b02      	ldr	r3, [pc, #8]	; (15a4 <SERCOM4_1_Handler+0x10>)
    159c:	4798      	blx	r3
    159e:	bd08      	pop	{r3, pc}
    15a0:	2000004c 	.word	0x2000004c
    15a4:	00001321 	.word	0x00001321

000015a8 <SERCOM4_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_2_Handler(void)
{
    15a8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    15aa:	4b02      	ldr	r3, [pc, #8]	; (15b4 <SERCOM4_2_Handler+0xc>)
    15ac:	6818      	ldr	r0, [r3, #0]
    15ae:	4b02      	ldr	r3, [pc, #8]	; (15b8 <SERCOM4_2_Handler+0x10>)
    15b0:	4798      	blx	r3
    15b2:	bd08      	pop	{r3, pc}
    15b4:	2000004c 	.word	0x2000004c
    15b8:	00001321 	.word	0x00001321

000015bc <SERCOM4_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_3_Handler(void)
{
    15bc:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    15be:	4b02      	ldr	r3, [pc, #8]	; (15c8 <SERCOM4_3_Handler+0xc>)
    15c0:	6818      	ldr	r0, [r3, #0]
    15c2:	4b02      	ldr	r3, [pc, #8]	; (15cc <SERCOM4_3_Handler+0x10>)
    15c4:	4798      	blx	r3
    15c6:	bd08      	pop	{r3, pc}
    15c8:	2000004c 	.word	0x2000004c
    15cc:	00001321 	.word	0x00001321

000015d0 <_spi_m_sync_init>:
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    15d0:	b538      	push	{r3, r4, r5, lr}
    15d2:	4605      	mov	r5, r0
    15d4:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    15d6:	4608      	mov	r0, r1
    15d8:	4b36      	ldr	r3, [pc, #216]	; (16b4 <_spi_m_sync_init+0xe4>)
    15da:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    15dc:	b160      	cbz	r0, 15f8 <_spi_m_sync_init+0x28>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    15de:	2d00      	cmp	r5, #0
    15e0:	d055      	beq.n	168e <_spi_m_sync_init+0xbe>
    15e2:	f640 1281 	movw	r2, #2433	; 0x981
    15e6:	4934      	ldr	r1, [pc, #208]	; (16b8 <_spi_m_sync_init+0xe8>)
    15e8:	1c20      	adds	r0, r4, #0
    15ea:	bf18      	it	ne
    15ec:	2001      	movne	r0, #1
    15ee:	4b33      	ldr	r3, [pc, #204]	; (16bc <_spi_m_sync_init+0xec>)
    15f0:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    15f2:	f06f 000c 	mvn.w	r0, #12
    15f6:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    15f8:	2d00      	cmp	r5, #0
    15fa:	d151      	bne.n	16a0 <_spi_m_sync_init+0xd0>
    15fc:	f640 1281 	movw	r2, #2433	; 0x981
    1600:	492d      	ldr	r1, [pc, #180]	; (16b8 <_spi_m_sync_init+0xe8>)
    1602:	2000      	movs	r0, #0
    1604:	4b2d      	ldr	r3, [pc, #180]	; (16bc <_spi_m_sync_init+0xec>)
    1606:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1608:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    160a:	f013 0f01 	tst.w	r3, #1
    160e:	d119      	bne.n	1644 <_spi_m_sync_init+0x74>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1610:	69e3      	ldr	r3, [r4, #28]
    1612:	f013 0f03 	tst.w	r3, #3
    1616:	d1fb      	bne.n	1610 <_spi_m_sync_init+0x40>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1618:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    161a:	f013 0f02 	tst.w	r3, #2
    161e:	d00b      	beq.n	1638 <_spi_m_sync_init+0x68>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1620:	6823      	ldr	r3, [r4, #0]
    1622:	f023 0302 	bic.w	r3, r3, #2
    1626:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1628:	69e3      	ldr	r3, [r4, #28]
    162a:	f013 0f03 	tst.w	r3, #3
    162e:	d1fb      	bne.n	1628 <_spi_m_sync_init+0x58>
    1630:	69e3      	ldr	r3, [r4, #28]
    1632:	f013 0f02 	tst.w	r3, #2
    1636:	d1fb      	bne.n	1630 <_spi_m_sync_init+0x60>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1638:	230d      	movs	r3, #13
    163a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    163c:	69e3      	ldr	r3, [r4, #28]
    163e:	f013 0f03 	tst.w	r3, #3
    1642:	d1fb      	bne.n	163c <_spi_m_sync_init+0x6c>
    1644:	69e3      	ldr	r3, [r4, #28]
    1646:	f013 0f01 	tst.w	r3, #1
    164a:	d1fb      	bne.n	1644 <_spi_m_sync_init+0x74>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    164c:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    164e:	f640 122e 	movw	r2, #2350	; 0x92e
    1652:	4919      	ldr	r1, [pc, #100]	; (16b8 <_spi_m_sync_init+0xe8>)
    1654:	1c20      	adds	r0, r4, #0
    1656:	bf18      	it	ne
    1658:	2001      	movne	r0, #1
    165a:	4b18      	ldr	r3, [pc, #96]	; (16bc <_spi_m_sync_init+0xec>)
    165c:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    165e:	4b18      	ldr	r3, [pc, #96]	; (16c0 <_spi_m_sync_init+0xf0>)
    1660:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1662:	69e3      	ldr	r3, [r4, #28]
    1664:	f013 0f03 	tst.w	r3, #3
    1668:	d1fb      	bne.n	1662 <_spi_m_sync_init+0x92>
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    166a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    166e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1670:	69e3      	ldr	r3, [r4, #28]
    1672:	f013 0f17 	tst.w	r3, #23
    1676:	d1fb      	bne.n	1670 <_spi_m_sync_init+0xa0>
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1678:	23fe      	movs	r3, #254	; 0xfe
    167a:	7323      	strb	r3, [r4, #12]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    167c:	2000      	movs	r0, #0
    167e:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1682:	2301      	movs	r3, #1
    1684:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    1686:	f240 13ff 	movw	r3, #511	; 0x1ff
    168a:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    168c:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    168e:	f640 1281 	movw	r2, #2433	; 0x981
    1692:	4909      	ldr	r1, [pc, #36]	; (16b8 <_spi_m_sync_init+0xe8>)
    1694:	2000      	movs	r0, #0
    1696:	4b09      	ldr	r3, [pc, #36]	; (16bc <_spi_m_sync_init+0xec>)
    1698:	4798      	blx	r3
		return ERR_INVALID_ARG;
    169a:	f06f 000c 	mvn.w	r0, #12
    169e:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    16a0:	f640 1281 	movw	r2, #2433	; 0x981
    16a4:	4904      	ldr	r1, [pc, #16]	; (16b8 <_spi_m_sync_init+0xe8>)
    16a6:	1c20      	adds	r0, r4, #0
    16a8:	bf18      	it	ne
    16aa:	2001      	movne	r0, #1
    16ac:	4b03      	ldr	r3, [pc, #12]	; (16bc <_spi_m_sync_init+0xec>)
    16ae:	4798      	blx	r3
    16b0:	e7aa      	b.n	1608 <_spi_m_sync_init+0x38>
    16b2:	bf00      	nop
    16b4:	000012dd 	.word	0x000012dd
    16b8:	00001e48 	.word	0x00001e48
    16bc:	00000de5 	.word	0x00000de5
    16c0:	0020000c 	.word	0x0020000c

000016c4 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    16c4:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    16c6:	4604      	mov	r4, r0
    16c8:	b160      	cbz	r0, 16e4 <_spi_m_sync_enable+0x20>
    16ca:	6800      	ldr	r0, [r0, #0]
    16cc:	3000      	adds	r0, #0
    16ce:	bf18      	it	ne
    16d0:	2001      	movne	r0, #1
    16d2:	f44f 621e 	mov.w	r2, #2528	; 0x9e0
    16d6:	4904      	ldr	r1, [pc, #16]	; (16e8 <_spi_m_sync_enable+0x24>)
    16d8:	4b04      	ldr	r3, [pc, #16]	; (16ec <_spi_m_sync_enable+0x28>)
    16da:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    16dc:	6820      	ldr	r0, [r4, #0]
    16de:	4b04      	ldr	r3, [pc, #16]	; (16f0 <_spi_m_sync_enable+0x2c>)
    16e0:	4798      	blx	r3
}
    16e2:	bd10      	pop	{r4, pc}
    16e4:	2000      	movs	r0, #0
    16e6:	e7f4      	b.n	16d2 <_spi_m_sync_enable+0xe>
    16e8:	00001e48 	.word	0x00001e48
    16ec:	00000de5 	.word	0x00000de5
    16f0:	000013a5 	.word	0x000013a5

000016f4 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    16f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    16f8:	4681      	mov	r9, r0
    16fa:	460e      	mov	r6, r1
	void *                 hw   = dev->prvt;
    16fc:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    16fe:	f8d1 8000 	ldr.w	r8, [r1]
    1702:	684d      	ldr	r5, [r1, #4]
    1704:	7907      	ldrb	r7, [r0, #4]

	ASSERT(dev && hw);
    1706:	b1a8      	cbz	r0, 1734 <_spi_m_sync_trans+0x40>
    1708:	1c20      	adds	r0, r4, #0
    170a:	bf18      	it	ne
    170c:	2001      	movne	r0, #1
    170e:	f640 22e5 	movw	r2, #2789	; 0xae5
    1712:	492e      	ldr	r1, [pc, #184]	; (17cc <_spi_m_sync_trans+0xd8>)
    1714:	4b2e      	ldr	r3, [pc, #184]	; (17d0 <_spi_m_sync_trans+0xdc>)
    1716:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1718:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    171a:	f013 0f07 	tst.w	r3, #7
    171e:	d134      	bne.n	178a <_spi_m_sync_trans+0x96>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1720:	69e0      	ldr	r0, [r4, #28]
    1722:	f010 0003 	ands.w	r0, r0, #3
    1726:	d1fb      	bne.n	1720 <_spi_m_sync_trans+0x2c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1728:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    172a:	f013 0f02 	tst.w	r3, #2
    172e:	d030      	beq.n	1792 <_spi_m_sync_trans+0x9e>
    1730:	4602      	mov	r2, r0
    1732:	e008      	b.n	1746 <_spi_m_sync_trans+0x52>
    1734:	2000      	movs	r0, #0
    1736:	e7ea      	b.n	170e <_spi_m_sync_trans+0x1a>
	ctrl->rxcnt++;
    1738:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    173a:	f013 0f80 	tst.w	r3, #128	; 0x80
    173e:	d112      	bne.n	1766 <_spi_m_sync_trans+0x72>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    1740:	68b3      	ldr	r3, [r6, #8]
    1742:	4283      	cmp	r3, r0
    1744:	d91e      	bls.n	1784 <_spi_m_sync_trans+0x90>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    1746:	7e23      	ldrb	r3, [r4, #24]
    1748:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    174a:	f013 0f04 	tst.w	r3, #4
    174e:	d024      	beq.n	179a <_spi_m_sync_trans+0xa6>
	return ((Sercom *)hw)->SPI.DATA.reg;
    1750:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    1752:	2d00      	cmp	r5, #0
    1754:	d0f0      	beq.n	1738 <_spi_m_sync_trans+0x44>
		*ctrl->rxbuf++ = (uint8_t)data;
    1756:	7029      	strb	r1, [r5, #0]
		if (ctrl->char_size > 1) {
    1758:	2f01      	cmp	r7, #1
		*ctrl->rxbuf++ = (uint8_t)data;
    175a:	bf91      	iteee	ls
    175c:	3501      	addls	r5, #1
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    175e:	0a09      	lsrhi	r1, r1, #8
    1760:	7069      	strbhi	r1, [r5, #1]
    1762:	3502      	addhi	r5, #2
    1764:	e7e8      	b.n	1738 <_spi_m_sync_trans+0x44>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    1766:	f64f 73ff 	movw	r3, #65535	; 0xffff
    176a:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    176c:	2380      	movs	r3, #128	; 0x80
    176e:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    1770:	f06f 0012 	mvn.w	r0, #18
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    1774:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    1776:	f013 0f03 	tst.w	r3, #3
    177a:	d0fb      	beq.n	1774 <_spi_m_sync_trans+0x80>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    177c:	2303      	movs	r3, #3
    177e:	7623      	strb	r3, [r4, #24]
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
    1780:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    1784:	4293      	cmp	r3, r2
    1786:	d8de      	bhi.n	1746 <_spi_m_sync_trans+0x52>
    1788:	e7f4      	b.n	1774 <_spi_m_sync_trans+0x80>
		return ERR_BUSY;
    178a:	f06f 0003 	mvn.w	r0, #3
    178e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_NOT_INITIALIZED;
    1792:	f06f 0013 	mvn.w	r0, #19
    1796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ctrl.rxcnt >= ctrl.txcnt) {
    179a:	4290      	cmp	r0, r2
    179c:	d8cd      	bhi.n	173a <_spi_m_sync_trans+0x46>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    179e:	f013 0f01 	tst.w	r3, #1
    17a2:	d0ca      	beq.n	173a <_spi_m_sync_trans+0x46>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    17a4:	f8b9 1006 	ldrh.w	r1, [r9, #6]
	if (ctrl->txbuf) {
    17a8:	f1b8 0f00 	cmp.w	r8, #0
    17ac:	d00b      	beq.n	17c6 <_spi_m_sync_trans+0xd2>
		data = *ctrl->txbuf++;
    17ae:	f898 1000 	ldrb.w	r1, [r8]
		if (ctrl->char_size > 1) {
    17b2:	2f01      	cmp	r7, #1
		data = *ctrl->txbuf++;
    17b4:	bf91      	iteee	ls
    17b6:	f108 0801 	addls.w	r8, r8, #1
			data |= (*ctrl->txbuf) << 8;
    17ba:	f898 e001 	ldrbhi.w	lr, [r8, #1]
    17be:	ea41 210e 	orrhi.w	r1, r1, lr, lsl #8
			ctrl->txbuf++;
    17c2:	f108 0802 	addhi.w	r8, r8, #2
	ctrl->txcnt++;
    17c6:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    17c8:	62a1      	str	r1, [r4, #40]	; 0x28
    17ca:	e7b6      	b.n	173a <_spi_m_sync_trans+0x46>
    17cc:	00001e48 	.word	0x00001e48
    17d0:	00000de5 	.word	0x00000de5

000017d4 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    17d4:	4b03      	ldr	r3, [pc, #12]	; (17e4 <_delay_init+0x10>)
    17d6:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    17da:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    17dc:	2205      	movs	r2, #5
    17de:	601a      	str	r2, [r3, #0]
    17e0:	4770      	bx	lr
    17e2:	bf00      	nop
    17e4:	e000e010 	.word	0xe000e010

000017e8 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    17e8:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    17ea:	b303      	cbz	r3, 182e <_delay_cycles+0x46>
{
    17ec:	b430      	push	{r4, r5}
    17ee:	1e5d      	subs	r5, r3, #1
    17f0:	b2ed      	uxtb	r5, r5
	while (n--) {
    17f2:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    17f4:	4a12      	ldr	r2, [pc, #72]	; (1840 <_delay_cycles+0x58>)
    17f6:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    17fa:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    17fc:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    17fe:	6813      	ldr	r3, [r2, #0]
    1800:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1804:	d0fb      	beq.n	17fe <_delay_cycles+0x16>
	while (n--) {
    1806:	3801      	subs	r0, #1
    1808:	b2c0      	uxtb	r0, r0
    180a:	28ff      	cmp	r0, #255	; 0xff
    180c:	d1f5      	bne.n	17fa <_delay_cycles+0x12>
    180e:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    1812:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    1816:	3101      	adds	r1, #1
    1818:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    181a:	4b09      	ldr	r3, [pc, #36]	; (1840 <_delay_cycles+0x58>)
    181c:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    181e:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1820:	461a      	mov	r2, r3
    1822:	6813      	ldr	r3, [r2, #0]
    1824:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1828:	d0fb      	beq.n	1822 <_delay_cycles+0x3a>
		;
}
    182a:	bc30      	pop	{r4, r5}
    182c:	4770      	bx	lr
	SysTick->LOAD = buf;
    182e:	4b04      	ldr	r3, [pc, #16]	; (1840 <_delay_cycles+0x58>)
    1830:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    1832:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1834:	461a      	mov	r2, r3
    1836:	6813      	ldr	r3, [r2, #0]
    1838:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    183c:	d0fb      	beq.n	1836 <_delay_cycles+0x4e>
    183e:	4770      	bx	lr
    1840:	e000e010 	.word	0xe000e010

00001844 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    1844:	b570      	push	{r4, r5, r6, lr}
    1846:	b088      	sub	sp, #32
    1848:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    184a:	466c      	mov	r4, sp
    184c:	4d11      	ldr	r5, [pc, #68]	; (1894 <get_tc_index+0x50>)
    184e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1850:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1852:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1856:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    185a:	9b00      	ldr	r3, [sp, #0]
    185c:	42b3      	cmp	r3, r6
    185e:	d013      	beq.n	1888 <get_tc_index+0x44>
    1860:	4630      	mov	r0, r6
    1862:	aa01      	add	r2, sp, #4
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1864:	2301      	movs	r3, #1
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    1866:	f852 1b04 	ldr.w	r1, [r2], #4
    186a:	4281      	cmp	r1, r0
    186c:	d00d      	beq.n	188a <get_tc_index+0x46>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    186e:	3301      	adds	r3, #1
    1870:	2b08      	cmp	r3, #8
    1872:	d1f8      	bne.n	1866 <get_tc_index+0x22>
	ASSERT(false);
    1874:	f44f 729e 	mov.w	r2, #316	; 0x13c
    1878:	4907      	ldr	r1, [pc, #28]	; (1898 <get_tc_index+0x54>)
    187a:	2000      	movs	r0, #0
    187c:	4b07      	ldr	r3, [pc, #28]	; (189c <get_tc_index+0x58>)
    187e:	4798      	blx	r3
	return -1;
    1880:	f04f 30ff 	mov.w	r0, #4294967295
}
    1884:	b008      	add	sp, #32
    1886:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1888:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    188a:	b2db      	uxtb	r3, r3
    188c:	2b07      	cmp	r3, #7
    188e:	d1f1      	bne.n	1874 <get_tc_index+0x30>
			return i;
    1890:	2000      	movs	r0, #0
    1892:	e7f7      	b.n	1884 <get_tc_index+0x40>
    1894:	00001e64 	.word	0x00001e64
    1898:	00001e98 	.word	0x00001e98
    189c:	00000de5 	.word	0x00000de5

000018a0 <_timer_init>:
{
    18a0:	b570      	push	{r4, r5, r6, lr}
    18a2:	4606      	mov	r6, r0
    18a4:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    18a6:	4608      	mov	r0, r1
    18a8:	4b60      	ldr	r3, [pc, #384]	; (1a2c <_timer_init+0x18c>)
    18aa:	4798      	blx	r3
    18ac:	4605      	mov	r5, r0
	device->hw = hw;
    18ae:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    18b0:	228d      	movs	r2, #141	; 0x8d
    18b2:	495f      	ldr	r1, [pc, #380]	; (1a30 <_timer_init+0x190>)
    18b4:	2001      	movs	r0, #1
    18b6:	4b5f      	ldr	r3, [pc, #380]	; (1a34 <_timer_init+0x194>)
    18b8:	4798      	blx	r3
	};
}

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    18ba:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    18bc:	f013 0f01 	tst.w	r3, #1
    18c0:	d119      	bne.n	18f6 <_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    18c2:	6923      	ldr	r3, [r4, #16]
    18c4:	f013 0f03 	tst.w	r3, #3
    18c8:	d1fb      	bne.n	18c2 <_timer_init+0x22>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    18ca:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    18cc:	f013 0f02 	tst.w	r3, #2
    18d0:	d00b      	beq.n	18ea <_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    18d2:	6823      	ldr	r3, [r4, #0]
    18d4:	f023 0302 	bic.w	r3, r3, #2
    18d8:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    18da:	6923      	ldr	r3, [r4, #16]
    18dc:	f013 0f03 	tst.w	r3, #3
    18e0:	d1fb      	bne.n	18da <_timer_init+0x3a>
    18e2:	6923      	ldr	r3, [r4, #16]
    18e4:	f013 0f02 	tst.w	r3, #2
    18e8:	d1fb      	bne.n	18e2 <_timer_init+0x42>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    18ea:	2301      	movs	r3, #1
    18ec:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    18ee:	6923      	ldr	r3, [r4, #16]
    18f0:	f013 0f03 	tst.w	r3, #3
    18f4:	d1fb      	bne.n	18ee <_timer_init+0x4e>
    18f6:	6923      	ldr	r3, [r4, #16]
    18f8:	f013 0f01 	tst.w	r3, #1
    18fc:	d1fb      	bne.n	18f6 <_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    18fe:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1902:	4a4d      	ldr	r2, [pc, #308]	; (1a38 <_timer_init+0x198>)
    1904:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1908:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    190a:	6022      	str	r2, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    190c:	6923      	ldr	r3, [r4, #16]
    190e:	f013 0f03 	tst.w	r3, #3
    1912:	d1fb      	bne.n	190c <_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    1914:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1918:	4947      	ldr	r1, [pc, #284]	; (1a38 <_timer_init+0x198>)
    191a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    191e:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    1922:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    1924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    1926:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    1928:	2301      	movs	r3, #1
    192a:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    192c:	f002 020c 	and.w	r2, r2, #12
    1930:	2a08      	cmp	r2, #8
    1932:	d048      	beq.n	19c6 <_timer_init+0x126>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    1934:	2a00      	cmp	r2, #0
    1936:	d158      	bne.n	19ea <_timer_init+0x14a>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    1938:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    193c:	4a3e      	ldr	r2, [pc, #248]	; (1a38 <_timer_init+0x198>)
    193e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1942:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1944:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1946:	6923      	ldr	r3, [r4, #16]
    1948:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    194c:	d1fb      	bne.n	1946 <_timer_init+0xa6>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    194e:	2300      	movs	r3, #0
    1950:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1952:	6923      	ldr	r3, [r4, #16]
    1954:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1958:	d1fb      	bne.n	1952 <_timer_init+0xb2>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    195a:	2301      	movs	r3, #1
    195c:	7263      	strb	r3, [r4, #9]
	if (hw == TC7) {
    195e:	4b37      	ldr	r3, [pc, #220]	; (1a3c <_timer_init+0x19c>)
    1960:	429c      	cmp	r4, r3
		_tc7_dev = (struct _timer_device *)dev;
    1962:	bf04      	itt	eq
    1964:	4b36      	ldreq	r3, [pc, #216]	; (1a40 <_timer_init+0x1a0>)
    1966:	601e      	streq	r6, [r3, #0]
	NVIC_DisableIRQ(_tcs[i].irq);
    1968:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    196c:	4a32      	ldr	r2, [pc, #200]	; (1a38 <_timer_init+0x198>)
    196e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1972:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    1976:	2b00      	cmp	r3, #0
    1978:	db23      	blt.n	19c2 <_timer_init+0x122>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    197a:	095a      	lsrs	r2, r3, #5
    197c:	f003 031f 	and.w	r3, r3, #31
    1980:	2101      	movs	r1, #1
    1982:	fa01 f303 	lsl.w	r3, r1, r3
    1986:	3220      	adds	r2, #32
    1988:	492e      	ldr	r1, [pc, #184]	; (1a44 <_timer_init+0x1a4>)
    198a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    198e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1992:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    1996:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    199a:	4b27      	ldr	r3, [pc, #156]	; (1a38 <_timer_init+0x198>)
    199c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    19a0:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    19a4:	2b00      	cmp	r3, #0
    19a6:	db0c      	blt.n	19c2 <_timer_init+0x122>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19a8:	0959      	lsrs	r1, r3, #5
    19aa:	f003 031f 	and.w	r3, r3, #31
    19ae:	2201      	movs	r2, #1
    19b0:	fa02 f303 	lsl.w	r3, r2, r3
    19b4:	4a23      	ldr	r2, [pc, #140]	; (1a44 <_timer_init+0x1a4>)
    19b6:	f101 0060 	add.w	r0, r1, #96	; 0x60
    19ba:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19be:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    19c2:	2000      	movs	r0, #0
    19c4:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    19c6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    19ca:	4a1b      	ldr	r2, [pc, #108]	; (1a38 <_timer_init+0x198>)
    19cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    19d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    19d2:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    19d4:	6923      	ldr	r3, [r4, #16]
    19d6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    19da:	d1fb      	bne.n	19d4 <_timer_init+0x134>
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    19dc:	2300      	movs	r3, #0
    19de:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    19e0:	6923      	ldr	r3, [r4, #16]
    19e2:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    19e6:	d1fb      	bne.n	19e0 <_timer_init+0x140>
    19e8:	e7b7      	b.n	195a <_timer_init+0xba>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    19ea:	2a04      	cmp	r2, #4
    19ec:	d1b5      	bne.n	195a <_timer_init+0xba>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    19ee:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    19f2:	4a11      	ldr	r2, [pc, #68]	; (1a38 <_timer_init+0x198>)
    19f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    19f8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    19fc:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    19fe:	6923      	ldr	r3, [r4, #16]
    1a00:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1a04:	d1fb      	bne.n	19fe <_timer_init+0x15e>
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    1a06:	2300      	movs	r3, #0
    1a08:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1a0a:	6923      	ldr	r3, [r4, #16]
    1a0c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1a10:	d1fb      	bne.n	1a0a <_timer_init+0x16a>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    1a12:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1a16:	4a08      	ldr	r2, [pc, #32]	; (1a38 <_timer_init+0x198>)
    1a18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1a1c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	((Tc *)hw)->COUNT8.PER.reg = data;
    1a20:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1a22:	6923      	ldr	r3, [r4, #16]
    1a24:	f013 0f20 	tst.w	r3, #32
    1a28:	d1fb      	bne.n	1a22 <_timer_init+0x182>
    1a2a:	e796      	b.n	195a <_timer_init+0xba>
    1a2c:	00001845 	.word	0x00001845
    1a30:	00001e98 	.word	0x00001e98
    1a34:	00000de5 	.word	0x00000de5
    1a38:	00001e64 	.word	0x00001e64
    1a3c:	43001800 	.word	0x43001800
    1a40:	20000050 	.word	0x20000050
    1a44:	e000e100 	.word	0xe000e100

00001a48 <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    1a48:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    1a4a:	6813      	ldr	r3, [r2, #0]
    1a4c:	f043 0302 	orr.w	r3, r3, #2
    1a50:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1a52:	6913      	ldr	r3, [r2, #16]
    1a54:	f013 0f03 	tst.w	r3, #3
    1a58:	d1fb      	bne.n	1a52 <_timer_start+0xa>
}
    1a5a:	4770      	bx	lr

00001a5c <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    1a5c:	68c2      	ldr	r2, [r0, #12]
    1a5e:	6913      	ldr	r3, [r2, #16]
    1a60:	f013 0f03 	tst.w	r3, #3
    1a64:	d1fb      	bne.n	1a5e <_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1a66:	6810      	ldr	r0, [r2, #0]
}
    1a68:	f3c0 0040 	ubfx	r0, r0, #1, #1
    1a6c:	4770      	bx	lr

00001a6e <_tc_get_timer>:
}
    1a6e:	2000      	movs	r0, #0
    1a70:	4770      	bx	lr
	...

00001a74 <_timer_set_irq>:
{
    1a74:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    1a76:	68c0      	ldr	r0, [r0, #12]
    1a78:	4b09      	ldr	r3, [pc, #36]	; (1aa0 <_timer_set_irq+0x2c>)
    1a7a:	4798      	blx	r3
    1a7c:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    1a7e:	f240 120f 	movw	r2, #271	; 0x10f
    1a82:	4908      	ldr	r1, [pc, #32]	; (1aa4 <_timer_set_irq+0x30>)
    1a84:	2001      	movs	r0, #1
    1a86:	4b08      	ldr	r3, [pc, #32]	; (1aa8 <_timer_set_irq+0x34>)
    1a88:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    1a8a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    1a8e:	4b07      	ldr	r3, [pc, #28]	; (1aac <_timer_set_irq+0x38>)
    1a90:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1a94:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    1a98:	4b05      	ldr	r3, [pc, #20]	; (1ab0 <_timer_set_irq+0x3c>)
    1a9a:	4798      	blx	r3
    1a9c:	bd10      	pop	{r4, pc}
    1a9e:	bf00      	nop
    1aa0:	00001845 	.word	0x00001845
    1aa4:	00001e98 	.word	0x00001e98
    1aa8:	00000de5 	.word	0x00000de5
    1aac:	00001e64 	.word	0x00001e64
    1ab0:	00000f45 	.word	0x00000f45

00001ab4 <TC7_Handler>:
{
    1ab4:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc7_dev);
    1ab6:	4b06      	ldr	r3, [pc, #24]	; (1ad0 <TC7_Handler+0x1c>)
    1ab8:	6818      	ldr	r0, [r3, #0]
	void *const hw = device->hw;
    1aba:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    1abc:	7a9a      	ldrb	r2, [r3, #10]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    1abe:	f012 0f01 	tst.w	r2, #1
    1ac2:	d100      	bne.n	1ac6 <TC7_Handler+0x12>
    1ac4:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    1ac6:	2201      	movs	r2, #1
    1ac8:	729a      	strb	r2, [r3, #10]
		device->timer_cb.period_expired(device);
    1aca:	6803      	ldr	r3, [r0, #0]
    1acc:	4798      	blx	r3
}
    1ace:	e7f9      	b.n	1ac4 <TC7_Handler+0x10>
    1ad0:	20000050 	.word	0x20000050

00001ad4 <tx_cb_USART_0>:
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    1ad4:	2202      	movs	r2, #2
    1ad6:	4b02      	ldr	r3, [pc, #8]	; (1ae0 <tx_cb_USART_0+0xc>)
    1ad8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    1adc:	4770      	bx	lr
    1ade:	bf00      	nop
    1ae0:	41008000 	.word	0x41008000

00001ae4 <TIMER_0_task1_cb>:
	timer_add_task(&TIMER_0, &TIMER_0_task1);
	timer_start(&TIMER_0);
}

static void TIMER_0_task1_cb(const struct timer_task *const timer_task)
{
    1ae4:	4770      	bx	lr
	...

00001ae8 <USART_init>:
void USART_init(void){
    1ae8:	b510      	push	{r4, lr}
	usart_async_register_callback(&USART_0, USART_ASYNC_TXC_CB, tx_cb_USART_0);
    1aea:	4c07      	ldr	r4, [pc, #28]	; (1b08 <USART_init+0x20>)
    1aec:	4a07      	ldr	r2, [pc, #28]	; (1b0c <USART_init+0x24>)
    1aee:	2101      	movs	r1, #1
    1af0:	4620      	mov	r0, r4
    1af2:	4b07      	ldr	r3, [pc, #28]	; (1b10 <USART_init+0x28>)
    1af4:	4798      	blx	r3
	usart_async_get_io_descriptor(&USART_0, &usart);
    1af6:	4907      	ldr	r1, [pc, #28]	; (1b14 <USART_init+0x2c>)
    1af8:	4620      	mov	r0, r4
    1afa:	4b07      	ldr	r3, [pc, #28]	; (1b18 <USART_init+0x30>)
    1afc:	4798      	blx	r3
	usart_async_enable(&USART_0);
    1afe:	4620      	mov	r0, r4
    1b00:	4b06      	ldr	r3, [pc, #24]	; (1b1c <USART_init+0x34>)
    1b02:	4798      	blx	r3
    1b04:	bd10      	pop	{r4, pc}
    1b06:	bf00      	nop
    1b08:	2000006c 	.word	0x2000006c
    1b0c:	00001ad5 	.word	0x00001ad5
    1b10:	00000d71 	.word	0x00000d71
    1b14:	200000ec 	.word	0x200000ec
    1b18:	00000d49 	.word	0x00000d49
    1b1c:	00000d1d 	.word	0x00000d1d

00001b20 <Timer_init>:
void Timer_init(void){
    1b20:	b510      	push	{r4, lr}
	TIMER_0_task1.interval = 100;
    1b22:	4907      	ldr	r1, [pc, #28]	; (1b40 <Timer_init+0x20>)
    1b24:	2364      	movs	r3, #100	; 0x64
    1b26:	608b      	str	r3, [r1, #8]
	TIMER_0_task1.cb = TIMER_0_task1_cb;
    1b28:	4b06      	ldr	r3, [pc, #24]	; (1b44 <Timer_init+0x24>)
    1b2a:	60cb      	str	r3, [r1, #12]
	TIMER_0_task1.mode = TIMER_TASK_REPEAT;
    1b2c:	2301      	movs	r3, #1
    1b2e:	740b      	strb	r3, [r1, #16]
	timer_add_task(&TIMER_0, &TIMER_0_task1);
    1b30:	4c05      	ldr	r4, [pc, #20]	; (1b48 <Timer_init+0x28>)
    1b32:	4620      	mov	r0, r4
    1b34:	4b05      	ldr	r3, [pc, #20]	; (1b4c <Timer_init+0x2c>)
    1b36:	4798      	blx	r3
	timer_start(&TIMER_0);
    1b38:	4620      	mov	r0, r4
    1b3a:	4b05      	ldr	r3, [pc, #20]	; (1b50 <Timer_init+0x30>)
    1b3c:	4798      	blx	r3
    1b3e:	bd10      	pop	{r4, pc}
    1b40:	200000f0 	.word	0x200000f0
    1b44:	00001ae5 	.word	0x00001ae5
    1b48:	200000bc 	.word	0x200000bc
    1b4c:	00000a35 	.word	0x00000a35
    1b50:	000009f9 	.word	0x000009f9

00001b54 <main>:
{
    1b54:	b500      	push	{lr}
    1b56:	b087      	sub	sp, #28
	atmel_start_init();
    1b58:	4b1e      	ldr	r3, [pc, #120]	; (1bd4 <main+0x80>)
    1b5a:	4798      	blx	r3
	USART_init();
    1b5c:	4b1e      	ldr	r3, [pc, #120]	; (1bd8 <main+0x84>)
    1b5e:	4798      	blx	r3
	Timer_init();
    1b60:	4b1e      	ldr	r3, [pc, #120]	; (1bdc <main+0x88>)
    1b62:	4798      	blx	r3
	io_write(usart, welcome_USART, 13);
    1b64:	220d      	movs	r2, #13
    1b66:	491e      	ldr	r1, [pc, #120]	; (1be0 <main+0x8c>)
    1b68:	4b1e      	ldr	r3, [pc, #120]	; (1be4 <main+0x90>)
    1b6a:	6818      	ldr	r0, [r3, #0]
    1b6c:	4b1e      	ldr	r3, [pc, #120]	; (1be8 <main+0x94>)
    1b6e:	4798      	blx	r3
	SPI_init();
    1b70:	4b1e      	ldr	r3, [pc, #120]	; (1bec <main+0x98>)
    1b72:	4798      	blx	r3
	RESET_ON
    1b74:	2100      	movs	r1, #0
    1b76:	2053      	movs	r0, #83	; 0x53
    1b78:	4c1d      	ldr	r4, [pc, #116]	; (1bf0 <main+0x9c>)
    1b7a:	47a0      	blx	r4
	wait_ms(10);
    1b7c:	200a      	movs	r0, #10
    1b7e:	4b1d      	ldr	r3, [pc, #116]	; (1bf4 <main+0xa0>)
    1b80:	4798      	blx	r3
	RESET_OFF
    1b82:	2101      	movs	r1, #1
    1b84:	2053      	movs	r0, #83	; 0x53
    1b86:	47a0      	blx	r4
	WAIT
    1b88:	2554      	movs	r5, #84	; 0x54
    1b8a:	4c1b      	ldr	r4, [pc, #108]	; (1bf8 <main+0xa4>)
    1b8c:	4628      	mov	r0, r5
    1b8e:	47a0      	blx	r4
    1b90:	2800      	cmp	r0, #0
    1b92:	d1fb      	bne.n	1b8c <main+0x38>
	uint8_t status = 0xC0;
    1b94:	23c0      	movs	r3, #192	; 0xc0
    1b96:	f88d 3007 	strb.w	r3, [sp, #7]
		NSS_ON
    1b9a:	2652      	movs	r6, #82	; 0x52
    1b9c:	4d14      	ldr	r5, [pc, #80]	; (1bf0 <main+0x9c>)
		SendSpi(&status, 1);
    1b9e:	2401      	movs	r4, #1
		NSS_ON
    1ba0:	2100      	movs	r1, #0
    1ba2:	4630      	mov	r0, r6
    1ba4:	47a8      	blx	r5
		SendSpi(&status, 1);
    1ba6:	4621      	mov	r1, r4
    1ba8:	f10d 0007 	add.w	r0, sp, #7
    1bac:	4b13      	ldr	r3, [pc, #76]	; (1bfc <main+0xa8>)
    1bae:	4798      	blx	r3
		ReadSpi(read_from_spi, 1);
    1bb0:	4621      	mov	r1, r4
    1bb2:	a802      	add	r0, sp, #8
    1bb4:	4b12      	ldr	r3, [pc, #72]	; (1c00 <main+0xac>)
    1bb6:	4798      	blx	r3
		NSS_OFF
    1bb8:	4621      	mov	r1, r4
    1bba:	4630      	mov	r0, r6
    1bbc:	47a8      	blx	r5
		io_write(usart, read_from_spi, 1);
    1bbe:	4622      	mov	r2, r4
    1bc0:	a902      	add	r1, sp, #8
    1bc2:	4b08      	ldr	r3, [pc, #32]	; (1be4 <main+0x90>)
    1bc4:	6818      	ldr	r0, [r3, #0]
    1bc6:	4b08      	ldr	r3, [pc, #32]	; (1be8 <main+0x94>)
    1bc8:	4798      	blx	r3
		delay_ms(100);
    1bca:	2064      	movs	r0, #100	; 0x64
    1bcc:	4b09      	ldr	r3, [pc, #36]	; (1bf4 <main+0xa0>)
    1bce:	4798      	blx	r3
    1bd0:	e7e6      	b.n	1ba0 <main+0x4c>
    1bd2:	bf00      	nop
    1bd4:	000002d1 	.word	0x000002d1
    1bd8:	00001ae9 	.word	0x00001ae9
    1bdc:	00001b21 	.word	0x00001b21
    1be0:	20000000 	.word	0x20000000
    1be4:	200000ec 	.word	0x200000ec
    1be8:	00000759 	.word	0x00000759
    1bec:	00001c79 	.word	0x00001c79
    1bf0:	00001c4d 	.word	0x00001c4d
    1bf4:	000006dd 	.word	0x000006dd
    1bf8:	00001c05 	.word	0x00001c05
    1bfc:	00001ca5 	.word	0x00001ca5
    1c00:	00001cbd 	.word	0x00001cbd

00001c04 <read_pin>:
// Sobstitute here the functions related to your specific microcontroller

extern struct spi_m_sync_descriptor SPI_0;
struct io_descriptor *spi;

uint8_t read_pin(const uint8_t pin){
    1c04:	b530      	push	{r4, r5, lr}
    1c06:	b083      	sub	sp, #12
    1c08:	4605      	mov	r5, r0
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    1c0a:	a801      	add	r0, sp, #4
    1c0c:	4b0c      	ldr	r3, [pc, #48]	; (1c40 <read_pin+0x3c>)
    1c0e:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1c10:	096b      	lsrs	r3, r5, #5
    1c12:	490c      	ldr	r1, [pc, #48]	; (1c44 <read_pin+0x40>)
    1c14:	01db      	lsls	r3, r3, #7
    1c16:	18ca      	adds	r2, r1, r3
    1c18:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1c1a:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1c1c:	6914      	ldr	r4, [r2, #16]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    1c1e:	405c      	eors	r4, r3
    1c20:	400c      	ands	r4, r1
    1c22:	405c      	eors	r4, r3

	CRITICAL_SECTION_LEAVE();
    1c24:	a801      	add	r0, sp, #4
    1c26:	4b08      	ldr	r3, [pc, #32]	; (1c48 <read_pin+0x44>)
    1c28:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    1c2a:	f005 051f 	and.w	r5, r5, #31
    1c2e:	2301      	movs	r3, #1
    1c30:	fa03 f505 	lsl.w	r5, r3, r5
    1c34:	4225      	tst	r5, r4
    return gpio_get_pin_level(pin);
}
    1c36:	bf14      	ite	ne
    1c38:	4618      	movne	r0, r3
    1c3a:	2000      	moveq	r0, #0
    1c3c:	b003      	add	sp, #12
    1c3e:	bd30      	pop	{r4, r5, pc}
    1c40:	000006ad 	.word	0x000006ad
    1c44:	41008000 	.word	0x41008000
    1c48:	000006bb 	.word	0x000006bb

00001c4c <write_pin>:
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    1c4c:	0943      	lsrs	r3, r0, #5
    1c4e:	f000 001f 	and.w	r0, r0, #31
    1c52:	2201      	movs	r2, #1
    1c54:	fa02 f000 	lsl.w	r0, r2, r0
	if (level) {
    1c58:	b931      	cbnz	r1, 1c68 <write_pin+0x1c>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1c5a:	01db      	lsls	r3, r3, #7
    1c5c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1c60:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    1c64:	6158      	str	r0, [r3, #20]
    1c66:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1c68:	01db      	lsls	r3, r3, #7
    1c6a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1c6e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    1c72:	6198      	str	r0, [r3, #24]
    1c74:	4770      	bx	lr
	...

00001c78 <SPI_init>:
void write_pin(const uint8_t pin, const uint8_t status){
    gpio_set_pin_level(pin, status);
}

int32_t SPI_init(void)
{
    1c78:	b510      	push	{r4, lr}
    int32_t error_spi = spi_m_sync_get_io_descriptor(&SPI_0, &spi);
    1c7a:	4906      	ldr	r1, [pc, #24]	; (1c94 <SPI_init+0x1c>)
    1c7c:	4806      	ldr	r0, [pc, #24]	; (1c98 <SPI_init+0x20>)
    1c7e:	4b07      	ldr	r3, [pc, #28]	; (1c9c <SPI_init+0x24>)
    1c80:	4798      	blx	r3
	if(error_spi != ERR_NONE){
    1c82:	4604      	mov	r4, r0
    1c84:	b108      	cbz	r0, 1c8a <SPI_init+0x12>
        return error_spi;
    }
	spi_m_sync_enable(&SPI_0);
    return ERR_NONE;
}
    1c86:	4620      	mov	r0, r4
    1c88:	bd10      	pop	{r4, pc}
	spi_m_sync_enable(&SPI_0);
    1c8a:	4803      	ldr	r0, [pc, #12]	; (1c98 <SPI_init+0x20>)
    1c8c:	4b04      	ldr	r3, [pc, #16]	; (1ca0 <SPI_init+0x28>)
    1c8e:	4798      	blx	r3
    return ERR_NONE;
    1c90:	e7f9      	b.n	1c86 <SPI_init+0xe>
    1c92:	bf00      	nop
    1c94:	20000104 	.word	0x20000104
    1c98:	20000054 	.word	0x20000054
    1c9c:	000008b9 	.word	0x000008b9
    1ca0:	000007d9 	.word	0x000007d9

00001ca4 <SendSpi>:

int32_t SendSpi(uint8_t *data, uint8_t len){
    1ca4:	b508      	push	{r3, lr}
    // Return number of bytes written
    return io_write(spi, data, len);
    1ca6:	460a      	mov	r2, r1
    1ca8:	4601      	mov	r1, r0
    1caa:	4b02      	ldr	r3, [pc, #8]	; (1cb4 <SendSpi+0x10>)
    1cac:	6818      	ldr	r0, [r3, #0]
    1cae:	4b02      	ldr	r3, [pc, #8]	; (1cb8 <SendSpi+0x14>)
    1cb0:	4798      	blx	r3
}
    1cb2:	bd08      	pop	{r3, pc}
    1cb4:	20000104 	.word	0x20000104
    1cb8:	00000759 	.word	0x00000759

00001cbc <ReadSpi>:

int32_t ReadSpi(uint8_t *rx_data, uint8_t len){	
    1cbc:	b5b0      	push	{r4, r5, r7, lr}
    1cbe:	b084      	sub	sp, #16
    1cc0:	af00      	add	r7, sp, #0
    struct spi_xfer temp;

    uint8_t noop[len];
    1cc2:	1dcb      	adds	r3, r1, #7
    1cc4:	f023 0307 	bic.w	r3, r3, #7
    1cc8:	ebad 0d03 	sub.w	sp, sp, r3
    1ccc:	466d      	mov	r5, sp
    for(int i=0; i<len; i++){
    1cce:	b131      	cbz	r1, 1cde <ReadSpi+0x22>
    1cd0:	466b      	mov	r3, sp
    1cd2:	186c      	adds	r4, r5, r1
        noop[i] = 0xC0; // Fill with noop, 0x00
    1cd4:	22c0      	movs	r2, #192	; 0xc0
    1cd6:	f803 2b01 	strb.w	r2, [r3], #1
    for(int i=0; i<len; i++){
    1cda:	42a3      	cmp	r3, r4
    1cdc:	d1fb      	bne.n	1cd6 <ReadSpi+0x1a>
    }

    temp.txbuf = noop;
    1cde:	607d      	str	r5, [r7, #4]
    temp.rxbuf = rx_data;
    1ce0:	60b8      	str	r0, [r7, #8]
    temp.size  = len;
    1ce2:	60f9      	str	r1, [r7, #12]
    // Return number of bytes written or ERR_BUSY
    return spi_m_sync_transfer(&SPI_0, &temp);
    1ce4:	1d39      	adds	r1, r7, #4
    1ce6:	4803      	ldr	r0, [pc, #12]	; (1cf4 <ReadSpi+0x38>)
    1ce8:	4b03      	ldr	r3, [pc, #12]	; (1cf8 <ReadSpi+0x3c>)
    1cea:	4798      	blx	r3
}
    1cec:	3710      	adds	r7, #16
    1cee:	46bd      	mov	sp, r7
    1cf0:	bdb0      	pop	{r4, r5, r7, pc}
    1cf2:	bf00      	nop
    1cf4:	20000054 	.word	0x20000054
    1cf8:	00000801 	.word	0x00000801

00001cfc <__libc_init_array>:
    1cfc:	b570      	push	{r4, r5, r6, lr}
    1cfe:	4e0d      	ldr	r6, [pc, #52]	; (1d34 <__libc_init_array+0x38>)
    1d00:	4c0d      	ldr	r4, [pc, #52]	; (1d38 <__libc_init_array+0x3c>)
    1d02:	1ba4      	subs	r4, r4, r6
    1d04:	10a4      	asrs	r4, r4, #2
    1d06:	2500      	movs	r5, #0
    1d08:	42a5      	cmp	r5, r4
    1d0a:	d109      	bne.n	1d20 <__libc_init_array+0x24>
    1d0c:	4e0b      	ldr	r6, [pc, #44]	; (1d3c <__libc_init_array+0x40>)
    1d0e:	4c0c      	ldr	r4, [pc, #48]	; (1d40 <__libc_init_array+0x44>)
    1d10:	f000 f8cc 	bl	1eac <_init>
    1d14:	1ba4      	subs	r4, r4, r6
    1d16:	10a4      	asrs	r4, r4, #2
    1d18:	2500      	movs	r5, #0
    1d1a:	42a5      	cmp	r5, r4
    1d1c:	d105      	bne.n	1d2a <__libc_init_array+0x2e>
    1d1e:	bd70      	pop	{r4, r5, r6, pc}
    1d20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    1d24:	4798      	blx	r3
    1d26:	3501      	adds	r5, #1
    1d28:	e7ee      	b.n	1d08 <__libc_init_array+0xc>
    1d2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    1d2e:	4798      	blx	r3
    1d30:	3501      	adds	r5, #1
    1d32:	e7f2      	b.n	1d1a <__libc_init_array+0x1e>
    1d34:	00001eb8 	.word	0x00001eb8
    1d38:	00001eb8 	.word	0x00001eb8
    1d3c:	00001eb8 	.word	0x00001eb8
    1d40:	00001ebc 	.word	0x00001ebc
    1d44:	682f2e2e 	.word	0x682f2e2e
    1d48:	732f6c61 	.word	0x732f6c61
    1d4c:	682f6372 	.word	0x682f6372
    1d50:	695f6c61 	.word	0x695f6c61
    1d54:	00632e6f 	.word	0x00632e6f
    1d58:	682f2e2e 	.word	0x682f2e2e
    1d5c:	732f6c61 	.word	0x732f6c61
    1d60:	682f6372 	.word	0x682f6372
    1d64:	735f6c61 	.word	0x735f6c61
    1d68:	6d5f6970 	.word	0x6d5f6970
    1d6c:	6e79735f 	.word	0x6e79735f
    1d70:	00632e63 	.word	0x00632e63
    1d74:	682f2e2e 	.word	0x682f2e2e
    1d78:	732f6c61 	.word	0x732f6c61
    1d7c:	682f6372 	.word	0x682f6372
    1d80:	745f6c61 	.word	0x745f6c61
    1d84:	72656d69 	.word	0x72656d69
    1d88:	0000632e 	.word	0x0000632e
    1d8c:	682f2e2e 	.word	0x682f2e2e
    1d90:	732f6c61 	.word	0x732f6c61
    1d94:	682f6372 	.word	0x682f6372
    1d98:	755f6c61 	.word	0x755f6c61
    1d9c:	74726173 	.word	0x74726173
    1da0:	7973615f 	.word	0x7973615f
    1da4:	632e636e 	.word	0x632e636e
    1da8:	00000000 	.word	0x00000000
    1dac:	682f2e2e 	.word	0x682f2e2e
    1db0:	752f6c61 	.word	0x752f6c61
    1db4:	736c6974 	.word	0x736c6974
    1db8:	6372732f 	.word	0x6372732f
    1dbc:	6974752f 	.word	0x6974752f
    1dc0:	6c5f736c 	.word	0x6c5f736c
    1dc4:	2e747369 	.word	0x2e747369
    1dc8:	00000063 	.word	0x00000063
    1dcc:	682f2e2e 	.word	0x682f2e2e
    1dd0:	752f6c61 	.word	0x752f6c61
    1dd4:	736c6974 	.word	0x736c6974
    1dd8:	6372732f 	.word	0x6372732f
    1ddc:	6974752f 	.word	0x6974752f
    1de0:	725f736c 	.word	0x725f736c
    1de4:	62676e69 	.word	0x62676e69
    1de8:	65666675 	.word	0x65666675
    1dec:	00632e72 	.word	0x00632e72

00001df0 <_map>:
    1df0:	00000000 00000040 682f2e2e 652f6c70     ....@...../hpl/e
    1e00:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....
    1e10:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    1e20:	43000000 43000400 43000800 43000c00     ...C...C...C...C

00001e30 <_i2cms>:
	...
    1e48:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    1e58:	65735f6c 6d6f6372 0000632e 40003800     l_sercom.c...8.@
    1e68:	40003c00 4101a000 4101c000 42001400     .<.@...A...A...B
    1e78:	42001800 43001400 43001800              ...B...C...C

00001e84 <_tcs>:
    1e84:	00720007 00000308 00000000 00001770     ..r.........p...
    1e94:	00000000 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
    1ea4:	63745f6c 0000632e                       l_tc.c..

00001eac <_init>:
    1eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1eae:	bf00      	nop
    1eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1eb2:	bc08      	pop	{r3}
    1eb4:	469e      	mov	lr, r3
    1eb6:	4770      	bx	lr

00001eb8 <__init_array_start>:
    1eb8:	00000289 	.word	0x00000289

00001ebc <_fini>:
    1ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ebe:	bf00      	nop
    1ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1ec2:	bc08      	pop	{r3}
    1ec4:	469e      	mov	lr, r3
    1ec6:	4770      	bx	lr

00001ec8 <__fini_array_start>:
    1ec8:	00000265 	.word	0x00000265
