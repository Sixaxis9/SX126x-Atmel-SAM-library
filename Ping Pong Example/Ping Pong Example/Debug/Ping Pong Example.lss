
Ping Pong Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c20  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000010  20000000  00002c20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020010  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020010  2**0
                  CONTENTS
  4 .bss          000000b0  20000010  00002c30  00020010  2**2
                  ALLOC
  5 .stack        00010000  200000c0  00002ce0  00020010  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
  8 .debug_info   00025e75  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003f1a  00000000  00000000  00045f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000e438  00000000  00000000  00049e26  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d70  00000000  00000000  0005825e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001130  00000000  00000000  00058fce  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002fd70  00000000  00000000  0005a0fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000179c3  00000000  00000000  00089e6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000fea01  00000000  00000000  000a1831  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002498  00000000  00000000  001a0234  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c0 00 01 20 e1 02 00 00 dd 02 00 00 dd 02 00 00     ... ............
      10:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      2c:	dd 02 00 00 dd 02 00 00 00 00 00 00 dd 02 00 00     ................
      3c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      4c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      5c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      6c:	dd 02 00 00 51 0e 00 00 dd 02 00 00 dd 02 00 00     ....Q...........
      7c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      8c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      9c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      ac:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      bc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      cc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      dc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      f4:	85 10 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     104:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     114:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     124:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     134:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     144:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     154:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     164:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     174:	dd 02 00 00 00 00 00 00 00 00 00 00 dd 02 00 00     ................
     184:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
     194:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1a4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1b4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1c4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1d4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1e4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1f4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     204:	dd 02 00 00 21 17 00 00 dd 02 00 00 dd 02 00 00     ....!...........
     214:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     224:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     234:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     244:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     254:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000010 	.word	0x20000010
     280:	00000000 	.word	0x00000000
     284:	00002c20 	.word	0x00002c20

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00002c20 	.word	0x00002c20
     2c4:	20000014 	.word	0x20000014
     2c8:	00002c20 	.word	0x00002c20
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b01      	ldr	r3, [pc, #4]	; (2d8 <atmel_start_init+0x8>)
     2d4:	4798      	blx	r3
     2d6:	bd08      	pop	{r3, pc}
     2d8:	00000589 	.word	0x00000589

000002dc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2dc:	e7fe      	b.n	2dc <Dummy_Handler>
	...

000002e0 <Reset_Handler>:
{
     2e0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2e2:	4b1c      	ldr	r3, [pc, #112]	; (354 <Reset_Handler+0x74>)
     2e4:	4a1c      	ldr	r2, [pc, #112]	; (358 <Reset_Handler+0x78>)
     2e6:	429a      	cmp	r2, r3
     2e8:	d010      	beq.n	30c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x7c>)
     2ec:	4a19      	ldr	r2, [pc, #100]	; (354 <Reset_Handler+0x74>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d20c      	bcs.n	30c <Reset_Handler+0x2c>
     2f2:	3b01      	subs	r3, #1
     2f4:	1a9b      	subs	r3, r3, r2
     2f6:	f023 0303 	bic.w	r3, r3, #3
     2fa:	3304      	adds	r3, #4
     2fc:	4413      	add	r3, r2
     2fe:	4916      	ldr	r1, [pc, #88]	; (358 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     300:	f851 0b04 	ldr.w	r0, [r1], #4
     304:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     308:	429a      	cmp	r2, r3
     30a:	d1f9      	bne.n	300 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     30c:	4b14      	ldr	r3, [pc, #80]	; (360 <Reset_Handler+0x80>)
     30e:	4a15      	ldr	r2, [pc, #84]	; (364 <Reset_Handler+0x84>)
     310:	429a      	cmp	r2, r3
     312:	d20a      	bcs.n	32a <Reset_Handler+0x4a>
     314:	3b01      	subs	r3, #1
     316:	1a9b      	subs	r3, r3, r2
     318:	f023 0303 	bic.w	r3, r3, #3
     31c:	3304      	adds	r3, #4
     31e:	4413      	add	r3, r2
                *pDest++ = 0;
     320:	2100      	movs	r1, #0
     322:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     326:	4293      	cmp	r3, r2
     328:	d1fb      	bne.n	322 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     32a:	4b0f      	ldr	r3, [pc, #60]	; (368 <Reset_Handler+0x88>)
     32c:	4a0f      	ldr	r2, [pc, #60]	; (36c <Reset_Handler+0x8c>)
     32e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     332:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     334:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     338:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     33c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     340:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     344:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     348:	4b09      	ldr	r3, [pc, #36]	; (370 <Reset_Handler+0x90>)
     34a:	4798      	blx	r3
        main();
     34c:	4b09      	ldr	r3, [pc, #36]	; (374 <Reset_Handler+0x94>)
     34e:	4798      	blx	r3
     350:	e7fe      	b.n	350 <Reset_Handler+0x70>
     352:	bf00      	nop
     354:	20000000 	.word	0x20000000
     358:	00002c20 	.word	0x00002c20
     35c:	20000010 	.word	0x20000010
     360:	200000c0 	.word	0x200000c0
     364:	20000010 	.word	0x20000010
     368:	e000ed00 	.word	0xe000ed00
     36c:	00000000 	.word	0x00000000
     370:	00002a6d 	.word	0x00002a6d
     374:	0000179d 	.word	0x0000179d

00000378 <EXTERNAL_IRQ_0_init>:
struct timer_descriptor      TIMER_0;

struct usart_sync_descriptor USART_0;

void EXTERNAL_IRQ_0_init(void)
{
     378:	b508      	push	{r3, lr}
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     37a:	2240      	movs	r2, #64	; 0x40
     37c:	4b15      	ldr	r3, [pc, #84]	; (3d4 <EXTERNAL_IRQ_0_init+0x5c>)
     37e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     382:	4a15      	ldr	r2, [pc, #84]	; (3d8 <EXTERNAL_IRQ_0_init+0x60>)
     384:	6953      	ldr	r3, [r2, #20]
     386:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     38a:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     38c:	4b13      	ldr	r3, [pc, #76]	; (3dc <EXTERNAL_IRQ_0_init+0x64>)
     38e:	2201      	movs	r2, #1
     390:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     394:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     398:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     39c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     3a0:	4a0f      	ldr	r2, [pc, #60]	; (3e0 <EXTERNAL_IRQ_0_init+0x68>)
     3a2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     3a6:	f893 2140 	ldrb.w	r2, [r3, #320]	; 0x140
     3aa:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     3ae:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3b2:	f893 2140 	ldrb.w	r2, [r3, #320]	; 0x140
	tmp &= ~PORT_PINCFG_PMUXEN;
     3b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3ba:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3be:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3c2:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3c6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3ca:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(DIO1, PINMUX_PC00A_EIC_EXTINT0);

	ext_irq_init();
     3ce:	4b05      	ldr	r3, [pc, #20]	; (3e4 <EXTERNAL_IRQ_0_init+0x6c>)
     3d0:	4798      	blx	r3
     3d2:	bd08      	pop	{r3, pc}
     3d4:	40001c00 	.word	0x40001c00
     3d8:	40000800 	.word	0x40000800
     3dc:	41008000 	.word	0x41008000
     3e0:	c0020000 	.word	0xc0020000
     3e4:	00000749 	.word	0x00000749

000003e8 <SPI_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3e8:	4b28      	ldr	r3, [pc, #160]	; (48c <SPI_0_PORT_init+0xa4>)
     3ea:	2210      	movs	r2, #16
     3ec:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3ee:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3f0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3f4:	629a      	str	r2, [r3, #40]	; 0x28
     3f6:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     3fa:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3fc:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     400:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     404:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     40c:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     410:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     414:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     418:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     41c:	2220      	movs	r2, #32
     41e:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     420:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     422:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     426:	629a      	str	r2, [r3, #40]	; 0x28
     428:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     42a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     42e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     432:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     436:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     43a:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     43e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     442:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     446:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     44a:	2240      	movs	r2, #64	; 0x40
     44c:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     44e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     452:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     456:	629a      	str	r2, [r3, #40]	; 0x28
     458:	4a0d      	ldr	r2, [pc, #52]	; (490 <SPI_0_PORT_init+0xa8>)
     45a:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     45c:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
     460:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     464:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     468:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     46c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     470:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     474:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     478:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     47c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     480:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     484:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
     488:	4770      	bx	lr
     48a:	bf00      	nop
     48c:	41008000 	.word	0x41008000
     490:	c0020000 	.word	0xc0020000

00000494 <SPI_0_CLOCK_init>:
     494:	4b06      	ldr	r3, [pc, #24]	; (4b0 <SPI_0_CLOCK_init+0x1c>)
     496:	2240      	movs	r2, #64	; 0x40
     498:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     49c:	2243      	movs	r2, #67	; 0x43
     49e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBAMASK_SERCOM0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     4a2:	4a04      	ldr	r2, [pc, #16]	; (4b4 <SPI_0_CLOCK_init+0x20>)
     4a4:	6953      	ldr	r3, [r2, #20]
     4a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     4aa:	6153      	str	r3, [r2, #20]
     4ac:	4770      	bx	lr
     4ae:	bf00      	nop
     4b0:	40001c00 	.word	0x40001c00
     4b4:	40000800 	.word	0x40000800

000004b8 <SPI_0_init>:

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
}

void SPI_0_init(void)
{
     4b8:	b508      	push	{r3, lr}
	SPI_0_CLOCK_init();
     4ba:	4b04      	ldr	r3, [pc, #16]	; (4cc <SPI_0_init+0x14>)
     4bc:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM0);
     4be:	4904      	ldr	r1, [pc, #16]	; (4d0 <SPI_0_init+0x18>)
     4c0:	4804      	ldr	r0, [pc, #16]	; (4d4 <SPI_0_init+0x1c>)
     4c2:	4b05      	ldr	r3, [pc, #20]	; (4d8 <SPI_0_init+0x20>)
     4c4:	4798      	blx	r3
	SPI_0_PORT_init();
     4c6:	4b05      	ldr	r3, [pc, #20]	; (4dc <SPI_0_init+0x24>)
     4c8:	4798      	blx	r3
     4ca:	bd08      	pop	{r3, pc}
     4cc:	00000495 	.word	0x00000495
     4d0:	40003000 	.word	0x40003000
     4d4:	20000048 	.word	0x20000048
     4d8:	000007dd 	.word	0x000007dd
     4dc:	000003e9 	.word	0x000003e9

000004e0 <USART_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4e0:	4b10      	ldr	r3, [pc, #64]	; (524 <USART_0_PORT_init+0x44>)
     4e2:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     4e6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4ea:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4ee:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4f2:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4f6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     4fa:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4fe:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     502:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     506:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     50a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     50e:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     512:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     516:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     51a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     51e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
     522:	4770      	bx	lr
     524:	41008000 	.word	0x41008000

00000528 <USART_0_CLOCK_init>:
     528:	4b06      	ldr	r3, [pc, #24]	; (544 <USART_0_CLOCK_init+0x1c>)
     52a:	2240      	movs	r2, #64	; 0x40
     52c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     530:	2243      	movs	r2, #67	; 0x43
     532:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     536:	4a04      	ldr	r2, [pc, #16]	; (548 <USART_0_CLOCK_init+0x20>)
     538:	6a13      	ldr	r3, [r2, #32]
     53a:	f043 0301 	orr.w	r3, r3, #1
     53e:	6213      	str	r3, [r2, #32]
     540:	4770      	bx	lr
     542:	bf00      	nop
     544:	40001c00 	.word	0x40001c00
     548:	40000800 	.word	0x40000800

0000054c <USART_0_init>:

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
}

void USART_0_init(void)
{
     54c:	b508      	push	{r3, lr}
	USART_0_CLOCK_init();
     54e:	4b05      	ldr	r3, [pc, #20]	; (564 <USART_0_init+0x18>)
     550:	4798      	blx	r3
	usart_sync_init(&USART_0, SERCOM4, (void *)NULL);
     552:	2200      	movs	r2, #0
     554:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     558:	4803      	ldr	r0, [pc, #12]	; (568 <USART_0_init+0x1c>)
     55a:	4b04      	ldr	r3, [pc, #16]	; (56c <USART_0_init+0x20>)
     55c:	4798      	blx	r3
	USART_0_PORT_init();
     55e:	4b04      	ldr	r3, [pc, #16]	; (570 <USART_0_init+0x24>)
     560:	4798      	blx	r3
     562:	bd08      	pop	{r3, pc}
     564:	00000529 	.word	0x00000529
     568:	20000060 	.word	0x20000060
     56c:	00000c05 	.word	0x00000c05
     570:	000004e1 	.word	0x000004e1

00000574 <delay_driver_init>:
}

void delay_driver_init(void)
{
     574:	b508      	push	{r3, lr}
	delay_init(SysTick);
     576:	4802      	ldr	r0, [pc, #8]	; (580 <delay_driver_init+0xc>)
     578:	4b02      	ldr	r3, [pc, #8]	; (584 <delay_driver_init+0x10>)
     57a:	4798      	blx	r3
     57c:	bd08      	pop	{r3, pc}
     57e:	bf00      	nop
     580:	e000e010 	.word	0xe000e010
     584:	000006dd 	.word	0x000006dd

00000588 <system_init>:

	timer_init(&TIMER_0, TC7, _tc_get_timer());
}

void system_init(void)
{
     588:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     58a:	4b3e      	ldr	r3, [pc, #248]	; (684 <system_init+0xfc>)
     58c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     58e:	4b3e      	ldr	r3, [pc, #248]	; (688 <system_init+0x100>)
     590:	2202      	movs	r2, #2
     592:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     596:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     59a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     59e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     5a2:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     5a6:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5aa:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
	tmp &= ~PORT_PINCFG_PMUXEN;
     5ae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5b2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     5b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
     5ba:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5be:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5c2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     5c6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     5ca:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ce:	f893 214a 	ldrb.w	r2, [r3, #330]	; 0x14a
	tmp &= ~PORT_PINCFG_PMUXEN;
     5d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5d6:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     5da:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     5de:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5e2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5e6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     5ea:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
     5ee:	4a27      	ldr	r2, [pc, #156]	; (68c <system_init+0x104>)
     5f0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5f4:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     5f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5fc:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     600:	f44f 2200 	mov.w	r2, #524288	; 0x80000
     604:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     608:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     60c:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
     610:	4a1f      	ldr	r2, [pc, #124]	; (690 <system_init+0x108>)
     612:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     616:	f893 2153 	ldrb.w	r2, [r3, #339]	; 0x153
	tmp &= ~PORT_PINCFG_PMUXEN;
     61a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     61e:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     622:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
     626:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     62a:	4a1a      	ldr	r2, [pc, #104]	; (694 <system_init+0x10c>)
     62c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     630:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
     634:	3210      	adds	r2, #16
     636:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     63a:	f893 2154 	ldrb.w	r2, [r3, #340]	; 0x154
     63e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     642:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     646:	f893 2154 	ldrb.w	r2, [r3, #340]	; 0x154
	tmp &= ~PORT_PINCFG_PMUXEN;
     64a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     64e:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(BUSY, GPIO_PIN_FUNCTION_OFF);

	EXTERNAL_IRQ_0_init();
     652:	4b11      	ldr	r3, [pc, #68]	; (698 <system_init+0x110>)
     654:	4798      	blx	r3

	SPI_0_init();
     656:	4b11      	ldr	r3, [pc, #68]	; (69c <system_init+0x114>)
     658:	4798      	blx	r3

	USART_0_init();
     65a:	4b11      	ldr	r3, [pc, #68]	; (6a0 <system_init+0x118>)
     65c:	4798      	blx	r3

	delay_driver_init();
     65e:	4b11      	ldr	r3, [pc, #68]	; (6a4 <system_init+0x11c>)
     660:	4798      	blx	r3
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
     662:	4a11      	ldr	r2, [pc, #68]	; (6a8 <system_init+0x120>)
     664:	6a13      	ldr	r3, [r2, #32]
     666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     66a:	6213      	str	r3, [r2, #32]
     66c:	2240      	movs	r2, #64	; 0x40
     66e:	4b0f      	ldr	r3, [pc, #60]	; (6ac <system_init+0x124>)
     670:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	timer_init(&TIMER_0, TC7, _tc_get_timer());
     674:	4b0e      	ldr	r3, [pc, #56]	; (6b0 <system_init+0x128>)
     676:	4798      	blx	r3
     678:	4602      	mov	r2, r0
     67a:	490e      	ldr	r1, [pc, #56]	; (6b4 <system_init+0x12c>)
     67c:	480e      	ldr	r0, [pc, #56]	; (6b8 <system_init+0x130>)
     67e:	4b0f      	ldr	r3, [pc, #60]	; (6bc <system_init+0x134>)
     680:	4798      	blx	r3
     682:	bd08      	pop	{r3, pc}
     684:	00000d31 	.word	0x00000d31
     688:	41008000 	.word	0x41008000
     68c:	c0000004 	.word	0xc0000004
     690:	c0000008 	.word	0xc0000008
     694:	40020000 	.word	0x40020000
     698:	00000379 	.word	0x00000379
     69c:	000004b9 	.word	0x000004b9
     6a0:	0000054d 	.word	0x0000054d
     6a4:	00000575 	.word	0x00000575
     6a8:	40000800 	.word	0x40000800
     6ac:	40001c00 	.word	0x40001c00
     6b0:	000016db 	.word	0x000016db
     6b4:	43001800 	.word	0x43001800
     6b8:	2000006c 	.word	0x2000006c
     6bc:	00000a11 	.word	0x00000a11

000006c0 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     6c0:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     6c4:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     6c6:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     6c8:	f3bf 8f5f 	dmb	sy
     6cc:	4770      	bx	lr

000006ce <atomic_leave_critical>:
     6ce:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     6d2:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     6d4:	f383 8810 	msr	PRIMASK, r3
     6d8:	4770      	bx	lr
	...

000006dc <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     6dc:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
     6de:	4b02      	ldr	r3, [pc, #8]	; (6e8 <delay_init+0xc>)
     6e0:	6018      	str	r0, [r3, #0]
     6e2:	4b02      	ldr	r3, [pc, #8]	; (6ec <delay_init+0x10>)
     6e4:	4798      	blx	r3
     6e6:	bd08      	pop	{r3, pc}
     6e8:	2000002c 	.word	0x2000002c
     6ec:	00001441 	.word	0x00001441

000006f0 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     6f0:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     6f2:	4b04      	ldr	r3, [pc, #16]	; (704 <delay_ms+0x14>)
     6f4:	681c      	ldr	r4, [r3, #0]
     6f6:	4b04      	ldr	r3, [pc, #16]	; (708 <delay_ms+0x18>)
     6f8:	4798      	blx	r3
     6fa:	4601      	mov	r1, r0
     6fc:	4620      	mov	r0, r4
     6fe:	4b03      	ldr	r3, [pc, #12]	; (70c <delay_ms+0x1c>)
     700:	4798      	blx	r3
     702:	bd10      	pop	{r4, pc}
     704:	2000002c 	.word	0x2000002c
     708:	00000d25 	.word	0x00000d25
     70c:	00001455 	.word	0x00001455

00000710 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     710:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
     712:	4b0c      	ldr	r3, [pc, #48]	; (744 <process_ext_irq+0x34>)
     714:	685c      	ldr	r4, [r3, #4]
     716:	42a0      	cmp	r0, r4
     718:	d00e      	beq.n	738 <process_ext_irq+0x28>
     71a:	2301      	movs	r3, #1
     71c:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
     71e:	461e      	mov	r6, r3
		} else {
			upper = middle - 1;
     720:	25ff      	movs	r5, #255	; 0xff
     722:	e003      	b.n	72c <process_ext_irq+0x1c>
     724:	462b      	mov	r3, r5
		if (middle >= EXT_IRQ_AMOUNT) {
     726:	185a      	adds	r2, r3, r1
     728:	0852      	lsrs	r2, r2, #1
     72a:	d104      	bne.n	736 <process_ext_irq+0x26>
		if (ext_irqs[middle].pin < pin) {
     72c:	42a0      	cmp	r0, r4
     72e:	d9f9      	bls.n	724 <process_ext_irq+0x14>
	while (upper >= lower) {
     730:	b13b      	cbz	r3, 742 <process_ext_irq+0x32>
			lower = middle + 1;
     732:	4631      	mov	r1, r6
     734:	e7f7      	b.n	726 <process_ext_irq+0x16>
     736:	bd70      	pop	{r4, r5, r6, pc}
			if (ext_irqs[middle].cb) {
     738:	4b02      	ldr	r3, [pc, #8]	; (744 <process_ext_irq+0x34>)
     73a:	681b      	ldr	r3, [r3, #0]
     73c:	b10b      	cbz	r3, 742 <process_ext_irq+0x32>
				ext_irqs[middle].cb();
     73e:	4798      	blx	r3
     740:	bd70      	pop	{r4, r5, r6, pc}
     742:	bd70      	pop	{r4, r5, r6, pc}
     744:	20000030 	.word	0x20000030

00000748 <ext_irq_init>:
{
     748:	b508      	push	{r3, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
     74a:	4b05      	ldr	r3, [pc, #20]	; (760 <ext_irq_init+0x18>)
     74c:	f04f 32ff 	mov.w	r2, #4294967295
     750:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
     752:	2200      	movs	r2, #0
     754:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
     756:	4803      	ldr	r0, [pc, #12]	; (764 <ext_irq_init+0x1c>)
     758:	4b03      	ldr	r3, [pc, #12]	; (768 <ext_irq_init+0x20>)
     75a:	4798      	blx	r3
}
     75c:	bd08      	pop	{r3, pc}
     75e:	bf00      	nop
     760:	20000030 	.word	0x20000030
     764:	00000711 	.word	0x00000711
     768:	00000d71 	.word	0x00000d71

0000076c <ext_irq_register>:
{
     76c:	b508      	push	{r3, lr}
		if (ext_irqs[i].pin == pin) {
     76e:	4b0d      	ldr	r3, [pc, #52]	; (7a4 <ext_irq_register+0x38>)
     770:	685b      	ldr	r3, [r3, #4]
     772:	4298      	cmp	r0, r3
     774:	d006      	beq.n	784 <ext_irq_register+0x18>
	if (NULL == cb) {
     776:	b191      	cbz	r1, 79e <ext_irq_register+0x32>
			if (NULL == ext_irqs[i].cb) {
     778:	4b0a      	ldr	r3, [pc, #40]	; (7a4 <ext_irq_register+0x38>)
     77a:	681b      	ldr	r3, [r3, #0]
     77c:	b143      	cbz	r3, 790 <ext_irq_register+0x24>
		return ERR_INVALID_ARG;
     77e:	f06f 000c 	mvn.w	r0, #12
}
     782:	bd08      	pop	{r3, pc}
			ext_irqs[i].cb = cb;
     784:	4b07      	ldr	r3, [pc, #28]	; (7a4 <ext_irq_register+0x38>)
     786:	6019      	str	r1, [r3, #0]
	if (NULL == cb) {
     788:	b929      	cbnz	r1, 796 <ext_irq_register+0x2a>
		return _ext_irq_enable(pin, false);
     78a:	4b07      	ldr	r3, [pc, #28]	; (7a8 <ext_irq_register+0x3c>)
     78c:	4798      	blx	r3
     78e:	bd08      	pop	{r3, pc}
				ext_irqs[i].cb  = cb;
     790:	4b04      	ldr	r3, [pc, #16]	; (7a4 <ext_irq_register+0x38>)
     792:	6019      	str	r1, [r3, #0]
				ext_irqs[i].pin = pin;
     794:	6058      	str	r0, [r3, #4]
	return _ext_irq_enable(pin, true);
     796:	2101      	movs	r1, #1
     798:	4b03      	ldr	r3, [pc, #12]	; (7a8 <ext_irq_register+0x3c>)
     79a:	4798      	blx	r3
     79c:	bd08      	pop	{r3, pc}
			return ERR_INVALID_ARG;
     79e:	f06f 000c 	mvn.w	r0, #12
     7a2:	bd08      	pop	{r3, pc}
     7a4:	20000030 	.word	0x20000030
     7a8:	00000e29 	.word	0x00000e29

000007ac <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     7ac:	b570      	push	{r4, r5, r6, lr}
     7ae:	460d      	mov	r5, r1
     7b0:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     7b2:	4604      	mov	r4, r0
     7b4:	b160      	cbz	r0, 7d0 <io_write+0x24>
     7b6:	1c08      	adds	r0, r1, #0
     7b8:	bf18      	it	ne
     7ba:	2001      	movne	r0, #1
     7bc:	2234      	movs	r2, #52	; 0x34
     7be:	4905      	ldr	r1, [pc, #20]	; (7d4 <io_write+0x28>)
     7c0:	4b05      	ldr	r3, [pc, #20]	; (7d8 <io_write+0x2c>)
     7c2:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     7c4:	6823      	ldr	r3, [r4, #0]
     7c6:	4632      	mov	r2, r6
     7c8:	4629      	mov	r1, r5
     7ca:	4620      	mov	r0, r4
     7cc:	4798      	blx	r3
}
     7ce:	bd70      	pop	{r4, r5, r6, pc}
     7d0:	2000      	movs	r0, #0
     7d2:	e7f3      	b.n	7bc <io_write+0x10>
     7d4:	00002ab4 	.word	0x00002ab4
     7d8:	00000ca1 	.word	0x00000ca1

000007dc <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     7dc:	b538      	push	{r3, r4, r5, lr}
     7de:	460d      	mov	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
     7e0:	4604      	mov	r4, r0
     7e2:	b1b8      	cbz	r0, 814 <spi_m_sync_init+0x38>
     7e4:	1c08      	adds	r0, r1, #0
     7e6:	bf18      	it	ne
     7e8:	2001      	movne	r0, #1
     7ea:	2240      	movs	r2, #64	; 0x40
     7ec:	490a      	ldr	r1, [pc, #40]	; (818 <spi_m_sync_init+0x3c>)
     7ee:	4b0b      	ldr	r3, [pc, #44]	; (81c <spi_m_sync_init+0x40>)
     7f0:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     7f2:	4620      	mov	r0, r4
     7f4:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
     7f8:	4629      	mov	r1, r5
     7fa:	4b09      	ldr	r3, [pc, #36]	; (820 <spi_m_sync_init+0x44>)
     7fc:	4798      	blx	r3

	if (rc < 0) {
     7fe:	2800      	cmp	r0, #0
     800:	db07      	blt.n	812 <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     806:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
     808:	4b06      	ldr	r3, [pc, #24]	; (824 <spi_m_sync_init+0x48>)
     80a:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
     80c:	4b06      	ldr	r3, [pc, #24]	; (828 <spi_m_sync_init+0x4c>)
     80e:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
     810:	2000      	movs	r0, #0
}
     812:	bd38      	pop	{r3, r4, r5, pc}
     814:	2000      	movs	r0, #0
     816:	e7e8      	b.n	7ea <spi_m_sync_init+0xe>
     818:	00002ac8 	.word	0x00002ac8
     81c:	00000ca1 	.word	0x00000ca1
     820:	0000123d 	.word	0x0000123d
     824:	000008d1 	.word	0x000008d1
     828:	00000895 	.word	0x00000895

0000082c <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
     82c:	b510      	push	{r4, lr}
	ASSERT(spi);
     82e:	4604      	mov	r4, r0
     830:	2257      	movs	r2, #87	; 0x57
     832:	4905      	ldr	r1, [pc, #20]	; (848 <spi_m_sync_enable+0x1c>)
     834:	3000      	adds	r0, #0
     836:	bf18      	it	ne
     838:	2001      	movne	r0, #1
     83a:	4b04      	ldr	r3, [pc, #16]	; (84c <spi_m_sync_enable+0x20>)
     83c:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
     83e:	1d20      	adds	r0, r4, #4
     840:	4b03      	ldr	r3, [pc, #12]	; (850 <spi_m_sync_enable+0x24>)
     842:	4798      	blx	r3
     844:	bd10      	pop	{r4, pc}
     846:	bf00      	nop
     848:	00002ac8 	.word	0x00002ac8
     84c:	00000ca1 	.word	0x00000ca1
     850:	00001331 	.word	0x00001331

00000854 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     854:	b530      	push	{r4, r5, lr}
     856:	b085      	sub	sp, #20
     858:	460c      	mov	r4, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     85a:	4605      	mov	r5, r0
     85c:	b190      	cbz	r0, 884 <spi_m_sync_transfer+0x30>
     85e:	1c08      	adds	r0, r1, #0
     860:	bf18      	it	ne
     862:	2001      	movne	r0, #1
     864:	22b3      	movs	r2, #179	; 0xb3
     866:	4908      	ldr	r1, [pc, #32]	; (888 <spi_m_sync_transfer+0x34>)
     868:	4b08      	ldr	r3, [pc, #32]	; (88c <spi_m_sync_transfer+0x38>)
     86a:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
     86c:	6823      	ldr	r3, [r4, #0]
     86e:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
     870:	6863      	ldr	r3, [r4, #4]
     872:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
     874:	68a3      	ldr	r3, [r4, #8]
     876:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
     878:	a901      	add	r1, sp, #4
     87a:	1d28      	adds	r0, r5, #4
     87c:	4b04      	ldr	r3, [pc, #16]	; (890 <spi_m_sync_transfer+0x3c>)
     87e:	4798      	blx	r3
}
     880:	b005      	add	sp, #20
     882:	bd30      	pop	{r4, r5, pc}
     884:	2000      	movs	r0, #0
     886:	e7ed      	b.n	864 <spi_m_sync_transfer+0x10>
     888:	00002ac8 	.word	0x00002ac8
     88c:	00000ca1 	.word	0x00000ca1
     890:	00001361 	.word	0x00001361

00000894 <_spi_m_sync_io_write>:
{
     894:	b570      	push	{r4, r5, r6, lr}
     896:	b084      	sub	sp, #16
     898:	460e      	mov	r6, r1
     89a:	4615      	mov	r5, r2
	ASSERT(io);
     89c:	4604      	mov	r4, r0
     89e:	22a3      	movs	r2, #163	; 0xa3
     8a0:	4908      	ldr	r1, [pc, #32]	; (8c4 <_spi_m_sync_io_write+0x30>)
     8a2:	3000      	adds	r0, #0
     8a4:	bf18      	it	ne
     8a6:	2001      	movne	r0, #1
     8a8:	4b07      	ldr	r3, [pc, #28]	; (8c8 <_spi_m_sync_io_write+0x34>)
     8aa:	4798      	blx	r3
	xfer.rxbuf = 0;
     8ac:	2300      	movs	r3, #0
     8ae:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
     8b0:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
     8b2:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     8b4:	a901      	add	r1, sp, #4
     8b6:	f1a4 000c 	sub.w	r0, r4, #12
     8ba:	4b04      	ldr	r3, [pc, #16]	; (8cc <_spi_m_sync_io_write+0x38>)
     8bc:	4798      	blx	r3
}
     8be:	b004      	add	sp, #16
     8c0:	bd70      	pop	{r4, r5, r6, pc}
     8c2:	bf00      	nop
     8c4:	00002ac8 	.word	0x00002ac8
     8c8:	00000ca1 	.word	0x00000ca1
     8cc:	00000855 	.word	0x00000855

000008d0 <_spi_m_sync_io_read>:
{
     8d0:	b570      	push	{r4, r5, r6, lr}
     8d2:	b084      	sub	sp, #16
     8d4:	460e      	mov	r6, r1
     8d6:	4615      	mov	r5, r2
	ASSERT(io);
     8d8:	4604      	mov	r4, r0
     8da:	2287      	movs	r2, #135	; 0x87
     8dc:	4908      	ldr	r1, [pc, #32]	; (900 <_spi_m_sync_io_read+0x30>)
     8de:	3000      	adds	r0, #0
     8e0:	bf18      	it	ne
     8e2:	2001      	movne	r0, #1
     8e4:	4b07      	ldr	r3, [pc, #28]	; (904 <_spi_m_sync_io_read+0x34>)
     8e6:	4798      	blx	r3
	xfer.rxbuf = buf;
     8e8:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
     8ea:	2300      	movs	r3, #0
     8ec:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
     8ee:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     8f0:	a901      	add	r1, sp, #4
     8f2:	f1a4 000c 	sub.w	r0, r4, #12
     8f6:	4b04      	ldr	r3, [pc, #16]	; (908 <_spi_m_sync_io_read+0x38>)
     8f8:	4798      	blx	r3
}
     8fa:	b004      	add	sp, #16
     8fc:	bd70      	pop	{r4, r5, r6, pc}
     8fe:	bf00      	nop
     900:	00002ac8 	.word	0x00002ac8
     904:	00000ca1 	.word	0x00000ca1
     908:	00000855 	.word	0x00000855

0000090c <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
     90c:	b538      	push	{r3, r4, r5, lr}
     90e:	460d      	mov	r5, r1
	ASSERT(spi && io);
     910:	4604      	mov	r4, r0
     912:	b150      	cbz	r0, 92a <spi_m_sync_get_io_descriptor+0x1e>
     914:	1c08      	adds	r0, r1, #0
     916:	bf18      	it	ne
     918:	2001      	movne	r0, #1
     91a:	22bd      	movs	r2, #189	; 0xbd
     91c:	4904      	ldr	r1, [pc, #16]	; (930 <spi_m_sync_get_io_descriptor+0x24>)
     91e:	4b05      	ldr	r3, [pc, #20]	; (934 <spi_m_sync_get_io_descriptor+0x28>)
     920:	4798      	blx	r3
	*io = &spi->io;
     922:	340c      	adds	r4, #12
     924:	602c      	str	r4, [r5, #0]
	return 0;
}
     926:	2000      	movs	r0, #0
     928:	bd38      	pop	{r3, r4, r5, pc}
     92a:	2000      	movs	r0, #0
     92c:	e7f5      	b.n	91a <spi_m_sync_get_io_descriptor+0xe>
     92e:	bf00      	nop
     930:	00002ac8 	.word	0x00002ac8
     934:	00000ca1 	.word	0x00000ca1

00000938 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     93a:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     93c:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     93e:	b12f      	cbz	r7, 94c <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
     940:	688d      	ldr	r5, [r1, #8]
     942:	463c      	mov	r4, r7
     944:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     946:	f1c2 0e01 	rsb	lr, r2, #1
     94a:	e00b      	b.n	964 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
     94c:	4b0e      	ldr	r3, [pc, #56]	; (988 <timer_add_timer_task+0x50>)
     94e:	4798      	blx	r3
		return;
     950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     952:	4473      	add	r3, lr
     954:	68a0      	ldr	r0, [r4, #8]
     956:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
     958:	42ab      	cmp	r3, r5
     95a:	d20a      	bcs.n	972 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
     95c:	6823      	ldr	r3, [r4, #0]
     95e:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     960:	b153      	cbz	r3, 978 <timer_add_timer_task+0x40>
     962:	461c      	mov	r4, r3
		if (it->time_label <= time) {
     964:	6863      	ldr	r3, [r4, #4]
     966:	4293      	cmp	r3, r2
     968:	d8f3      	bhi.n	952 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
     96a:	68a0      	ldr	r0, [r4, #8]
     96c:	4403      	add	r3, r0
     96e:	1a9b      	subs	r3, r3, r2
     970:	e7f2      	b.n	958 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
     972:	42a7      	cmp	r7, r4
     974:	d004      	beq.n	980 <timer_add_timer_task+0x48>
     976:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     978:	4620      	mov	r0, r4
     97a:	4b04      	ldr	r3, [pc, #16]	; (98c <timer_add_timer_task+0x54>)
     97c:	4798      	blx	r3
     97e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     980:	4660      	mov	r0, ip
     982:	4b01      	ldr	r3, [pc, #4]	; (988 <timer_add_timer_task+0x50>)
     984:	4798      	blx	r3
     986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     988:	00000cc9 	.word	0x00000cc9
     98c:	00000cf5 	.word	0x00000cf5

00000990 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
     994:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     996:	6907      	ldr	r7, [r0, #16]
     998:	3701      	adds	r7, #1
     99a:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     99c:	7e03      	ldrb	r3, [r0, #24]
     99e:	f013 0f01 	tst.w	r3, #1
     9a2:	d113      	bne.n	9cc <timer_process_counted+0x3c>
     9a4:	7e03      	ldrb	r3, [r0, #24]
     9a6:	f013 0f02 	tst.w	r3, #2
     9aa:	d10f      	bne.n	9cc <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
     9ac:	b354      	cbz	r4, a04 <timer_process_counted+0x74>
     9ae:	6863      	ldr	r3, [r4, #4]
     9b0:	1afb      	subs	r3, r7, r3
     9b2:	68a2      	ldr	r2, [r4, #8]
     9b4:	4293      	cmp	r3, r2
     9b6:	d307      	bcc.n	9c8 <timer_process_counted+0x38>
     9b8:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
     9ba:	f100 0814 	add.w	r8, r0, #20
     9be:	f8df 9048 	ldr.w	r9, [pc, #72]	; a08 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
     9c2:	f8df a048 	ldr.w	sl, [pc, #72]	; a0c <timer_process_counted+0x7c>
     9c6:	e012      	b.n	9ee <timer_process_counted+0x5e>
     9c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     9cc:	7e03      	ldrb	r3, [r0, #24]
     9ce:	f043 0302 	orr.w	r3, r3, #2
     9d2:	7603      	strb	r3, [r0, #24]
		return;
     9d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     9d8:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
     9da:	68e3      	ldr	r3, [r4, #12]
     9dc:	4620      	mov	r0, r4
     9de:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     9e0:	b185      	cbz	r5, a04 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
     9e2:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
     9e4:	686b      	ldr	r3, [r5, #4]
     9e6:	1afb      	subs	r3, r7, r3
     9e8:	68aa      	ldr	r2, [r5, #8]
     9ea:	4293      	cmp	r3, r2
     9ec:	d30a      	bcc.n	a04 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
     9ee:	4640      	mov	r0, r8
     9f0:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
     9f2:	7c23      	ldrb	r3, [r4, #16]
     9f4:	2b01      	cmp	r3, #1
     9f6:	d1ef      	bne.n	9d8 <timer_process_counted+0x48>
			tmp->time_label = time;
     9f8:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     9fa:	463a      	mov	r2, r7
     9fc:	4621      	mov	r1, r4
     9fe:	4640      	mov	r0, r8
     a00:	47d0      	blx	sl
     a02:	e7e9      	b.n	9d8 <timer_process_counted+0x48>
     a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     a08:	00000cfd 	.word	0x00000cfd
     a0c:	00000939 	.word	0x00000939

00000a10 <timer_init>:
{
     a10:	b538      	push	{r3, r4, r5, lr}
     a12:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     a14:	4604      	mov	r4, r0
     a16:	b178      	cbz	r0, a38 <timer_init+0x28>
     a18:	1c08      	adds	r0, r1, #0
     a1a:	bf18      	it	ne
     a1c:	2001      	movne	r0, #1
     a1e:	223b      	movs	r2, #59	; 0x3b
     a20:	4906      	ldr	r1, [pc, #24]	; (a3c <timer_init+0x2c>)
     a22:	4b07      	ldr	r3, [pc, #28]	; (a40 <timer_init+0x30>)
     a24:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     a26:	4629      	mov	r1, r5
     a28:	4620      	mov	r0, r4
     a2a:	4b06      	ldr	r3, [pc, #24]	; (a44 <timer_init+0x34>)
     a2c:	4798      	blx	r3
	descr->time                           = 0;
     a2e:	2000      	movs	r0, #0
     a30:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     a32:	4b05      	ldr	r3, [pc, #20]	; (a48 <timer_init+0x38>)
     a34:	6023      	str	r3, [r4, #0]
}
     a36:	bd38      	pop	{r3, r4, r5, pc}
     a38:	2000      	movs	r0, #0
     a3a:	e7f0      	b.n	a1e <timer_init+0xe>
     a3c:	00002ae4 	.word	0x00002ae4
     a40:	00000ca1 	.word	0x00000ca1
     a44:	0000150d 	.word	0x0000150d
     a48:	00000991 	.word	0x00000991

00000a4c <timer_start>:
{
     a4c:	b510      	push	{r4, lr}
	ASSERT(descr);
     a4e:	4604      	mov	r4, r0
     a50:	2253      	movs	r2, #83	; 0x53
     a52:	4909      	ldr	r1, [pc, #36]	; (a78 <timer_start+0x2c>)
     a54:	3000      	adds	r0, #0
     a56:	bf18      	it	ne
     a58:	2001      	movne	r0, #1
     a5a:	4b08      	ldr	r3, [pc, #32]	; (a7c <timer_start+0x30>)
     a5c:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
     a5e:	4620      	mov	r0, r4
     a60:	4b07      	ldr	r3, [pc, #28]	; (a80 <timer_start+0x34>)
     a62:	4798      	blx	r3
     a64:	b920      	cbnz	r0, a70 <timer_start+0x24>
	_timer_start(&descr->device);
     a66:	4620      	mov	r0, r4
     a68:	4b06      	ldr	r3, [pc, #24]	; (a84 <timer_start+0x38>)
     a6a:	4798      	blx	r3
	return ERR_NONE;
     a6c:	2000      	movs	r0, #0
     a6e:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     a70:	f06f 0010 	mvn.w	r0, #16
}
     a74:	bd10      	pop	{r4, pc}
     a76:	bf00      	nop
     a78:	00002ae4 	.word	0x00002ae4
     a7c:	00000ca1 	.word	0x00000ca1
     a80:	000016c9 	.word	0x000016c9
     a84:	000016b5 	.word	0x000016b5

00000a88 <timer_add_task>:
{
     a88:	b570      	push	{r4, r5, r6, lr}
     a8a:	b082      	sub	sp, #8
     a8c:	460d      	mov	r5, r1
	ASSERT(descr && task);
     a8e:	4604      	mov	r4, r0
     a90:	b318      	cbz	r0, ada <timer_add_task+0x52>
     a92:	1c08      	adds	r0, r1, #0
     a94:	bf18      	it	ne
     a96:	2001      	movne	r0, #1
     a98:	227a      	movs	r2, #122	; 0x7a
     a9a:	491e      	ldr	r1, [pc, #120]	; (b14 <timer_add_task+0x8c>)
     a9c:	4b1e      	ldr	r3, [pc, #120]	; (b18 <timer_add_task+0x90>)
     a9e:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
     aa0:	7e23      	ldrb	r3, [r4, #24]
     aa2:	f043 0301 	orr.w	r3, r3, #1
     aa6:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
     aa8:	f104 0614 	add.w	r6, r4, #20
     aac:	4629      	mov	r1, r5
     aae:	4630      	mov	r0, r6
     ab0:	4b1a      	ldr	r3, [pc, #104]	; (b1c <timer_add_task+0x94>)
     ab2:	4798      	blx	r3
     ab4:	b998      	cbnz	r0, ade <timer_add_task+0x56>
	task->time_label = descr->time;
     ab6:	6923      	ldr	r3, [r4, #16]
     ab8:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
     aba:	6922      	ldr	r2, [r4, #16]
     abc:	4629      	mov	r1, r5
     abe:	4630      	mov	r0, r6
     ac0:	4b17      	ldr	r3, [pc, #92]	; (b20 <timer_add_task+0x98>)
     ac2:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     ac4:	7e23      	ldrb	r3, [r4, #24]
     ac6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
     aca:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     acc:	7e23      	ldrb	r3, [r4, #24]
     ace:	f013 0f02 	tst.w	r3, #2
     ad2:	d110      	bne.n	af6 <timer_add_task+0x6e>
	return ERR_NONE;
     ad4:	2000      	movs	r0, #0
}
     ad6:	b002      	add	sp, #8
     ad8:	bd70      	pop	{r4, r5, r6, pc}
     ada:	2000      	movs	r0, #0
     adc:	e7dc      	b.n	a98 <timer_add_task+0x10>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     ade:	7e23      	ldrb	r3, [r4, #24]
     ae0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
     ae4:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
     ae6:	227f      	movs	r2, #127	; 0x7f
     ae8:	490a      	ldr	r1, [pc, #40]	; (b14 <timer_add_task+0x8c>)
     aea:	2000      	movs	r0, #0
     aec:	4b0a      	ldr	r3, [pc, #40]	; (b18 <timer_add_task+0x90>)
     aee:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
     af0:	f06f 0011 	mvn.w	r0, #17
     af4:	e7ef      	b.n	ad6 <timer_add_task+0x4e>
		CRITICAL_SECTION_ENTER()
     af6:	a801      	add	r0, sp, #4
     af8:	4b0a      	ldr	r3, [pc, #40]	; (b24 <timer_add_task+0x9c>)
     afa:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
     afc:	7e23      	ldrb	r3, [r4, #24]
     afe:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
     b02:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
     b04:	4620      	mov	r0, r4
     b06:	4b08      	ldr	r3, [pc, #32]	; (b28 <timer_add_task+0xa0>)
     b08:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
     b0a:	a801      	add	r0, sp, #4
     b0c:	4b07      	ldr	r3, [pc, #28]	; (b2c <timer_add_task+0xa4>)
     b0e:	4798      	blx	r3
	return ERR_NONE;
     b10:	2000      	movs	r0, #0
     b12:	e7e0      	b.n	ad6 <timer_add_task+0x4e>
     b14:	00002ae4 	.word	0x00002ae4
     b18:	00000ca1 	.word	0x00000ca1
     b1c:	00000ca7 	.word	0x00000ca7
     b20:	00000939 	.word	0x00000939
     b24:	000006c1 	.word	0x000006c1
     b28:	000016e1 	.word	0x000016e1
     b2c:	000006cf 	.word	0x000006cf

00000b30 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     b34:	460f      	mov	r7, r1
     b36:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     b38:	4604      	mov	r4, r0
     b3a:	b328      	cbz	r0, b88 <usart_sync_write+0x58>
     b3c:	b331      	cbz	r1, b8c <usart_sync_write+0x5c>
     b3e:	1c10      	adds	r0, r2, #0
     b40:	bf18      	it	ne
     b42:	2001      	movne	r0, #1
     b44:	22f1      	movs	r2, #241	; 0xf1
     b46:	4912      	ldr	r1, [pc, #72]	; (b90 <usart_sync_write+0x60>)
     b48:	4b12      	ldr	r3, [pc, #72]	; (b94 <usart_sync_write+0x64>)
     b4a:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     b4c:	3408      	adds	r4, #8
     b4e:	4d12      	ldr	r5, [pc, #72]	; (b98 <usart_sync_write+0x68>)
     b50:	4620      	mov	r0, r4
     b52:	47a8      	blx	r5
     b54:	2800      	cmp	r0, #0
     b56:	d0fb      	beq.n	b50 <usart_sync_write+0x20>
     b58:	3f01      	subs	r7, #1
     b5a:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     b5c:	f8df 9040 	ldr.w	r9, [pc, #64]	; ba0 <usart_sync_write+0x70>
		while (!_usart_sync_is_ready_to_send(&descr->device))
     b60:	4d0d      	ldr	r5, [pc, #52]	; (b98 <usart_sync_write+0x68>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
     b62:	f817 1f01 	ldrb.w	r1, [r7, #1]!
     b66:	4620      	mov	r0, r4
     b68:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
     b6a:	4620      	mov	r0, r4
     b6c:	47a8      	blx	r5
     b6e:	2800      	cmp	r0, #0
     b70:	d0fb      	beq.n	b6a <usart_sync_write+0x3a>
			;
	} while (++offset < length);
     b72:	3601      	adds	r6, #1
     b74:	4546      	cmp	r6, r8
     b76:	d3f4      	bcc.n	b62 <usart_sync_write+0x32>
	while (!_usart_sync_is_transmit_done(&descr->device))
     b78:	4d08      	ldr	r5, [pc, #32]	; (b9c <usart_sync_write+0x6c>)
     b7a:	4620      	mov	r0, r4
     b7c:	47a8      	blx	r5
     b7e:	2800      	cmp	r0, #0
     b80:	d0fb      	beq.n	b7a <usart_sync_write+0x4a>
		;
	return (int32_t)offset;
}
     b82:	4630      	mov	r0, r6
     b84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
     b88:	2000      	movs	r0, #0
     b8a:	e7db      	b.n	b44 <usart_sync_write+0x14>
     b8c:	2000      	movs	r0, #0
     b8e:	e7d9      	b.n	b44 <usart_sync_write+0x14>
     b90:	00002afc 	.word	0x00002afc
     b94:	00000ca1 	.word	0x00000ca1
     b98:	0000121f 	.word	0x0000121f
     b9c:	00001229 	.word	0x00001229
     ba0:	00001211 	.word	0x00001211

00000ba4 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     ba8:	460f      	mov	r7, r1
     baa:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     bac:	4604      	mov	r4, r0
     bae:	b1e0      	cbz	r0, bea <usart_sync_read+0x46>
     bb0:	b1e9      	cbz	r1, bee <usart_sync_read+0x4a>
     bb2:	1c10      	adds	r0, r2, #0
     bb4:	bf18      	it	ne
     bb6:	2001      	movne	r0, #1
     bb8:	f44f 7286 	mov.w	r2, #268	; 0x10c
     bbc:	490d      	ldr	r1, [pc, #52]	; (bf4 <usart_sync_read+0x50>)
     bbe:	4b0e      	ldr	r3, [pc, #56]	; (bf8 <usart_sync_read+0x54>)
     bc0:	4798      	blx	r3
     bc2:	3f01      	subs	r7, #1
	uint32_t                      offset = 0;
     bc4:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     bc6:	3408      	adds	r4, #8
     bc8:	4d0c      	ldr	r5, [pc, #48]	; (bfc <usart_sync_read+0x58>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     bca:	f8df 9034 	ldr.w	r9, [pc, #52]	; c00 <usart_sync_read+0x5c>
		while (!_usart_sync_is_byte_received(&descr->device))
     bce:	4620      	mov	r0, r4
     bd0:	47a8      	blx	r5
     bd2:	2800      	cmp	r0, #0
     bd4:	d0fb      	beq.n	bce <usart_sync_read+0x2a>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     bd6:	4620      	mov	r0, r4
     bd8:	47c8      	blx	r9
     bda:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
     bde:	3601      	adds	r6, #1
     be0:	4546      	cmp	r6, r8
     be2:	d3f4      	bcc.n	bce <usart_sync_read+0x2a>

	return (int32_t)offset;
}
     be4:	4630      	mov	r0, r6
     be6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
     bea:	2000      	movs	r0, #0
     bec:	e7e4      	b.n	bb8 <usart_sync_read+0x14>
     bee:	2000      	movs	r0, #0
     bf0:	e7e2      	b.n	bb8 <usart_sync_read+0x14>
     bf2:	bf00      	nop
     bf4:	00002afc 	.word	0x00002afc
     bf8:	00000ca1 	.word	0x00000ca1
     bfc:	00001233 	.word	0x00001233
     c00:	00001217 	.word	0x00001217

00000c04 <usart_sync_init>:
{
     c04:	b538      	push	{r3, r4, r5, lr}
     c06:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     c08:	4604      	mov	r4, r0
     c0a:	b198      	cbz	r0, c34 <usart_sync_init+0x30>
     c0c:	1c08      	adds	r0, r1, #0
     c0e:	bf18      	it	ne
     c10:	2001      	movne	r0, #1
     c12:	2234      	movs	r2, #52	; 0x34
     c14:	4908      	ldr	r1, [pc, #32]	; (c38 <usart_sync_init+0x34>)
     c16:	4b09      	ldr	r3, [pc, #36]	; (c3c <usart_sync_init+0x38>)
     c18:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     c1a:	4629      	mov	r1, r5
     c1c:	f104 0008 	add.w	r0, r4, #8
     c20:	4b07      	ldr	r3, [pc, #28]	; (c40 <usart_sync_init+0x3c>)
     c22:	4798      	blx	r3
	if (init_status) {
     c24:	4603      	mov	r3, r0
     c26:	b918      	cbnz	r0, c30 <usart_sync_init+0x2c>
	descr->io.read  = usart_sync_read;
     c28:	4a06      	ldr	r2, [pc, #24]	; (c44 <usart_sync_init+0x40>)
     c2a:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
     c2c:	4a06      	ldr	r2, [pc, #24]	; (c48 <usart_sync_init+0x44>)
     c2e:	6022      	str	r2, [r4, #0]
}
     c30:	4618      	mov	r0, r3
     c32:	bd38      	pop	{r3, r4, r5, pc}
     c34:	2000      	movs	r0, #0
     c36:	e7ec      	b.n	c12 <usart_sync_init+0xe>
     c38:	00002afc 	.word	0x00002afc
     c3c:	00000ca1 	.word	0x00000ca1
     c40:	000011d1 	.word	0x000011d1
     c44:	00000ba5 	.word	0x00000ba5
     c48:	00000b31 	.word	0x00000b31

00000c4c <usart_sync_enable>:
{
     c4c:	b510      	push	{r4, lr}
	ASSERT(descr);
     c4e:	4604      	mov	r4, r0
     c50:	2253      	movs	r2, #83	; 0x53
     c52:	4906      	ldr	r1, [pc, #24]	; (c6c <usart_sync_enable+0x20>)
     c54:	3000      	adds	r0, #0
     c56:	bf18      	it	ne
     c58:	2001      	movne	r0, #1
     c5a:	4b05      	ldr	r3, [pc, #20]	; (c70 <usart_sync_enable+0x24>)
     c5c:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     c5e:	f104 0008 	add.w	r0, r4, #8
     c62:	4b04      	ldr	r3, [pc, #16]	; (c74 <usart_sync_enable+0x28>)
     c64:	4798      	blx	r3
}
     c66:	2000      	movs	r0, #0
     c68:	bd10      	pop	{r4, pc}
     c6a:	bf00      	nop
     c6c:	00002afc 	.word	0x00002afc
     c70:	00000ca1 	.word	0x00000ca1
     c74:	000011fd 	.word	0x000011fd

00000c78 <usart_sync_get_io_descriptor>:
{
     c78:	b538      	push	{r3, r4, r5, lr}
     c7a:	460c      	mov	r4, r1
	ASSERT(descr && io);
     c7c:	4605      	mov	r5, r0
     c7e:	b148      	cbz	r0, c94 <usart_sync_get_io_descriptor+0x1c>
     c80:	1c08      	adds	r0, r1, #0
     c82:	bf18      	it	ne
     c84:	2001      	movne	r0, #1
     c86:	2269      	movs	r2, #105	; 0x69
     c88:	4903      	ldr	r1, [pc, #12]	; (c98 <usart_sync_get_io_descriptor+0x20>)
     c8a:	4b04      	ldr	r3, [pc, #16]	; (c9c <usart_sync_get_io_descriptor+0x24>)
     c8c:	4798      	blx	r3
	*io = &descr->io;
     c8e:	6025      	str	r5, [r4, #0]
}
     c90:	2000      	movs	r0, #0
     c92:	bd38      	pop	{r3, r4, r5, pc}
     c94:	2000      	movs	r0, #0
     c96:	e7f6      	b.n	c86 <usart_sync_get_io_descriptor+0xe>
     c98:	00002afc 	.word	0x00002afc
     c9c:	00000ca1 	.word	0x00000ca1

00000ca0 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     ca0:	b900      	cbnz	r0, ca4 <assert+0x4>
		__asm("BKPT #0");
     ca2:	be00      	bkpt	0x0000
     ca4:	4770      	bx	lr

00000ca6 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     ca6:	6803      	ldr	r3, [r0, #0]
     ca8:	b14b      	cbz	r3, cbe <is_list_element+0x18>
		if (it == element) {
     caa:	428b      	cmp	r3, r1
     cac:	d009      	beq.n	cc2 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
     cae:	681b      	ldr	r3, [r3, #0]
     cb0:	b11b      	cbz	r3, cba <is_list_element+0x14>
		if (it == element) {
     cb2:	4299      	cmp	r1, r3
     cb4:	d1fb      	bne.n	cae <is_list_element+0x8>
			return true;
     cb6:	2001      	movs	r0, #1
		}
	}

	return false;
}
     cb8:	4770      	bx	lr
	return false;
     cba:	2000      	movs	r0, #0
     cbc:	4770      	bx	lr
     cbe:	2000      	movs	r0, #0
     cc0:	4770      	bx	lr
			return true;
     cc2:	2001      	movs	r0, #1
     cc4:	4770      	bx	lr
	...

00000cc8 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     cc8:	b538      	push	{r3, r4, r5, lr}
     cca:	4604      	mov	r4, r0
     ccc:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
     cce:	4b06      	ldr	r3, [pc, #24]	; (ce8 <list_insert_as_head+0x20>)
     cd0:	4798      	blx	r3
     cd2:	f080 0001 	eor.w	r0, r0, #1
     cd6:	2239      	movs	r2, #57	; 0x39
     cd8:	4904      	ldr	r1, [pc, #16]	; (cec <list_insert_as_head+0x24>)
     cda:	b2c0      	uxtb	r0, r0
     cdc:	4b04      	ldr	r3, [pc, #16]	; (cf0 <list_insert_as_head+0x28>)
     cde:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     ce0:	6823      	ldr	r3, [r4, #0]
     ce2:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     ce4:	6025      	str	r5, [r4, #0]
     ce6:	bd38      	pop	{r3, r4, r5, pc}
     ce8:	00000ca7 	.word	0x00000ca7
     cec:	00002b18 	.word	0x00002b18
     cf0:	00000ca1 	.word	0x00000ca1

00000cf4 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     cf4:	6803      	ldr	r3, [r0, #0]
     cf6:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     cf8:	6001      	str	r1, [r0, #0]
     cfa:	4770      	bx	lr

00000cfc <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     cfc:	6803      	ldr	r3, [r0, #0]
     cfe:	b10b      	cbz	r3, d04 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     d00:	681a      	ldr	r2, [r3, #0]
     d02:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
     d04:	4618      	mov	r0, r3
     d06:	4770      	bx	lr

00000d08 <_irq_set>:
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     d08:	0943      	lsrs	r3, r0, #5
     d0a:	f000 001f 	and.w	r0, r0, #31
     d0e:	2201      	movs	r2, #1
     d10:	fa02 f000 	lsl.w	r0, r2, r0
     d14:	3340      	adds	r3, #64	; 0x40
     d16:	4a02      	ldr	r2, [pc, #8]	; (d20 <_irq_set+0x18>)
     d18:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
     d1c:	4770      	bx	lr
     d1e:	bf00      	nop
     d20:	e000e100 	.word	0xe000e100

00000d24 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     d24:	f64b 3380 	movw	r3, #48000	; 0xbb80
     d28:	fb03 f000 	mul.w	r0, r3, r0
     d2c:	4770      	bx	lr
	...

00000d30 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     d30:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     d32:	4a09      	ldr	r2, [pc, #36]	; (d58 <_init_chip+0x28>)
     d34:	8813      	ldrh	r3, [r2, #0]
     d36:	b29b      	uxth	r3, r3
     d38:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     d3a:	4b08      	ldr	r3, [pc, #32]	; (d5c <_init_chip+0x2c>)
     d3c:	4798      	blx	r3
	_oscctrl_init_sources();
     d3e:	4b08      	ldr	r3, [pc, #32]	; (d60 <_init_chip+0x30>)
     d40:	4798      	blx	r3
	_mclk_init();
     d42:	4b08      	ldr	r3, [pc, #32]	; (d64 <_init_chip+0x34>)
     d44:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
     d46:	2008      	movs	r0, #8
     d48:	4c07      	ldr	r4, [pc, #28]	; (d68 <_init_chip+0x38>)
     d4a:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
     d4c:	4b07      	ldr	r3, [pc, #28]	; (d6c <_init_chip+0x3c>)
     d4e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     d50:	f640 70f7 	movw	r0, #4087	; 0xff7
     d54:	47a0      	blx	r4
     d56:	bd10      	pop	{r4, pc}
     d58:	41004000 	.word	0x41004000
     d5c:	00000f79 	.word	0x00000f79
     d60:	00000f99 	.word	0x00000f99
     d64:	00000f6d 	.word	0x00000f6d
     d68:	00000f2d 	.word	0x00000f2d
     d6c:	00000f9d 	.word	0x00000f9d

00000d70 <_ext_irq_init>:
	};
}

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
     d70:	4b2a      	ldr	r3, [pc, #168]	; (e1c <_ext_irq_init+0xac>)
     d72:	685b      	ldr	r3, [r3, #4]
/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
     d74:	f013 0f01 	tst.w	r3, #1
     d78:	d11f      	bne.n	dba <_ext_irq_init+0x4a>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     d7a:	4a28      	ldr	r2, [pc, #160]	; (e1c <_ext_irq_init+0xac>)
     d7c:	6853      	ldr	r3, [r2, #4]
     d7e:	f013 0f03 	tst.w	r3, #3
     d82:	d1fb      	bne.n	d7c <_ext_irq_init+0xc>

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
     d84:	4b25      	ldr	r3, [pc, #148]	; (e1c <_ext_irq_init+0xac>)
     d86:	781b      	ldrb	r3, [r3, #0]
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
     d88:	f013 0f02 	tst.w	r3, #2
     d8c:	d00d      	beq.n	daa <_ext_irq_init+0x3a>
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
     d8e:	4a23      	ldr	r2, [pc, #140]	; (e1c <_ext_irq_init+0xac>)
     d90:	7813      	ldrb	r3, [r2, #0]
     d92:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
     d96:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     d98:	6853      	ldr	r3, [r2, #4]
     d9a:	f013 0f03 	tst.w	r3, #3
     d9e:	d1fb      	bne.n	d98 <_ext_irq_init+0x28>
     da0:	4a1e      	ldr	r2, [pc, #120]	; (e1c <_ext_irq_init+0xac>)
     da2:	6853      	ldr	r3, [r2, #4]
     da4:	f013 0f02 	tst.w	r3, #2
     da8:	d1fb      	bne.n	da2 <_ext_irq_init+0x32>
}

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
     daa:	2201      	movs	r2, #1
     dac:	4b1b      	ldr	r3, [pc, #108]	; (e1c <_ext_irq_init+0xac>)
     dae:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     db0:	461a      	mov	r2, r3
     db2:	6853      	ldr	r3, [r2, #4]
     db4:	f013 0f03 	tst.w	r3, #3
     db8:	d1fb      	bne.n	db2 <_ext_irq_init+0x42>
     dba:	4a18      	ldr	r2, [pc, #96]	; (e1c <_ext_irq_init+0xac>)
     dbc:	6853      	ldr	r3, [r2, #4]
     dbe:	f013 0f01 	tst.w	r3, #1
     dc2:	d1fb      	bne.n	dbc <_ext_irq_init+0x4c>
	tmp = ((Eic *)hw)->CTRLA.reg;
     dc4:	4a15      	ldr	r2, [pc, #84]	; (e1c <_ext_irq_init+0xac>)
     dc6:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
     dc8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	((Eic *)hw)->CTRLA.reg = tmp;
     dcc:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     dce:	6853      	ldr	r3, [r2, #4]
     dd0:	f013 0f03 	tst.w	r3, #3
     dd4:	d1fb      	bne.n	dce <_ext_irq_init+0x5e>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
     dd6:	4b11      	ldr	r3, [pc, #68]	; (e1c <_ext_irq_init+0xac>)
     dd8:	2200      	movs	r2, #0
     dda:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
     ddc:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
     dde:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
     de0:	2101      	movs	r1, #1
     de2:	6319      	str	r1, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
     de4:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
     de6:	61d9      	str	r1, [r3, #28]
     de8:	621a      	str	r2, [r3, #32]
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
     dea:	781a      	ldrb	r2, [r3, #0]
     dec:	f042 0202 	orr.w	r2, r2, #2
     df0:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     df2:	461a      	mov	r2, r3
     df4:	6853      	ldr	r3, [r2, #4]
     df6:	f013 0f03 	tst.w	r3, #3
     dfa:	d1fb      	bne.n	df4 <_ext_irq_init+0x84>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     dfc:	4b08      	ldr	r3, [pc, #32]	; (e20 <_ext_irq_init+0xb0>)
     dfe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
     e06:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     e0a:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     e0e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     e12:	601a      	str	r2, [r3, #0]
	hri_eic_set_CTRLA_ENABLE_bit(EIC);
	NVIC_DisableIRQ(EIC_0_IRQn);
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
	NVIC_EnableIRQ(EIC_0_IRQn);

	callback = cb;
     e14:	4b03      	ldr	r3, [pc, #12]	; (e24 <_ext_irq_init+0xb4>)
     e16:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
     e18:	2000      	movs	r0, #0
     e1a:	4770      	bx	lr
     e1c:	40002800 	.word	0x40002800
     e20:	e000e100 	.word	0xe000e100
     e24:	20000038 	.word	0x20000038

00000e28 <_ext_irq_enable>:
{
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;

	for (; i < ARRAY_SIZE(_map); i++) {
		if (_map[i].pin == pin) {
     e28:	2840      	cmp	r0, #64	; 0x40
     e2a:	d002      	beq.n	e32 <_ext_irq_enable+0xa>
			extint = _map[i].extint;
			break;
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
		return -1;
     e2c:	f04f 30ff 	mov.w	r0, #4294967295
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
	}

	return ERR_NONE;
}
     e30:	4770      	bx	lr
	if (enable) {
     e32:	b929      	cbnz	r1, e40 <_ext_irq_enable+0x18>
	((Eic *)hw)->INTENCLR.reg = mask;
     e34:	4b05      	ldr	r3, [pc, #20]	; (e4c <_ext_irq_enable+0x24>)
     e36:	2201      	movs	r2, #1
     e38:	60da      	str	r2, [r3, #12]
	((Eic *)hw)->INTFLAG.reg = mask;
     e3a:	615a      	str	r2, [r3, #20]
	return ERR_NONE;
     e3c:	2000      	movs	r0, #0
     e3e:	4770      	bx	lr
	((Eic *)hw)->INTENSET.reg = mask;
     e40:	2201      	movs	r2, #1
     e42:	4b02      	ldr	r3, [pc, #8]	; (e4c <_ext_irq_enable+0x24>)
     e44:	611a      	str	r2, [r3, #16]
     e46:	2000      	movs	r0, #0
     e48:	4770      	bx	lr
     e4a:	bf00      	nop
     e4c:	40002800 	.word	0x40002800

00000e50 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
     e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     e54:	b082      	sub	sp, #8
	return ((Eic *)hw)->INTFLAG.reg;
     e56:	4b30      	ldr	r3, [pc, #192]	; (f18 <EIC_0_Handler+0xc8>)
     e58:	695a      	ldr	r2, [r3, #20]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
     e5a:	9201      	str	r2, [sp, #4]
	hri_eic_clear_INTFLAG_reg(EIC, flags);
     e5c:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     e5e:	615a      	str	r2, [r3, #20]
	ASSERT(callback);
     e60:	4b2e      	ldr	r3, [pc, #184]	; (f1c <EIC_0_Handler+0xcc>)
     e62:	6818      	ldr	r0, [r3, #0]
     e64:	22e8      	movs	r2, #232	; 0xe8
     e66:	492e      	ldr	r1, [pc, #184]	; (f20 <EIC_0_Handler+0xd0>)
     e68:	3000      	adds	r0, #0
     e6a:	bf18      	it	ne
     e6c:	2001      	movne	r0, #1
     e6e:	4b2d      	ldr	r3, [pc, #180]	; (f24 <EIC_0_Handler+0xd4>)
     e70:	4798      	blx	r3
	while (flags) {
     e72:	9b01      	ldr	r3, [sp, #4]
     e74:	2b00      	cmp	r3, #0
     e76:	d04b      	beq.n	f10 <EIC_0_Handler+0xc0>
     e78:	f04f 36ff 	mov.w	r6, #4294967295
				callback(pin);
     e7c:	4f27      	ldr	r7, [pc, #156]	; (f1c <EIC_0_Handler+0xcc>)
				if (_map[middle].extint == pos) {
     e7e:	4d2a      	ldr	r5, [pc, #168]	; (f28 <EIC_0_Handler+0xd8>)
	return ((Eic *)hw)->INTFLAG.reg;
     e80:	f8df 8094 	ldr.w	r8, [pc, #148]	; f18 <EIC_0_Handler+0xc8>
     e84:	e039      	b.n	efa <EIC_0_Handler+0xaa>
			if (INVALID_PIN_NUMBER != pin) {
     e86:	f1b6 3fff 	cmp.w	r6, #4294967295
     e8a:	d004      	beq.n	e96 <EIC_0_Handler+0x46>
     e8c:	e000      	b.n	e90 <EIC_0_Handler+0x40>
				if (_map[middle].extint == pos) {
     e8e:	2640      	movs	r6, #64	; 0x40
				callback(pin);
     e90:	4630      	mov	r0, r6
     e92:	683b      	ldr	r3, [r7, #0]
     e94:	4798      	blx	r3
			flags &= ~(1ul << pos);
     e96:	9b01      	ldr	r3, [sp, #4]
     e98:	2201      	movs	r2, #1
     e9a:	fa02 f404 	lsl.w	r4, r2, r4
     e9e:	ea23 0404 	bic.w	r4, r3, r4
     ea2:	9401      	str	r4, [sp, #4]
			pos = ffs(flags) - 1;
     ea4:	9a01      	ldr	r2, [sp, #4]
     ea6:	fa92 f3a2 	rbit	r3, r2
     eaa:	fab3 f383 	clz	r3, r3
     eae:	2a00      	cmp	r2, #0
		while (-1 != pos) {
     eb0:	bf08      	it	eq
     eb2:	f04f 33ff 	moveq.w	r3, #4294967295
     eb6:	d018      	beq.n	eea <EIC_0_Handler+0x9a>
				if (_map[middle].extint == pos) {
     eb8:	461c      	mov	r4, r3
     eba:	2b00      	cmp	r3, #0
     ebc:	d0e7      	beq.n	e8e <EIC_0_Handler+0x3e>
     ebe:	2200      	movs	r2, #0
     ec0:	4613      	mov	r3, r2
     ec2:	4610      	mov	r0, r2
     ec4:	2101      	movs	r1, #1
				if (_map[middle].extint < pos) {
     ec6:	4294      	cmp	r4, r2
					lower = middle + 1;
     ec8:	bfc7      	ittee	gt
     eca:	3301      	addgt	r3, #1
     ecc:	b2d8      	uxtbgt	r0, r3
					upper = middle - 1;
     ece:	f103 33ff 	addle.w	r3, r3, #4294967295
     ed2:	b2d9      	uxtble	r1, r3
			while (upper >= lower) {
     ed4:	4288      	cmp	r0, r1
     ed6:	d8d6      	bhi.n	e86 <EIC_0_Handler+0x36>
				middle = (upper + lower) >> 1;
     ed8:	180b      	adds	r3, r1, r0
     eda:	f3c3 0347 	ubfx	r3, r3, #1, #8
				if (_map[middle].extint == pos) {
     ede:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
     ee2:	42a2      	cmp	r2, r4
     ee4:	d1ef      	bne.n	ec6 <EIC_0_Handler+0x76>
     ee6:	2640      	movs	r6, #64	; 0x40
     ee8:	e7d2      	b.n	e90 <EIC_0_Handler+0x40>
     eea:	f8d8 3014 	ldr.w	r3, [r8, #20]
		flags = hri_eic_read_INTFLAG_reg(EIC);
     eee:	9301      	str	r3, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
     ef0:	9b01      	ldr	r3, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     ef2:	f8c8 3014 	str.w	r3, [r8, #20]
	while (flags) {
     ef6:	9b01      	ldr	r3, [sp, #4]
     ef8:	b153      	cbz	r3, f10 <EIC_0_Handler+0xc0>
		pos = ffs(flags) - 1;
     efa:	9a01      	ldr	r2, [sp, #4]
     efc:	fa92 f3a2 	rbit	r3, r2
     f00:	fab3 f383 	clz	r3, r3
     f04:	2a00      	cmp	r2, #0
		while (-1 != pos) {
     f06:	bf08      	it	eq
     f08:	f04f 33ff 	moveq.w	r3, #4294967295
     f0c:	d1d4      	bne.n	eb8 <EIC_0_Handler+0x68>
     f0e:	e7ec      	b.n	eea <EIC_0_Handler+0x9a>
	_ext_irq_handler();
}
     f10:	b002      	add	sp, #8
     f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     f16:	bf00      	nop
     f18:	40002800 	.word	0x40002800
     f1c:	20000038 	.word	0x20000038
     f20:	00002b40 	.word	0x00002b40
     f24:	00000ca1 	.word	0x00000ca1
     f28:	00002b38 	.word	0x00002b38

00000f2c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     f2c:	f010 0f01 	tst.w	r0, #1
     f30:	d008      	beq.n	f44 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     f32:	4a0b      	ldr	r2, [pc, #44]	; (f60 <_gclk_init_generators_by_fref+0x34>)
     f34:	4b0b      	ldr	r3, [pc, #44]	; (f64 <_gclk_init_generators_by_fref+0x38>)
     f36:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     f38:	4619      	mov	r1, r3
     f3a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     f3e:	684b      	ldr	r3, [r1, #4]
     f40:	4213      	tst	r3, r2
     f42:	d1fc      	bne.n	f3e <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     f44:	f010 0f08 	tst.w	r0, #8
     f48:	d008      	beq.n	f5c <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     f4a:	4a07      	ldr	r2, [pc, #28]	; (f68 <_gclk_init_generators_by_fref+0x3c>)
     f4c:	4b05      	ldr	r3, [pc, #20]	; (f64 <_gclk_init_generators_by_fref+0x38>)
     f4e:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     f50:	4619      	mov	r1, r3
     f52:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     f56:	684b      	ldr	r3, [r1, #4]
     f58:	4213      	tst	r3, r2
     f5a:	d1fc      	bne.n	f56 <_gclk_init_generators_by_fref+0x2a>
     f5c:	4770      	bx	lr
     f5e:	bf00      	nop
     f60:	00010906 	.word	0x00010906
     f64:	40001c00 	.word	0x40001c00
     f68:	00010905 	.word	0x00010905

00000f6c <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     f6c:	2201      	movs	r2, #1
     f6e:	4b01      	ldr	r3, [pc, #4]	; (f74 <_mclk_init+0x8>)
     f70:	715a      	strb	r2, [r3, #5]
     f72:	4770      	bx	lr
     f74:	40000800 	.word	0x40000800

00000f78 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
     f78:	4b06      	ldr	r3, [pc, #24]	; (f94 <_osc32kctrl_init_sources+0x1c>)
     f7a:	f242 028e 	movw	r2, #8334	; 0x208e
     f7e:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
     f80:	2200      	movs	r2, #0
     f82:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
     f84:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     f86:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     f88:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     f8c:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     f8e:	2201      	movs	r2, #1
     f90:	741a      	strb	r2, [r3, #16]
     f92:	4770      	bx	lr
     f94:	40001400 	.word	0x40001400

00000f98 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
     f98:	4770      	bx	lr
	...

00000f9c <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
     f9c:	4a36      	ldr	r2, [pc, #216]	; (1078 <_oscctrl_init_referenced_generators+0xdc>)
     f9e:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
     fa0:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
     fa4:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
     fa8:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     faa:	4611      	mov	r1, r2
     fac:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     fb0:	684b      	ldr	r3, [r1, #4]
     fb2:	4213      	tst	r3, r2
     fb4:	d1fc      	bne.n	fb0 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
     fb6:	4a30      	ldr	r2, [pc, #192]	; (1078 <_oscctrl_init_referenced_generators+0xdc>)
     fb8:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
     fba:	f013 0f04 	tst.w	r3, #4
     fbe:	d1fb      	bne.n	fb8 <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
     fc0:	4b2e      	ldr	r3, [pc, #184]	; (107c <_oscctrl_init_referenced_generators+0xe0>)
     fc2:	2200      	movs	r2, #0
     fc4:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
     fc6:	4a2e      	ldr	r2, [pc, #184]	; (1080 <_oscctrl_init_referenced_generators+0xe4>)
     fc8:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     fca:	461a      	mov	r2, r3
     fcc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
     fd0:	f013 0f10 	tst.w	r3, #16
     fd4:	d1fa      	bne.n	fcc <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
     fd6:	2200      	movs	r2, #0
     fd8:	4b28      	ldr	r3, [pc, #160]	; (107c <_oscctrl_init_referenced_generators+0xe0>)
     fda:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     fde:	461a      	mov	r2, r3
     fe0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
     fe4:	f013 0f04 	tst.w	r3, #4
     fe8:	d1fa      	bne.n	fe0 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
     fea:	2202      	movs	r2, #2
     fec:	4b23      	ldr	r3, [pc, #140]	; (107c <_oscctrl_init_referenced_generators+0xe0>)
     fee:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     ff0:	461a      	mov	r2, r3
     ff2:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
     ff6:	f013 0f02 	tst.w	r3, #2
     ffa:	d1fa      	bne.n	ff2 <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
     ffc:	4b1f      	ldr	r3, [pc, #124]	; (107c <_oscctrl_init_referenced_generators+0xe0>)
     ffe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    1000:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1002:	461a      	mov	r2, r3
    1004:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    1008:	f013 0f08 	tst.w	r3, #8
    100c:	d1fa      	bne.n	1004 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    100e:	2280      	movs	r2, #128	; 0x80
    1010:	4b1a      	ldr	r3, [pc, #104]	; (107c <_oscctrl_init_referenced_generators+0xe0>)
    1012:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1016:	461a      	mov	r2, r3
    1018:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    101c:	f013 0f04 	tst.w	r3, #4
    1020:	d1fa      	bne.n	1018 <_oscctrl_init_referenced_generators+0x7c>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    1022:	4b16      	ldr	r3, [pc, #88]	; (107c <_oscctrl_init_referenced_generators+0xe0>)
    1024:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    1028:	f013 0f01 	tst.w	r3, #1
    102c:	d01d      	beq.n	106a <_oscctrl_init_referenced_generators+0xce>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    102e:	4a13      	ldr	r2, [pc, #76]	; (107c <_oscctrl_init_referenced_generators+0xe0>)
    1030:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    1032:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    1036:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    103a:	d1f9      	bne.n	1030 <_oscctrl_init_referenced_generators+0x94>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    103c:	4a0e      	ldr	r2, [pc, #56]	; (1078 <_oscctrl_init_referenced_generators+0xdc>)
    103e:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    1040:	2b00      	cmp	r3, #0
    1042:	d1fc      	bne.n	103e <_oscctrl_init_referenced_generators+0xa2>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1044:	4a0c      	ldr	r2, [pc, #48]	; (1078 <_oscctrl_init_referenced_generators+0xdc>)
    1046:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1048:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    104c:	f043 0306 	orr.w	r3, r3, #6
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1050:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1052:	4611      	mov	r1, r2
    1054:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1058:	684b      	ldr	r3, [r1, #4]
    105a:	4213      	tst	r3, r2
    105c:	d1fc      	bne.n	1058 <_oscctrl_init_referenced_generators+0xbc>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    105e:	4a06      	ldr	r2, [pc, #24]	; (1078 <_oscctrl_init_referenced_generators+0xdc>)
    1060:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    1062:	f013 0f04 	tst.w	r3, #4
    1066:	d1fb      	bne.n	1060 <_oscctrl_init_referenced_generators+0xc4>
		;
#endif
	(void)hw;
}
    1068:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    106a:	4a04      	ldr	r2, [pc, #16]	; (107c <_oscctrl_init_referenced_generators+0xe0>)
    106c:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    106e:	f413 7f80 	tst.w	r3, #256	; 0x100
    1072:	d0fb      	beq.n	106c <_oscctrl_init_referenced_generators+0xd0>
    1074:	e7e2      	b.n	103c <_oscctrl_init_referenced_generators+0xa0>
    1076:	bf00      	nop
    1078:	40001c00 	.word	0x40001c00
    107c:	40001000 	.word	0x40001000
    1080:	04010000 	.word	0x04010000

00001084 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    1084:	b500      	push	{lr}
    1086:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    1088:	4b0d      	ldr	r3, [pc, #52]	; (10c0 <RAMECC_Handler+0x3c>)
    108a:	789b      	ldrb	r3, [r3, #2]
    108c:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    108e:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    1090:	9b01      	ldr	r3, [sp, #4]
    1092:	f013 0f02 	tst.w	r3, #2
    1096:	d006      	beq.n	10a6 <RAMECC_Handler+0x22>
    1098:	4b0a      	ldr	r3, [pc, #40]	; (10c4 <RAMECC_Handler+0x40>)
    109a:	681b      	ldr	r3, [r3, #0]
    109c:	b11b      	cbz	r3, 10a6 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    109e:	4a08      	ldr	r2, [pc, #32]	; (10c0 <RAMECC_Handler+0x3c>)
    10a0:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    10a2:	4798      	blx	r3
    10a4:	e009      	b.n	10ba <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    10a6:	9b01      	ldr	r3, [sp, #4]
    10a8:	f013 0f01 	tst.w	r3, #1
    10ac:	d005      	beq.n	10ba <RAMECC_Handler+0x36>
    10ae:	4b05      	ldr	r3, [pc, #20]	; (10c4 <RAMECC_Handler+0x40>)
    10b0:	685b      	ldr	r3, [r3, #4]
    10b2:	b113      	cbz	r3, 10ba <RAMECC_Handler+0x36>
    10b4:	4a02      	ldr	r2, [pc, #8]	; (10c0 <RAMECC_Handler+0x3c>)
    10b6:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    10b8:	4798      	blx	r3
	} else {
		return;
	}
}
    10ba:	b003      	add	sp, #12
    10bc:	f85d fb04 	ldr.w	pc, [sp], #4
    10c0:	41020000 	.word	0x41020000
    10c4:	20000088 	.word	0x20000088

000010c8 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    10c8:	b470      	push	{r4, r5, r6}
    10ca:	b089      	sub	sp, #36	; 0x24
    10cc:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    10ce:	466c      	mov	r4, sp
    10d0:	4d0d      	ldr	r5, [pc, #52]	; (1108 <_sercom_get_hardware_index+0x40>)
    10d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    10d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    10d6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    10da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    10de:	9b00      	ldr	r3, [sp, #0]
    10e0:	42b3      	cmp	r3, r6
    10e2:	d00d      	beq.n	1100 <_sercom_get_hardware_index+0x38>
    10e4:	4631      	mov	r1, r6
    10e6:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    10e8:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    10ea:	f853 2b04 	ldr.w	r2, [r3], #4
    10ee:	428a      	cmp	r2, r1
    10f0:	d007      	beq.n	1102 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    10f2:	3001      	adds	r0, #1
    10f4:	2808      	cmp	r0, #8
    10f6:	d1f8      	bne.n	10ea <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    10f8:	2000      	movs	r0, #0
}
    10fa:	b009      	add	sp, #36	; 0x24
    10fc:	bc70      	pop	{r4, r5, r6}
    10fe:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1100:	2000      	movs	r0, #0
			return i;
    1102:	b2c0      	uxtb	r0, r0
    1104:	e7f9      	b.n	10fa <_sercom_get_hardware_index+0x32>
    1106:	bf00      	nop
    1108:	00002b58 	.word	0x00002b58

0000110c <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    110c:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    110e:	f013 0f01 	tst.w	r3, #1
    1112:	d109      	bne.n	1128 <_spi_sync_enable+0x1c>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1114:	6803      	ldr	r3, [r0, #0]
    1116:	f043 0302 	orr.w	r3, r3, #2
    111a:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    111c:	69c3      	ldr	r3, [r0, #28]
    111e:	f013 0f03 	tst.w	r3, #3
    1122:	d1fb      	bne.n	111c <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    1124:	2000      	movs	r0, #0
    1126:	4770      	bx	lr
		return ERR_BUSY;
    1128:	f06f 0003 	mvn.w	r0, #3
}
    112c:	4770      	bx	lr
	...

00001130 <_usart_init>:
{
    1130:	b510      	push	{r4, lr}
    1132:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1134:	4b21      	ldr	r3, [pc, #132]	; (11bc <_usart_init+0x8c>)
    1136:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    1138:	2804      	cmp	r0, #4
    113a:	d005      	beq.n	1148 <_usart_init+0x18>
	ASSERT(false);
    113c:	f240 2247 	movw	r2, #583	; 0x247
    1140:	491f      	ldr	r1, [pc, #124]	; (11c0 <_usart_init+0x90>)
    1142:	2000      	movs	r0, #0
    1144:	4b1f      	ldr	r3, [pc, #124]	; (11c4 <_usart_init+0x94>)
    1146:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    1148:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    114a:	f013 0f01 	tst.w	r3, #1
    114e:	d119      	bne.n	1184 <_usart_init+0x54>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1150:	69e3      	ldr	r3, [r4, #28]
    1152:	f013 0f03 	tst.w	r3, #3
    1156:	d1fb      	bne.n	1150 <_usart_init+0x20>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1158:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    115a:	f013 0f02 	tst.w	r3, #2
    115e:	d00b      	beq.n	1178 <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1160:	6823      	ldr	r3, [r4, #0]
    1162:	f023 0302 	bic.w	r3, r3, #2
    1166:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1168:	69e3      	ldr	r3, [r4, #28]
    116a:	f013 0f03 	tst.w	r3, #3
    116e:	d1fb      	bne.n	1168 <_usart_init+0x38>
    1170:	69e3      	ldr	r3, [r4, #28]
    1172:	f013 0f02 	tst.w	r3, #2
    1176:	d1fb      	bne.n	1170 <_usart_init+0x40>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1178:	2305      	movs	r3, #5
    117a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    117c:	69e3      	ldr	r3, [r4, #28]
    117e:	f013 0f03 	tst.w	r3, #3
    1182:	d1fb      	bne.n	117c <_usart_init+0x4c>
    1184:	69e3      	ldr	r3, [r4, #28]
    1186:	f013 0f01 	tst.w	r3, #1
    118a:	d1fb      	bne.n	1184 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    118c:	4b0e      	ldr	r3, [pc, #56]	; (11c8 <_usart_init+0x98>)
    118e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1190:	69e3      	ldr	r3, [r4, #28]
    1192:	f013 0f03 	tst.w	r3, #3
    1196:	d1fb      	bne.n	1190 <_usart_init+0x60>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1198:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    119c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    119e:	69e3      	ldr	r3, [r4, #28]
    11a0:	f013 0f1f 	tst.w	r3, #31
    11a4:	d1fb      	bne.n	119e <_usart_init+0x6e>
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    11a6:	4b09      	ldr	r3, [pc, #36]	; (11cc <_usart_init+0x9c>)
    11a8:	60a3      	str	r3, [r4, #8]
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    11aa:	f24f 632b 	movw	r3, #63019	; 0xf62b
    11ae:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    11b0:	2000      	movs	r0, #0
    11b2:	73a0      	strb	r0, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    11b4:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
}
    11b8:	bd10      	pop	{r4, pc}
    11ba:	bf00      	nop
    11bc:	000010c9 	.word	0x000010c9
    11c0:	00002b90 	.word	0x00002b90
    11c4:	00000ca1 	.word	0x00000ca1
    11c8:	40100004 	.word	0x40100004
    11cc:	00700002 	.word	0x00700002

000011d0 <_usart_sync_init>:
{
    11d0:	b538      	push	{r3, r4, r5, lr}
    11d2:	460c      	mov	r4, r1
	ASSERT(device);
    11d4:	4605      	mov	r5, r0
    11d6:	22bb      	movs	r2, #187	; 0xbb
    11d8:	4905      	ldr	r1, [pc, #20]	; (11f0 <_usart_sync_init+0x20>)
    11da:	3000      	adds	r0, #0
    11dc:	bf18      	it	ne
    11de:	2001      	movne	r0, #1
    11e0:	4b04      	ldr	r3, [pc, #16]	; (11f4 <_usart_sync_init+0x24>)
    11e2:	4798      	blx	r3
	device->hw = hw;
    11e4:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    11e6:	4620      	mov	r0, r4
    11e8:	4b03      	ldr	r3, [pc, #12]	; (11f8 <_usart_sync_init+0x28>)
    11ea:	4798      	blx	r3
}
    11ec:	bd38      	pop	{r3, r4, r5, pc}
    11ee:	bf00      	nop
    11f0:	00002b90 	.word	0x00002b90
    11f4:	00000ca1 	.word	0x00000ca1
    11f8:	00001131 	.word	0x00001131

000011fc <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    11fc:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    11fe:	6813      	ldr	r3, [r2, #0]
    1200:	f043 0302 	orr.w	r3, r3, #2
    1204:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1206:	69d3      	ldr	r3, [r2, #28]
    1208:	f013 0f03 	tst.w	r3, #3
    120c:	d1fb      	bne.n	1206 <_usart_sync_enable+0xa>
}
    120e:	4770      	bx	lr

00001210 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1210:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
    1212:	6299      	str	r1, [r3, #40]	; 0x28
    1214:	4770      	bx	lr

00001216 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    1216:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    1218:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    121a:	b2c0      	uxtb	r0, r0
    121c:	4770      	bx	lr

0000121e <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    121e:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1220:	7e18      	ldrb	r0, [r3, #24]
}
    1222:	f000 0001 	and.w	r0, r0, #1
    1226:	4770      	bx	lr

00001228 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    1228:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    122a:	7e18      	ldrb	r0, [r3, #24]
}
    122c:	f3c0 0040 	ubfx	r0, r0, #1, #1
    1230:	4770      	bx	lr

00001232 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    1232:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1234:	7e18      	ldrb	r0, [r3, #24]
}
    1236:	f3c0 0080 	ubfx	r0, r0, #2, #1
    123a:	4770      	bx	lr

0000123c <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    123c:	b538      	push	{r3, r4, r5, lr}
    123e:	4605      	mov	r5, r0
    1240:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    1242:	4608      	mov	r0, r1
    1244:	4b36      	ldr	r3, [pc, #216]	; (1320 <_spi_m_sync_init+0xe4>)
    1246:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    1248:	b160      	cbz	r0, 1264 <_spi_m_sync_init+0x28>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    124a:	2d00      	cmp	r5, #0
    124c:	d055      	beq.n	12fa <_spi_m_sync_init+0xbe>
    124e:	f640 123c 	movw	r2, #2364	; 0x93c
    1252:	4934      	ldr	r1, [pc, #208]	; (1324 <_spi_m_sync_init+0xe8>)
    1254:	1c20      	adds	r0, r4, #0
    1256:	bf18      	it	ne
    1258:	2001      	movne	r0, #1
    125a:	4b33      	ldr	r3, [pc, #204]	; (1328 <_spi_m_sync_init+0xec>)
    125c:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    125e:	f06f 000c 	mvn.w	r0, #12
    1262:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    1264:	2d00      	cmp	r5, #0
    1266:	d151      	bne.n	130c <_spi_m_sync_init+0xd0>
    1268:	f640 123c 	movw	r2, #2364	; 0x93c
    126c:	492d      	ldr	r1, [pc, #180]	; (1324 <_spi_m_sync_init+0xe8>)
    126e:	2000      	movs	r0, #0
    1270:	4b2d      	ldr	r3, [pc, #180]	; (1328 <_spi_m_sync_init+0xec>)
    1272:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1274:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1276:	f013 0f01 	tst.w	r3, #1
    127a:	d119      	bne.n	12b0 <_spi_m_sync_init+0x74>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    127c:	69e3      	ldr	r3, [r4, #28]
    127e:	f013 0f03 	tst.w	r3, #3
    1282:	d1fb      	bne.n	127c <_spi_m_sync_init+0x40>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1284:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    1286:	f013 0f02 	tst.w	r3, #2
    128a:	d00b      	beq.n	12a4 <_spi_m_sync_init+0x68>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    128c:	6823      	ldr	r3, [r4, #0]
    128e:	f023 0302 	bic.w	r3, r3, #2
    1292:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1294:	69e3      	ldr	r3, [r4, #28]
    1296:	f013 0f03 	tst.w	r3, #3
    129a:	d1fb      	bne.n	1294 <_spi_m_sync_init+0x58>
    129c:	69e3      	ldr	r3, [r4, #28]
    129e:	f013 0f02 	tst.w	r3, #2
    12a2:	d1fb      	bne.n	129c <_spi_m_sync_init+0x60>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    12a4:	230d      	movs	r3, #13
    12a6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    12a8:	69e3      	ldr	r3, [r4, #28]
    12aa:	f013 0f03 	tst.w	r3, #3
    12ae:	d1fb      	bne.n	12a8 <_spi_m_sync_init+0x6c>
    12b0:	69e3      	ldr	r3, [r4, #28]
    12b2:	f013 0f01 	tst.w	r3, #1
    12b6:	d1fb      	bne.n	12b0 <_spi_m_sync_init+0x74>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    12b8:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    12ba:	f640 1206 	movw	r2, #2310	; 0x906
    12be:	4919      	ldr	r1, [pc, #100]	; (1324 <_spi_m_sync_init+0xe8>)
    12c0:	1c20      	adds	r0, r4, #0
    12c2:	bf18      	it	ne
    12c4:	2001      	movne	r0, #1
    12c6:	4b18      	ldr	r3, [pc, #96]	; (1328 <_spi_m_sync_init+0xec>)
    12c8:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    12ca:	4b18      	ldr	r3, [pc, #96]	; (132c <_spi_m_sync_init+0xf0>)
    12cc:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    12ce:	69e3      	ldr	r3, [r4, #28]
    12d0:	f013 0f03 	tst.w	r3, #3
    12d4:	d1fb      	bne.n	12ce <_spi_m_sync_init+0x92>
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    12d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    12da:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    12dc:	69e3      	ldr	r3, [r4, #28]
    12de:	f013 0f17 	tst.w	r3, #23
    12e2:	d1fb      	bne.n	12dc <_spi_m_sync_init+0xa0>
	((Sercom *)hw)->SPI.BAUD.reg = data;
    12e4:	23fe      	movs	r3, #254	; 0xfe
    12e6:	7323      	strb	r3, [r4, #12]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    12e8:	2000      	movs	r0, #0
    12ea:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    12ee:	2301      	movs	r3, #1
    12f0:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    12f2:	f240 13ff 	movw	r3, #511	; 0x1ff
    12f6:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    12f8:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    12fa:	f640 123c 	movw	r2, #2364	; 0x93c
    12fe:	4909      	ldr	r1, [pc, #36]	; (1324 <_spi_m_sync_init+0xe8>)
    1300:	2000      	movs	r0, #0
    1302:	4b09      	ldr	r3, [pc, #36]	; (1328 <_spi_m_sync_init+0xec>)
    1304:	4798      	blx	r3
		return ERR_INVALID_ARG;
    1306:	f06f 000c 	mvn.w	r0, #12
    130a:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    130c:	f640 123c 	movw	r2, #2364	; 0x93c
    1310:	4904      	ldr	r1, [pc, #16]	; (1324 <_spi_m_sync_init+0xe8>)
    1312:	1c20      	adds	r0, r4, #0
    1314:	bf18      	it	ne
    1316:	2001      	movne	r0, #1
    1318:	4b03      	ldr	r3, [pc, #12]	; (1328 <_spi_m_sync_init+0xec>)
    131a:	4798      	blx	r3
    131c:	e7aa      	b.n	1274 <_spi_m_sync_init+0x38>
    131e:	bf00      	nop
    1320:	000010c9 	.word	0x000010c9
    1324:	00002b90 	.word	0x00002b90
    1328:	00000ca1 	.word	0x00000ca1
    132c:	0020000c 	.word	0x0020000c

00001330 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    1330:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    1332:	4604      	mov	r4, r0
    1334:	b160      	cbz	r0, 1350 <_spi_m_sync_enable+0x20>
    1336:	6800      	ldr	r0, [r0, #0]
    1338:	3000      	adds	r0, #0
    133a:	bf18      	it	ne
    133c:	2001      	movne	r0, #1
    133e:	f640 129b 	movw	r2, #2459	; 0x99b
    1342:	4904      	ldr	r1, [pc, #16]	; (1354 <_spi_m_sync_enable+0x24>)
    1344:	4b04      	ldr	r3, [pc, #16]	; (1358 <_spi_m_sync_enable+0x28>)
    1346:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    1348:	6820      	ldr	r0, [r4, #0]
    134a:	4b04      	ldr	r3, [pc, #16]	; (135c <_spi_m_sync_enable+0x2c>)
    134c:	4798      	blx	r3
}
    134e:	bd10      	pop	{r4, pc}
    1350:	2000      	movs	r0, #0
    1352:	e7f4      	b.n	133e <_spi_m_sync_enable+0xe>
    1354:	00002b90 	.word	0x00002b90
    1358:	00000ca1 	.word	0x00000ca1
    135c:	0000110d 	.word	0x0000110d

00001360 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    1360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1364:	4681      	mov	r9, r0
    1366:	460e      	mov	r6, r1
	void *                 hw   = dev->prvt;
    1368:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    136a:	f8d1 8000 	ldr.w	r8, [r1]
    136e:	684d      	ldr	r5, [r1, #4]
    1370:	7907      	ldrb	r7, [r0, #4]

	ASSERT(dev && hw);
    1372:	b1a8      	cbz	r0, 13a0 <_spi_m_sync_trans+0x40>
    1374:	1c20      	adds	r0, r4, #0
    1376:	bf18      	it	ne
    1378:	2001      	movne	r0, #1
    137a:	f44f 622a 	mov.w	r2, #2720	; 0xaa0
    137e:	492e      	ldr	r1, [pc, #184]	; (1438 <_spi_m_sync_trans+0xd8>)
    1380:	4b2e      	ldr	r3, [pc, #184]	; (143c <_spi_m_sync_trans+0xdc>)
    1382:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1384:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    1386:	f013 0f07 	tst.w	r3, #7
    138a:	d134      	bne.n	13f6 <_spi_m_sync_trans+0x96>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    138c:	69e0      	ldr	r0, [r4, #28]
    138e:	f010 0003 	ands.w	r0, r0, #3
    1392:	d1fb      	bne.n	138c <_spi_m_sync_trans+0x2c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1394:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    1396:	f013 0f02 	tst.w	r3, #2
    139a:	d030      	beq.n	13fe <_spi_m_sync_trans+0x9e>
    139c:	4602      	mov	r2, r0
    139e:	e008      	b.n	13b2 <_spi_m_sync_trans+0x52>
    13a0:	2000      	movs	r0, #0
    13a2:	e7ea      	b.n	137a <_spi_m_sync_trans+0x1a>
	ctrl->rxcnt++;
    13a4:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    13a6:	f013 0f80 	tst.w	r3, #128	; 0x80
    13aa:	d112      	bne.n	13d2 <_spi_m_sync_trans+0x72>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    13ac:	68b3      	ldr	r3, [r6, #8]
    13ae:	4283      	cmp	r3, r0
    13b0:	d91e      	bls.n	13f0 <_spi_m_sync_trans+0x90>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    13b2:	7e23      	ldrb	r3, [r4, #24]
    13b4:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    13b6:	f013 0f04 	tst.w	r3, #4
    13ba:	d024      	beq.n	1406 <_spi_m_sync_trans+0xa6>
	return ((Sercom *)hw)->SPI.DATA.reg;
    13bc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    13be:	2d00      	cmp	r5, #0
    13c0:	d0f0      	beq.n	13a4 <_spi_m_sync_trans+0x44>
		*ctrl->rxbuf++ = (uint8_t)data;
    13c2:	7029      	strb	r1, [r5, #0]
		if (ctrl->char_size > 1) {
    13c4:	2f01      	cmp	r7, #1
		*ctrl->rxbuf++ = (uint8_t)data;
    13c6:	bf91      	iteee	ls
    13c8:	3501      	addls	r5, #1
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    13ca:	0a09      	lsrhi	r1, r1, #8
    13cc:	7069      	strbhi	r1, [r5, #1]
    13ce:	3502      	addhi	r5, #2
    13d0:	e7e8      	b.n	13a4 <_spi_m_sync_trans+0x44>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    13d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    13d6:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    13d8:	2380      	movs	r3, #128	; 0x80
    13da:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    13dc:	f06f 0012 	mvn.w	r0, #18
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    13e0:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    13e2:	f013 0f03 	tst.w	r3, #3
    13e6:	d0fb      	beq.n	13e0 <_spi_m_sync_trans+0x80>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    13e8:	2303      	movs	r3, #3
    13ea:	7623      	strb	r3, [r4, #24]
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
    13ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    13f0:	4293      	cmp	r3, r2
    13f2:	d8de      	bhi.n	13b2 <_spi_m_sync_trans+0x52>
    13f4:	e7f4      	b.n	13e0 <_spi_m_sync_trans+0x80>
		return ERR_BUSY;
    13f6:	f06f 0003 	mvn.w	r0, #3
    13fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_NOT_INITIALIZED;
    13fe:	f06f 0013 	mvn.w	r0, #19
    1402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ctrl.rxcnt >= ctrl.txcnt) {
    1406:	4290      	cmp	r0, r2
    1408:	d8cd      	bhi.n	13a6 <_spi_m_sync_trans+0x46>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    140a:	f013 0f01 	tst.w	r3, #1
    140e:	d0ca      	beq.n	13a6 <_spi_m_sync_trans+0x46>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    1410:	f8b9 1006 	ldrh.w	r1, [r9, #6]
	if (ctrl->txbuf) {
    1414:	f1b8 0f00 	cmp.w	r8, #0
    1418:	d00b      	beq.n	1432 <_spi_m_sync_trans+0xd2>
		data = *ctrl->txbuf++;
    141a:	f898 1000 	ldrb.w	r1, [r8]
		if (ctrl->char_size > 1) {
    141e:	2f01      	cmp	r7, #1
		data = *ctrl->txbuf++;
    1420:	bf91      	iteee	ls
    1422:	f108 0801 	addls.w	r8, r8, #1
			data |= (*ctrl->txbuf) << 8;
    1426:	f898 e001 	ldrbhi.w	lr, [r8, #1]
    142a:	ea41 210e 	orrhi.w	r1, r1, lr, lsl #8
			ctrl->txbuf++;
    142e:	f108 0802 	addhi.w	r8, r8, #2
	ctrl->txcnt++;
    1432:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    1434:	62a1      	str	r1, [r4, #40]	; 0x28
    1436:	e7b6      	b.n	13a6 <_spi_m_sync_trans+0x46>
    1438:	00002b90 	.word	0x00002b90
    143c:	00000ca1 	.word	0x00000ca1

00001440 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    1440:	4b03      	ldr	r3, [pc, #12]	; (1450 <_delay_init+0x10>)
    1442:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1446:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    1448:	2205      	movs	r2, #5
    144a:	601a      	str	r2, [r3, #0]
    144c:	4770      	bx	lr
    144e:	bf00      	nop
    1450:	e000e010 	.word	0xe000e010

00001454 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    1454:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    1456:	b303      	cbz	r3, 149a <_delay_cycles+0x46>
{
    1458:	b430      	push	{r4, r5}
    145a:	1e5d      	subs	r5, r3, #1
    145c:	b2ed      	uxtb	r5, r5
	while (n--) {
    145e:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    1460:	4a12      	ldr	r2, [pc, #72]	; (14ac <_delay_cycles+0x58>)
    1462:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    1466:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    1468:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    146a:	6813      	ldr	r3, [r2, #0]
    146c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1470:	d0fb      	beq.n	146a <_delay_cycles+0x16>
	while (n--) {
    1472:	3801      	subs	r0, #1
    1474:	b2c0      	uxtb	r0, r0
    1476:	28ff      	cmp	r0, #255	; 0xff
    1478:	d1f5      	bne.n	1466 <_delay_cycles+0x12>
    147a:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    147e:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    1482:	3101      	adds	r1, #1
    1484:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    1486:	4b09      	ldr	r3, [pc, #36]	; (14ac <_delay_cycles+0x58>)
    1488:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    148a:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    148c:	461a      	mov	r2, r3
    148e:	6813      	ldr	r3, [r2, #0]
    1490:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1494:	d0fb      	beq.n	148e <_delay_cycles+0x3a>
		;
}
    1496:	bc30      	pop	{r4, r5}
    1498:	4770      	bx	lr
	SysTick->LOAD = buf;
    149a:	4b04      	ldr	r3, [pc, #16]	; (14ac <_delay_cycles+0x58>)
    149c:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    149e:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    14a0:	461a      	mov	r2, r3
    14a2:	6813      	ldr	r3, [r2, #0]
    14a4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    14a8:	d0fb      	beq.n	14a2 <_delay_cycles+0x4e>
    14aa:	4770      	bx	lr
    14ac:	e000e010 	.word	0xe000e010

000014b0 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    14b0:	b570      	push	{r4, r5, r6, lr}
    14b2:	b088      	sub	sp, #32
    14b4:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    14b6:	466c      	mov	r4, sp
    14b8:	4d11      	ldr	r5, [pc, #68]	; (1500 <get_tc_index+0x50>)
    14ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    14bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    14be:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    14c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    14c6:	9b00      	ldr	r3, [sp, #0]
    14c8:	42b3      	cmp	r3, r6
    14ca:	d013      	beq.n	14f4 <get_tc_index+0x44>
    14cc:	4630      	mov	r0, r6
    14ce:	aa01      	add	r2, sp, #4
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    14d0:	2301      	movs	r3, #1
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    14d2:	f852 1b04 	ldr.w	r1, [r2], #4
    14d6:	4281      	cmp	r1, r0
    14d8:	d00d      	beq.n	14f6 <get_tc_index+0x46>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    14da:	3301      	adds	r3, #1
    14dc:	2b08      	cmp	r3, #8
    14de:	d1f8      	bne.n	14d2 <get_tc_index+0x22>
	ASSERT(false);
    14e0:	f44f 729e 	mov.w	r2, #316	; 0x13c
    14e4:	4907      	ldr	r1, [pc, #28]	; (1504 <get_tc_index+0x54>)
    14e6:	2000      	movs	r0, #0
    14e8:	4b07      	ldr	r3, [pc, #28]	; (1508 <get_tc_index+0x58>)
    14ea:	4798      	blx	r3
	return -1;
    14ec:	f04f 30ff 	mov.w	r0, #4294967295
}
    14f0:	b008      	add	sp, #32
    14f2:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    14f4:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    14f6:	b2db      	uxtb	r3, r3
    14f8:	2b07      	cmp	r3, #7
    14fa:	d1f1      	bne.n	14e0 <get_tc_index+0x30>
			return i;
    14fc:	2000      	movs	r0, #0
    14fe:	e7f7      	b.n	14f0 <get_tc_index+0x40>
    1500:	00002bac 	.word	0x00002bac
    1504:	00002be0 	.word	0x00002be0
    1508:	00000ca1 	.word	0x00000ca1

0000150c <_timer_init>:
{
    150c:	b570      	push	{r4, r5, r6, lr}
    150e:	4606      	mov	r6, r0
    1510:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    1512:	4608      	mov	r0, r1
    1514:	4b60      	ldr	r3, [pc, #384]	; (1698 <_timer_init+0x18c>)
    1516:	4798      	blx	r3
    1518:	4605      	mov	r5, r0
	device->hw = hw;
    151a:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    151c:	228d      	movs	r2, #141	; 0x8d
    151e:	495f      	ldr	r1, [pc, #380]	; (169c <_timer_init+0x190>)
    1520:	2001      	movs	r0, #1
    1522:	4b5f      	ldr	r3, [pc, #380]	; (16a0 <_timer_init+0x194>)
    1524:	4798      	blx	r3
	};
}

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    1526:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    1528:	f013 0f01 	tst.w	r3, #1
    152c:	d119      	bne.n	1562 <_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    152e:	6923      	ldr	r3, [r4, #16]
    1530:	f013 0f03 	tst.w	r3, #3
    1534:	d1fb      	bne.n	152e <_timer_init+0x22>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1536:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    1538:	f013 0f02 	tst.w	r3, #2
    153c:	d00b      	beq.n	1556 <_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    153e:	6823      	ldr	r3, [r4, #0]
    1540:	f023 0302 	bic.w	r3, r3, #2
    1544:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1546:	6923      	ldr	r3, [r4, #16]
    1548:	f013 0f03 	tst.w	r3, #3
    154c:	d1fb      	bne.n	1546 <_timer_init+0x3a>
    154e:	6923      	ldr	r3, [r4, #16]
    1550:	f013 0f02 	tst.w	r3, #2
    1554:	d1fb      	bne.n	154e <_timer_init+0x42>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1556:	2301      	movs	r3, #1
    1558:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    155a:	6923      	ldr	r3, [r4, #16]
    155c:	f013 0f03 	tst.w	r3, #3
    1560:	d1fb      	bne.n	155a <_timer_init+0x4e>
    1562:	6923      	ldr	r3, [r4, #16]
    1564:	f013 0f01 	tst.w	r3, #1
    1568:	d1fb      	bne.n	1562 <_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    156a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    156e:	4a4d      	ldr	r2, [pc, #308]	; (16a4 <_timer_init+0x198>)
    1570:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1574:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1576:	6022      	str	r2, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1578:	6923      	ldr	r3, [r4, #16]
    157a:	f013 0f03 	tst.w	r3, #3
    157e:	d1fb      	bne.n	1578 <_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    1580:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1584:	4947      	ldr	r1, [pc, #284]	; (16a4 <_timer_init+0x198>)
    1586:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    158a:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    158e:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    1590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    1592:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    1594:	2301      	movs	r3, #1
    1596:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1598:	f002 020c 	and.w	r2, r2, #12
    159c:	2a08      	cmp	r2, #8
    159e:	d048      	beq.n	1632 <_timer_init+0x126>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    15a0:	2a00      	cmp	r2, #0
    15a2:	d158      	bne.n	1656 <_timer_init+0x14a>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    15a4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    15a8:	4a3e      	ldr	r2, [pc, #248]	; (16a4 <_timer_init+0x198>)
    15aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    15ae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    15b0:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    15b2:	6923      	ldr	r3, [r4, #16]
    15b4:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    15b8:	d1fb      	bne.n	15b2 <_timer_init+0xa6>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    15ba:	2300      	movs	r3, #0
    15bc:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    15be:	6923      	ldr	r3, [r4, #16]
    15c0:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    15c4:	d1fb      	bne.n	15be <_timer_init+0xb2>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    15c6:	2301      	movs	r3, #1
    15c8:	7263      	strb	r3, [r4, #9]
	if (hw == TC7) {
    15ca:	4b37      	ldr	r3, [pc, #220]	; (16a8 <_timer_init+0x19c>)
    15cc:	429c      	cmp	r4, r3
		_tc7_dev = (struct _timer_device *)dev;
    15ce:	bf04      	itt	eq
    15d0:	4b36      	ldreq	r3, [pc, #216]	; (16ac <_timer_init+0x1a0>)
    15d2:	601e      	streq	r6, [r3, #0]
	NVIC_DisableIRQ(_tcs[i].irq);
    15d4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    15d8:	4a32      	ldr	r2, [pc, #200]	; (16a4 <_timer_init+0x198>)
    15da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    15de:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    15e2:	2b00      	cmp	r3, #0
    15e4:	db23      	blt.n	162e <_timer_init+0x122>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    15e6:	095a      	lsrs	r2, r3, #5
    15e8:	f003 031f 	and.w	r3, r3, #31
    15ec:	2101      	movs	r1, #1
    15ee:	fa01 f303 	lsl.w	r3, r1, r3
    15f2:	3220      	adds	r2, #32
    15f4:	492e      	ldr	r1, [pc, #184]	; (16b0 <_timer_init+0x1a4>)
    15f6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    15fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    15fe:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    1602:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    1606:	4b27      	ldr	r3, [pc, #156]	; (16a4 <_timer_init+0x198>)
    1608:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    160c:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    1610:	2b00      	cmp	r3, #0
    1612:	db0c      	blt.n	162e <_timer_init+0x122>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1614:	0959      	lsrs	r1, r3, #5
    1616:	f003 031f 	and.w	r3, r3, #31
    161a:	2201      	movs	r2, #1
    161c:	fa02 f303 	lsl.w	r3, r2, r3
    1620:	4a23      	ldr	r2, [pc, #140]	; (16b0 <_timer_init+0x1a4>)
    1622:	f101 0060 	add.w	r0, r1, #96	; 0x60
    1626:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    162a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    162e:	2000      	movs	r0, #0
    1630:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    1632:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1636:	4a1b      	ldr	r2, [pc, #108]	; (16a4 <_timer_init+0x198>)
    1638:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    163c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    163e:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1640:	6923      	ldr	r3, [r4, #16]
    1642:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1646:	d1fb      	bne.n	1640 <_timer_init+0x134>
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1648:	2300      	movs	r3, #0
    164a:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    164c:	6923      	ldr	r3, [r4, #16]
    164e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1652:	d1fb      	bne.n	164c <_timer_init+0x140>
    1654:	e7b7      	b.n	15c6 <_timer_init+0xba>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    1656:	2a04      	cmp	r2, #4
    1658:	d1b5      	bne.n	15c6 <_timer_init+0xba>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    165a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    165e:	4a11      	ldr	r2, [pc, #68]	; (16a4 <_timer_init+0x198>)
    1660:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1664:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    1668:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    166a:	6923      	ldr	r3, [r4, #16]
    166c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1670:	d1fb      	bne.n	166a <_timer_init+0x15e>
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    1672:	2300      	movs	r3, #0
    1674:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1676:	6923      	ldr	r3, [r4, #16]
    1678:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    167c:	d1fb      	bne.n	1676 <_timer_init+0x16a>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    167e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1682:	4a08      	ldr	r2, [pc, #32]	; (16a4 <_timer_init+0x198>)
    1684:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1688:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	((Tc *)hw)->COUNT8.PER.reg = data;
    168c:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    168e:	6923      	ldr	r3, [r4, #16]
    1690:	f013 0f20 	tst.w	r3, #32
    1694:	d1fb      	bne.n	168e <_timer_init+0x182>
    1696:	e796      	b.n	15c6 <_timer_init+0xba>
    1698:	000014b1 	.word	0x000014b1
    169c:	00002be0 	.word	0x00002be0
    16a0:	00000ca1 	.word	0x00000ca1
    16a4:	00002bac 	.word	0x00002bac
    16a8:	43001800 	.word	0x43001800
    16ac:	2000003c 	.word	0x2000003c
    16b0:	e000e100 	.word	0xe000e100

000016b4 <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    16b4:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    16b6:	6813      	ldr	r3, [r2, #0]
    16b8:	f043 0302 	orr.w	r3, r3, #2
    16bc:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    16be:	6913      	ldr	r3, [r2, #16]
    16c0:	f013 0f03 	tst.w	r3, #3
    16c4:	d1fb      	bne.n	16be <_timer_start+0xa>
}
    16c6:	4770      	bx	lr

000016c8 <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    16c8:	68c2      	ldr	r2, [r0, #12]
    16ca:	6913      	ldr	r3, [r2, #16]
    16cc:	f013 0f03 	tst.w	r3, #3
    16d0:	d1fb      	bne.n	16ca <_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    16d2:	6810      	ldr	r0, [r2, #0]
}
    16d4:	f3c0 0040 	ubfx	r0, r0, #1, #1
    16d8:	4770      	bx	lr

000016da <_tc_get_timer>:
}
    16da:	2000      	movs	r0, #0
    16dc:	4770      	bx	lr
	...

000016e0 <_timer_set_irq>:
{
    16e0:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    16e2:	68c0      	ldr	r0, [r0, #12]
    16e4:	4b09      	ldr	r3, [pc, #36]	; (170c <_timer_set_irq+0x2c>)
    16e6:	4798      	blx	r3
    16e8:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    16ea:	f240 120f 	movw	r2, #271	; 0x10f
    16ee:	4908      	ldr	r1, [pc, #32]	; (1710 <_timer_set_irq+0x30>)
    16f0:	2001      	movs	r0, #1
    16f2:	4b08      	ldr	r3, [pc, #32]	; (1714 <_timer_set_irq+0x34>)
    16f4:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    16f6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    16fa:	4b07      	ldr	r3, [pc, #28]	; (1718 <_timer_set_irq+0x38>)
    16fc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1700:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    1704:	4b05      	ldr	r3, [pc, #20]	; (171c <_timer_set_irq+0x3c>)
    1706:	4798      	blx	r3
    1708:	bd10      	pop	{r4, pc}
    170a:	bf00      	nop
    170c:	000014b1 	.word	0x000014b1
    1710:	00002be0 	.word	0x00002be0
    1714:	00000ca1 	.word	0x00000ca1
    1718:	00002bac 	.word	0x00002bac
    171c:	00000d09 	.word	0x00000d09

00001720 <TC7_Handler>:
{
    1720:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc7_dev);
    1722:	4b06      	ldr	r3, [pc, #24]	; (173c <TC7_Handler+0x1c>)
    1724:	6818      	ldr	r0, [r3, #0]
	void *const hw = device->hw;
    1726:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    1728:	7a9a      	ldrb	r2, [r3, #10]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    172a:	f012 0f01 	tst.w	r2, #1
    172e:	d100      	bne.n	1732 <TC7_Handler+0x12>
    1730:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    1732:	2201      	movs	r2, #1
    1734:	729a      	strb	r2, [r3, #10]
		device->timer_cb.period_expired(device);
    1736:	6803      	ldr	r3, [r0, #0]
    1738:	4798      	blx	r3
}
    173a:	e7f9      	b.n	1730 <TC7_Handler+0x10>
    173c:	2000003c 	.word	0x2000003c

00001740 <TIMER_0_task1_cb>:
	timer_add_task(&TIMER_0, &TIMER_0_task1);
	timer_start(&TIMER_0);
}

static void TIMER_0_task1_cb(const struct timer_task *const timer_task)
{
    1740:	4770      	bx	lr
	...

00001744 <USART_init>:
void USART_init(void){
    1744:	b510      	push	{r4, lr}
	usart_sync_get_io_descriptor(&USART_0, &usart);
    1746:	4c04      	ldr	r4, [pc, #16]	; (1758 <USART_init+0x14>)
    1748:	4904      	ldr	r1, [pc, #16]	; (175c <USART_init+0x18>)
    174a:	4620      	mov	r0, r4
    174c:	4b04      	ldr	r3, [pc, #16]	; (1760 <USART_init+0x1c>)
    174e:	4798      	blx	r3
	usart_sync_enable(&USART_0);
    1750:	4620      	mov	r0, r4
    1752:	4b04      	ldr	r3, [pc, #16]	; (1764 <USART_init+0x20>)
    1754:	4798      	blx	r3
    1756:	bd10      	pop	{r4, pc}
    1758:	20000060 	.word	0x20000060
    175c:	2000009c 	.word	0x2000009c
    1760:	00000c79 	.word	0x00000c79
    1764:	00000c4d 	.word	0x00000c4d

00001768 <Timer_init>:
void Timer_init(void){
    1768:	b510      	push	{r4, lr}
	TIMER_0_task1.interval = 100;
    176a:	4907      	ldr	r1, [pc, #28]	; (1788 <Timer_init+0x20>)
    176c:	2364      	movs	r3, #100	; 0x64
    176e:	608b      	str	r3, [r1, #8]
	TIMER_0_task1.cb = TIMER_0_task1_cb;
    1770:	4b06      	ldr	r3, [pc, #24]	; (178c <Timer_init+0x24>)
    1772:	60cb      	str	r3, [r1, #12]
	TIMER_0_task1.mode = TIMER_TASK_REPEAT;
    1774:	2301      	movs	r3, #1
    1776:	740b      	strb	r3, [r1, #16]
	timer_add_task(&TIMER_0, &TIMER_0_task1);
    1778:	4c05      	ldr	r4, [pc, #20]	; (1790 <Timer_init+0x28>)
    177a:	4620      	mov	r0, r4
    177c:	4b05      	ldr	r3, [pc, #20]	; (1794 <Timer_init+0x2c>)
    177e:	4798      	blx	r3
	timer_start(&TIMER_0);
    1780:	4620      	mov	r0, r4
    1782:	4b05      	ldr	r3, [pc, #20]	; (1798 <Timer_init+0x30>)
    1784:	4798      	blx	r3
    1786:	bd10      	pop	{r4, pc}
    1788:	200000a4 	.word	0x200000a4
    178c:	00001741 	.word	0x00001741
    1790:	2000006c 	.word	0x2000006c
    1794:	00000a89 	.word	0x00000a89
    1798:	00000a4d 	.word	0x00000a4d

0000179c <main>:
{
    179c:	b500      	push	{lr}
    179e:	b083      	sub	sp, #12
	atmel_start_init();
    17a0:	4b10      	ldr	r3, [pc, #64]	; (17e4 <main+0x48>)
    17a2:	4798      	blx	r3
	USART_init();
    17a4:	4b10      	ldr	r3, [pc, #64]	; (17e8 <main+0x4c>)
    17a6:	4798      	blx	r3
	Timer_init();
    17a8:	4b10      	ldr	r3, [pc, #64]	; (17ec <main+0x50>)
    17aa:	4798      	blx	r3
	io_write(usart, welcome_USART, 13);
    17ac:	220d      	movs	r2, #13
    17ae:	4910      	ldr	r1, [pc, #64]	; (17f0 <main+0x54>)
    17b0:	4b10      	ldr	r3, [pc, #64]	; (17f4 <main+0x58>)
    17b2:	6818      	ldr	r0, [r3, #0]
    17b4:	4b10      	ldr	r3, [pc, #64]	; (17f8 <main+0x5c>)
    17b6:	4798      	blx	r3
	SX126x_Init();
    17b8:	4b10      	ldr	r3, [pc, #64]	; (17fc <main+0x60>)
    17ba:	4798      	blx	r3
	set_rx(868000000, LORA_BW_500, LORA_SF7, LORA_CR_4_5, LORA_PACKET_VARIABLE_LENGTH, 0x20);
    17bc:	2320      	movs	r3, #32
    17be:	9301      	str	r3, [sp, #4]
    17c0:	2400      	movs	r4, #0
    17c2:	9400      	str	r4, [sp, #0]
    17c4:	2301      	movs	r3, #1
    17c6:	2207      	movs	r2, #7
    17c8:	2106      	movs	r1, #6
    17ca:	480d      	ldr	r0, [pc, #52]	; (1800 <main+0x64>)
    17cc:	4d0d      	ldr	r5, [pc, #52]	; (1804 <main+0x68>)
    17ce:	47a8      	blx	r5
    SX126x_SetDioIrqParams(2, 2, 0, 0);
    17d0:	4623      	mov	r3, r4
    17d2:	4622      	mov	r2, r4
    17d4:	2102      	movs	r1, #2
    17d6:	4608      	mov	r0, r1
    17d8:	4d0b      	ldr	r5, [pc, #44]	; (1808 <main+0x6c>)
    17da:	47a8      	blx	r5
	SX126x_SetRx(0);
    17dc:	4620      	mov	r0, r4
    17de:	4b0b      	ldr	r3, [pc, #44]	; (180c <main+0x70>)
    17e0:	4798      	blx	r3
    17e2:	e7fe      	b.n	17e2 <main+0x46>
    17e4:	000002d1 	.word	0x000002d1
    17e8:	00001745 	.word	0x00001745
    17ec:	00001769 	.word	0x00001769
    17f0:	20000000 	.word	0x20000000
    17f4:	2000009c 	.word	0x2000009c
    17f8:	000007ad 	.word	0x000007ad
    17fc:	000019f1 	.word	0x000019f1
    1800:	33bca100 	.word	0x33bca100
    1804:	00001f39 	.word	0x00001f39
    1808:	00001b91 	.word	0x00001b91
    180c:	00001acd 	.word	0x00001acd

00001810 <DIO1_IRQ>:
	ext_irq_register(PIN_PC00, DIO1_IRQ);
    // Possibility to add DIO2 and DIO3 interrupts
}

void DIO1_IRQ(void)
{
    1810:	b570      	push	{r4, r5, r6, lr}
    1812:	b084      	sub	sp, #16
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    1814:	2402      	movs	r4, #2
    1816:	4b0f      	ldr	r3, [pc, #60]	; (1854 <DIO1_IRQ+0x44>)
    1818:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
	gpio_toggle_pin_level(LED);
    // Clear the interrupt in the radio
    //SX126x_ClearIrqStatus( IRQ_RADIO_ALL );
    // Do something in the ISR
	uint8_t tx_done_see[10] = "Received!\n";
    181c:	4a0e      	ldr	r2, [pc, #56]	; (1858 <DIO1_IRQ+0x48>)
    181e:	ab01      	add	r3, sp, #4
    1820:	ca07      	ldmia	r2, {r0, r1, r2}
    1822:	c303      	stmia	r3!, {r0, r1}
    1824:	801a      	strh	r2, [r3, #0]
	io_write(usart, tx_done_see, 10);
    1826:	4e0d      	ldr	r6, [pc, #52]	; (185c <DIO1_IRQ+0x4c>)
    1828:	220a      	movs	r2, #10
    182a:	a901      	add	r1, sp, #4
    182c:	6830      	ldr	r0, [r6, #0]
    182e:	4d0c      	ldr	r5, [pc, #48]	; (1860 <DIO1_IRQ+0x50>)
    1830:	47a8      	blx	r5
	
	uint8_t buffer_g[4];

	SX126x_GetPayload(buffer_g, 4, 4);
    1832:	2204      	movs	r2, #4
    1834:	4611      	mov	r1, r2
    1836:	4668      	mov	r0, sp
    1838:	4b0a      	ldr	r3, [pc, #40]	; (1864 <DIO1_IRQ+0x54>)
    183a:	4798      	blx	r3
	
	io_write(usart, buffer_g, 4);
    183c:	2204      	movs	r2, #4
    183e:	4669      	mov	r1, sp
    1840:	6830      	ldr	r0, [r6, #0]
    1842:	47a8      	blx	r5
	SX126x_ClearIrqStatus(2);
    1844:	4620      	mov	r0, r4
    1846:	4b08      	ldr	r3, [pc, #32]	; (1868 <DIO1_IRQ+0x58>)
    1848:	4798      	blx	r3
	//delay_ms(10);
	//SX126x_SendPayload((uint8_t *) "PONG", 4, 0); // Be careful timeout
	//delay_ms(5);
	SX126x_SetRx(0);
    184a:	2000      	movs	r0, #0
    184c:	4b07      	ldr	r3, [pc, #28]	; (186c <DIO1_IRQ+0x5c>)
    184e:	4798      	blx	r3

    1850:	b004      	add	sp, #16
    1852:	bd70      	pop	{r4, r5, r6, pc}
    1854:	41008000 	.word	0x41008000
    1858:	00002bf4 	.word	0x00002bf4
    185c:	2000009c 	.word	0x2000009c
    1860:	000007ad 	.word	0x000007ad
    1864:	00001ed5 	.word	0x00001ed5
    1868:	00001f15 	.word	0x00001f15
    186c:	00001acd 	.word	0x00001acd

00001870 <read_pin>:
uint8_t read_pin(const uint8_t pin){
    1870:	b530      	push	{r4, r5, lr}
    1872:	b083      	sub	sp, #12
    1874:	4605      	mov	r5, r0
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    1876:	a801      	add	r0, sp, #4
    1878:	4b0c      	ldr	r3, [pc, #48]	; (18ac <read_pin+0x3c>)
    187a:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    187c:	096b      	lsrs	r3, r5, #5
    187e:	490c      	ldr	r1, [pc, #48]	; (18b0 <read_pin+0x40>)
    1880:	01db      	lsls	r3, r3, #7
    1882:	18ca      	adds	r2, r1, r3
    1884:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1886:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1888:	6914      	ldr	r4, [r2, #16]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    188a:	405c      	eors	r4, r3
    188c:	400c      	ands	r4, r1
    188e:	405c      	eors	r4, r3

	CRITICAL_SECTION_LEAVE();
    1890:	a801      	add	r0, sp, #4
    1892:	4b08      	ldr	r3, [pc, #32]	; (18b4 <read_pin+0x44>)
    1894:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    1896:	f005 051f 	and.w	r5, r5, #31
    189a:	2301      	movs	r3, #1
    189c:	fa03 f505 	lsl.w	r5, r3, r5
    18a0:	4225      	tst	r5, r4
}
    18a2:	bf14      	ite	ne
    18a4:	4618      	movne	r0, r3
    18a6:	2000      	moveq	r0, #0
    18a8:	b003      	add	sp, #12
    18aa:	bd30      	pop	{r4, r5, pc}
    18ac:	000006c1 	.word	0x000006c1
    18b0:	41008000 	.word	0x41008000
    18b4:	000006cf 	.word	0x000006cf

000018b8 <write_pin>:
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    18b8:	0943      	lsrs	r3, r0, #5
    18ba:	f000 001f 	and.w	r0, r0, #31
    18be:	2201      	movs	r2, #1
    18c0:	fa02 f000 	lsl.w	r0, r2, r0
	if (level) {
    18c4:	b931      	cbnz	r1, 18d4 <write_pin+0x1c>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    18c6:	01db      	lsls	r3, r3, #7
    18c8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    18cc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    18d0:	6158      	str	r0, [r3, #20]
    18d2:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    18d4:	01db      	lsls	r3, r3, #7
    18d6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    18da:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    18de:	6198      	str	r0, [r3, #24]
    18e0:	4770      	bx	lr
	...

000018e4 <SPI_init>:
{
    18e4:	b510      	push	{r4, lr}
    int32_t error_spi = spi_m_sync_get_io_descriptor(&SPI_0, &spi);
    18e6:	4906      	ldr	r1, [pc, #24]	; (1900 <SPI_init+0x1c>)
    18e8:	4806      	ldr	r0, [pc, #24]	; (1904 <SPI_init+0x20>)
    18ea:	4b07      	ldr	r3, [pc, #28]	; (1908 <SPI_init+0x24>)
    18ec:	4798      	blx	r3
	if(error_spi != ERR_NONE){
    18ee:	4604      	mov	r4, r0
    18f0:	b108      	cbz	r0, 18f6 <SPI_init+0x12>
}
    18f2:	4620      	mov	r0, r4
    18f4:	bd10      	pop	{r4, pc}
	spi_m_sync_enable(&SPI_0);
    18f6:	4803      	ldr	r0, [pc, #12]	; (1904 <SPI_init+0x20>)
    18f8:	4b04      	ldr	r3, [pc, #16]	; (190c <SPI_init+0x28>)
    18fa:	4798      	blx	r3
    return ERR_NONE;
    18fc:	e7f9      	b.n	18f2 <SPI_init+0xe>
    18fe:	bf00      	nop
    1900:	200000bc 	.word	0x200000bc
    1904:	20000048 	.word	0x20000048
    1908:	0000090d 	.word	0x0000090d
    190c:	0000082d 	.word	0x0000082d

00001910 <SendSpi>:
int32_t SendSpi(uint8_t *data, uint8_t len){
    1910:	b508      	push	{r3, lr}
    return io_write(spi, data, len);
    1912:	460a      	mov	r2, r1
    1914:	4601      	mov	r1, r0
    1916:	4b02      	ldr	r3, [pc, #8]	; (1920 <SendSpi+0x10>)
    1918:	6818      	ldr	r0, [r3, #0]
    191a:	4b02      	ldr	r3, [pc, #8]	; (1924 <SendSpi+0x14>)
    191c:	4798      	blx	r3
}
    191e:	bd08      	pop	{r3, pc}
    1920:	200000bc 	.word	0x200000bc
    1924:	000007ad 	.word	0x000007ad

00001928 <ReadSpi>:
int32_t ReadSpi(uint8_t *rx_data, uint8_t len){	
    1928:	b5b0      	push	{r4, r5, r7, lr}
    192a:	b084      	sub	sp, #16
    192c:	af00      	add	r7, sp, #0
    uint8_t noop[len];
    192e:	1dcb      	adds	r3, r1, #7
    1930:	f023 0307 	bic.w	r3, r3, #7
    1934:	ebad 0d03 	sub.w	sp, sp, r3
    1938:	466d      	mov	r5, sp
    for(int i=0; i<len; i++){
    193a:	b131      	cbz	r1, 194a <ReadSpi+0x22>
    193c:	466b      	mov	r3, sp
    193e:	186c      	adds	r4, r5, r1
        noop[i] = 0x00; // Fill with noop, 0x00
    1940:	2200      	movs	r2, #0
    1942:	f803 2b01 	strb.w	r2, [r3], #1
    for(int i=0; i<len; i++){
    1946:	42a3      	cmp	r3, r4
    1948:	d1fb      	bne.n	1942 <ReadSpi+0x1a>
    temp.txbuf = noop;
    194a:	607d      	str	r5, [r7, #4]
    temp.rxbuf = rx_data;
    194c:	60b8      	str	r0, [r7, #8]
    temp.size  = len;
    194e:	60f9      	str	r1, [r7, #12]
    return spi_m_sync_transfer(&SPI_0, &temp);
    1950:	1d39      	adds	r1, r7, #4
    1952:	4803      	ldr	r0, [pc, #12]	; (1960 <ReadSpi+0x38>)
    1954:	4b03      	ldr	r3, [pc, #12]	; (1964 <ReadSpi+0x3c>)
    1956:	4798      	blx	r3
}
    1958:	3710      	adds	r7, #16
    195a:	46bd      	mov	sp, r7
    195c:	bdb0      	pop	{r4, r5, r7, pc}
    195e:	bf00      	nop
    1960:	20000048 	.word	0x20000048
    1964:	00000855 	.word	0x00000855

00001968 <IRQ_Init>:
{
    1968:	b508      	push	{r3, lr}
	ext_irq_register(PIN_PC00, DIO1_IRQ);
    196a:	4902      	ldr	r1, [pc, #8]	; (1974 <IRQ_Init+0xc>)
    196c:	2040      	movs	r0, #64	; 0x40
    196e:	4b02      	ldr	r3, [pc, #8]	; (1978 <IRQ_Init+0x10>)
    1970:	4798      	blx	r3
    1972:	bd08      	pop	{r3, pc}
    1974:	00001811 	.word	0x00001811
    1978:	0000076d 	.word	0x0000076d

0000197c <SX126x_SetStandby>:
                SX126xHal_WriteReg( REG_LR_SYNCWORD + 1, &priv_sync_l );
        #endif
}

void SX126x_SetStandby( RadioStandbyModes_t standbyConfig )
{
    197c:	b500      	push	{lr}
    197e:	b083      	sub	sp, #12
    1980:	a902      	add	r1, sp, #8
    1982:	f801 0d01 	strb.w	r0, [r1, #-1]!

    SX126xHal_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
    1986:	2201      	movs	r2, #1
    1988:	2080      	movs	r0, #128	; 0x80
    198a:	4b07      	ldr	r3, [pc, #28]	; (19a8 <SX126x_SetStandby+0x2c>)
    198c:	4798      	blx	r3
    if( standbyConfig == STDBY_RC )
    198e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1992:	b12b      	cbz	r3, 19a0 <SX126x_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    1994:	2202      	movs	r2, #2
    1996:	4b05      	ldr	r3, [pc, #20]	; (19ac <SX126x_SetStandby+0x30>)
    1998:	701a      	strb	r2, [r3, #0]
    }
}
    199a:	b003      	add	sp, #12
    199c:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_RC;
    19a0:	2201      	movs	r2, #1
    19a2:	4b02      	ldr	r3, [pc, #8]	; (19ac <SX126x_SetStandby+0x30>)
    19a4:	701a      	strb	r2, [r3, #0]
    19a6:	e7f8      	b.n	199a <SX126x_SetStandby+0x1e>
    19a8:	0000207d 	.word	0x0000207d
    19ac:	20000098 	.word	0x20000098

000019b0 <SX126x_SetDio2AsRfSwitchCtrl>:
{
    SX126xHal_WriteCommand( RADIO_CALIBRATE, &calibParam.Value, 1 );
}

void SX126x_SetDio2AsRfSwitchCtrl( uint8_t enable )
{
    19b0:	b500      	push	{lr}
    19b2:	b083      	sub	sp, #12
    19b4:	a902      	add	r1, sp, #8
    19b6:	f801 0d01 	strb.w	r0, [r1, #-1]!

    SX126xHal_WriteCommand( RADIO_SET_RFSWITCHMODE, &enable, 1 );
    19ba:	2201      	movs	r2, #1
    19bc:	209d      	movs	r0, #157	; 0x9d
    19be:	4b02      	ldr	r3, [pc, #8]	; (19c8 <SX126x_SetDio2AsRfSwitchCtrl+0x18>)
    19c0:	4798      	blx	r3
}
    19c2:	b003      	add	sp, #12
    19c4:	f85d fb04 	ldr.w	pc, [sp], #4
    19c8:	0000207d 	.word	0x0000207d

000019cc <SX126x_SetPacketType>:

void SX126x_SetPacketType( RadioPacketTypes_t packetType )
{
    19cc:	b500      	push	{lr}
    19ce:	b083      	sub	sp, #12
    19d0:	a902      	add	r1, sp, #8
    19d2:	f801 0d01 	strb.w	r0, [r1, #-1]!


    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
    19d6:	4b04      	ldr	r3, [pc, #16]	; (19e8 <SX126x_SetPacketType+0x1c>)
    19d8:	7018      	strb	r0, [r3, #0]
    SX126xHal_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
    19da:	2201      	movs	r2, #1
    19dc:	208a      	movs	r0, #138	; 0x8a
    19de:	4b03      	ldr	r3, [pc, #12]	; (19ec <SX126x_SetPacketType+0x20>)
    19e0:	4798      	blx	r3
}
    19e2:	b003      	add	sp, #12
    19e4:	f85d fb04 	ldr.w	pc, [sp], #4
    19e8:	200000a0 	.word	0x200000a0
    19ec:	0000207d 	.word	0x0000207d

000019f0 <SX126x_Init>:
void SX126x_Init( void ){
    19f0:	b510      	push	{r4, lr}
    19f2:	b082      	sub	sp, #8
        SX126xHal_SpiInit();
    19f4:	4b13      	ldr	r3, [pc, #76]	; (1a44 <SX126x_Init+0x54>)
    19f6:	4798      	blx	r3
        SX126xHal_Reset( );
    19f8:	4b13      	ldr	r3, [pc, #76]	; (1a48 <SX126x_Init+0x58>)
    19fa:	4798      	blx	r3
        SX126xHal_IoIrqInit();
    19fc:	4b13      	ldr	r3, [pc, #76]	; (1a4c <SX126x_Init+0x5c>)
    19fe:	4798      	blx	r3
        SX126xHal_Wakeup( );
    1a00:	4b13      	ldr	r3, [pc, #76]	; (1a50 <SX126x_Init+0x60>)
    1a02:	4798      	blx	r3
        SX126x_SetStandby( STDBY_RC );
    1a04:	2000      	movs	r0, #0
    1a06:	4b13      	ldr	r3, [pc, #76]	; (1a54 <SX126x_Init+0x64>)
    1a08:	4798      	blx	r3
        SX126xHal_AntSwOn( );
    1a0a:	4b13      	ldr	r3, [pc, #76]	; (1a58 <SX126x_Init+0x68>)
    1a0c:	4798      	blx	r3
        SX126x_SetDio2AsRfSwitchCtrl( true );
    1a0e:	2001      	movs	r0, #1
    1a10:	4b12      	ldr	r3, [pc, #72]	; (1a5c <SX126x_Init+0x6c>)
    1a12:	4798      	blx	r3
        OperatingMode = MODE_STDBY_RC;
    1a14:	2001      	movs	r0, #1
    1a16:	4b12      	ldr	r3, [pc, #72]	; (1a60 <SX126x_Init+0x70>)
    1a18:	7018      	strb	r0, [r3, #0]
        SX126x_SetPacketType( PACKET_TYPE_LORA );
    1a1a:	4b12      	ldr	r3, [pc, #72]	; (1a64 <SX126x_Init+0x74>)
    1a1c:	4798      	blx	r3
                uint8_t priv_sync_h = (( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF);
    1a1e:	2314      	movs	r3, #20
    1a20:	f88d 3007 	strb.w	r3, [sp, #7]
                uint8_t priv_sync_l = ( LORA_MAC_PRIVATE_SYNCWORD & 0xFF);
    1a24:	2324      	movs	r3, #36	; 0x24
    1a26:	f88d 3006 	strb.w	r3, [sp, #6]
                SX126xHal_WriteReg( REG_LR_SYNCWORD, &priv_sync_h );
    1a2a:	f10d 0107 	add.w	r1, sp, #7
    1a2e:	f44f 60e8 	mov.w	r0, #1856	; 0x740
    1a32:	4c0d      	ldr	r4, [pc, #52]	; (1a68 <SX126x_Init+0x78>)
    1a34:	47a0      	blx	r4
                SX126xHal_WriteReg( REG_LR_SYNCWORD + 1, &priv_sync_l );
    1a36:	f10d 0106 	add.w	r1, sp, #6
    1a3a:	f240 7041 	movw	r0, #1857	; 0x741
    1a3e:	47a0      	blx	r4
}
    1a40:	b002      	add	sp, #8
    1a42:	bd10      	pop	{r4, pc}
    1a44:	00001fb9 	.word	0x00001fb9
    1a48:	00001fe9 	.word	0x00001fe9
    1a4c:	00001fdd 	.word	0x00001fdd
    1a50:	00002029 	.word	0x00002029
    1a54:	0000197d 	.word	0x0000197d
    1a58:	00002295 	.word	0x00002295
    1a5c:	000019b1 	.word	0x000019b1
    1a60:	20000098 	.word	0x20000098
    1a64:	000019cd 	.word	0x000019cd
    1a68:	00002191 	.word	0x00002191

00001a6c <SX126x_SetCrcSeed>:
    SX126xHal_WriteRegister( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
    return 0;
}

void SX126x_SetCrcSeed( uint16_t seed )
{
    1a6c:	b500      	push	{lr}
    1a6e:	b083      	sub	sp, #12
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
    1a70:	0a03      	lsrs	r3, r0, #8
    1a72:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
    1a76:	f88d 0005 	strb.w	r0, [sp, #5]
}


RadioPacketTypes_t SX126x_GetPacketType( void )
{
    return PacketType;
    1a7a:	4b06      	ldr	r3, [pc, #24]	; (1a94 <SX126x_SetCrcSeed+0x28>)
    switch( SX126x_GetPacketType( ) )
    1a7c:	781b      	ldrb	r3, [r3, #0]
    1a7e:	b113      	cbz	r3, 1a86 <SX126x_SetCrcSeed+0x1a>
}
    1a80:	b003      	add	sp, #12
    1a82:	f85d fb04 	ldr.w	pc, [sp], #4
            SX126xHal_WriteRegister( REG_LR_CRCSEEDBASEADDR, buf, 2 );
    1a86:	2202      	movs	r2, #2
    1a88:	a901      	add	r1, sp, #4
    1a8a:	f240 60bc 	movw	r0, #1724	; 0x6bc
    1a8e:	4b02      	ldr	r3, [pc, #8]	; (1a98 <SX126x_SetCrcSeed+0x2c>)
    1a90:	4798      	blx	r3
}
    1a92:	e7f5      	b.n	1a80 <SX126x_SetCrcSeed+0x14>
    1a94:	200000a0 	.word	0x200000a0
    1a98:	00002129 	.word	0x00002129

00001a9c <SX126x_SetCrcPolynomial>:
{
    1a9c:	b500      	push	{lr}
    1a9e:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
    1aa0:	0a03      	lsrs	r3, r0, #8
    1aa2:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
    1aa6:	f88d 0005 	strb.w	r0, [sp, #5]
    return PacketType;
    1aaa:	4b06      	ldr	r3, [pc, #24]	; (1ac4 <SX126x_SetCrcPolynomial+0x28>)
    switch( SX126x_GetPacketType( ) )
    1aac:	781b      	ldrb	r3, [r3, #0]
    1aae:	b113      	cbz	r3, 1ab6 <SX126x_SetCrcPolynomial+0x1a>
}
    1ab0:	b003      	add	sp, #12
    1ab2:	f85d fb04 	ldr.w	pc, [sp], #4
            SX126xHal_WriteRegister( REG_LR_CRCPOLYBASEADDR, buf, 2 );
    1ab6:	2202      	movs	r2, #2
    1ab8:	a901      	add	r1, sp, #4
    1aba:	f240 60be 	movw	r0, #1726	; 0x6be
    1abe:	4b02      	ldr	r3, [pc, #8]	; (1ac8 <SX126x_SetCrcPolynomial+0x2c>)
    1ac0:	4798      	blx	r3
}
    1ac2:	e7f5      	b.n	1ab0 <SX126x_SetCrcPolynomial+0x14>
    1ac4:	200000a0 	.word	0x200000a0
    1ac8:	00002129 	.word	0x00002129

00001acc <SX126x_SetRx>:
{
    1acc:	b500      	push	{lr}
    1ace:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
    1ad0:	2205      	movs	r2, #5
    1ad2:	4b09      	ldr	r3, [pc, #36]	; (1af8 <SX126x_SetRx+0x2c>)
    1ad4:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
    1ad6:	0c03      	lsrs	r3, r0, #16
    1ad8:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
    1adc:	0a03      	lsrs	r3, r0, #8
    1ade:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
    1ae2:	f88d 0006 	strb.w	r0, [sp, #6]
    SX126xHal_WriteCommand( RADIO_SET_RX, buf, 3 );
    1ae6:	2203      	movs	r2, #3
    1ae8:	a901      	add	r1, sp, #4
    1aea:	2082      	movs	r0, #130	; 0x82
    1aec:	4b03      	ldr	r3, [pc, #12]	; (1afc <SX126x_SetRx+0x30>)
    1aee:	4798      	blx	r3
}
    1af0:	b003      	add	sp, #12
    1af2:	f85d fb04 	ldr.w	pc, [sp], #4
    1af6:	bf00      	nop
    1af8:	20000098 	.word	0x20000098
    1afc:	0000207d 	.word	0x0000207d

00001b00 <SX126x_CalibrateImage>:
{
    1b00:	b500      	push	{lr}
    1b02:	b083      	sub	sp, #12
    if( freq > 900000000 )
    1b04:	4b1c      	ldr	r3, [pc, #112]	; (1b78 <SX126x_CalibrateImage+0x78>)
    1b06:	4298      	cmp	r0, r3
    1b08:	d812      	bhi.n	1b30 <SX126x_CalibrateImage+0x30>
    else if( freq > 850000000 )
    1b0a:	4b1c      	ldr	r3, [pc, #112]	; (1b7c <SX126x_CalibrateImage+0x7c>)
    1b0c:	4298      	cmp	r0, r3
    1b0e:	d81d      	bhi.n	1b4c <SX126x_CalibrateImage+0x4c>
    else if( freq > 770000000 )
    1b10:	4b1b      	ldr	r3, [pc, #108]	; (1b80 <SX126x_CalibrateImage+0x80>)
    1b12:	4298      	cmp	r0, r3
    1b14:	d821      	bhi.n	1b5a <SX126x_CalibrateImage+0x5a>
    else if( freq > 460000000 )
    1b16:	4b1b      	ldr	r3, [pc, #108]	; (1b84 <SX126x_CalibrateImage+0x84>)
    1b18:	4298      	cmp	r0, r3
    1b1a:	d825      	bhi.n	1b68 <SX126x_CalibrateImage+0x68>
    else if( freq > 425000000 )
    1b1c:	4b1a      	ldr	r3, [pc, #104]	; (1b88 <SX126x_CalibrateImage+0x88>)
    1b1e:	4298      	cmp	r0, r3
    1b20:	d90c      	bls.n	1b3c <SX126x_CalibrateImage+0x3c>
        calFreq[0] = 0x6B;
    1b22:	236b      	movs	r3, #107	; 0x6b
    1b24:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
    1b28:	236f      	movs	r3, #111	; 0x6f
    1b2a:	f88d 3005 	strb.w	r3, [sp, #5]
    1b2e:	e005      	b.n	1b3c <SX126x_CalibrateImage+0x3c>
        calFreq[0] = 0xE1;
    1b30:	23e1      	movs	r3, #225	; 0xe1
    1b32:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
    1b36:	23e9      	movs	r3, #233	; 0xe9
    1b38:	f88d 3005 	strb.w	r3, [sp, #5]
    SX126xHal_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
    1b3c:	2202      	movs	r2, #2
    1b3e:	a901      	add	r1, sp, #4
    1b40:	2098      	movs	r0, #152	; 0x98
    1b42:	4b12      	ldr	r3, [pc, #72]	; (1b8c <SX126x_CalibrateImage+0x8c>)
    1b44:	4798      	blx	r3
}
    1b46:	b003      	add	sp, #12
    1b48:	f85d fb04 	ldr.w	pc, [sp], #4
        calFreq[0] = 0xD7;
    1b4c:	23d7      	movs	r3, #215	; 0xd7
    1b4e:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xD8;
    1b52:	23d8      	movs	r3, #216	; 0xd8
    1b54:	f88d 3005 	strb.w	r3, [sp, #5]
    1b58:	e7f0      	b.n	1b3c <SX126x_CalibrateImage+0x3c>
        calFreq[0] = 0xC1;
    1b5a:	23c1      	movs	r3, #193	; 0xc1
    1b5c:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
    1b60:	23c5      	movs	r3, #197	; 0xc5
    1b62:	f88d 3005 	strb.w	r3, [sp, #5]
    1b66:	e7e9      	b.n	1b3c <SX126x_CalibrateImage+0x3c>
        calFreq[0] = 0x75;
    1b68:	2375      	movs	r3, #117	; 0x75
    1b6a:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
    1b6e:	2381      	movs	r3, #129	; 0x81
    1b70:	f88d 3005 	strb.w	r3, [sp, #5]
    1b74:	e7e2      	b.n	1b3c <SX126x_CalibrateImage+0x3c>
    1b76:	bf00      	nop
    1b78:	35a4e900 	.word	0x35a4e900
    1b7c:	32a9f880 	.word	0x32a9f880
    1b80:	2de54480 	.word	0x2de54480
    1b84:	1b6b0b00 	.word	0x1b6b0b00
    1b88:	1954fc40 	.word	0x1954fc40
    1b8c:	0000207d 	.word	0x0000207d

00001b90 <SX126x_SetDioIrqParams>:
{
    1b90:	b510      	push	{r4, lr}
    1b92:	b082      	sub	sp, #8
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
    1b94:	0a04      	lsrs	r4, r0, #8
    1b96:	f88d 4000 	strb.w	r4, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
    1b9a:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
    1b9e:	0a08      	lsrs	r0, r1, #8
    1ba0:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
    1ba4:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
    1ba8:	0a11      	lsrs	r1, r2, #8
    1baa:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
    1bae:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
    1bb2:	0a1a      	lsrs	r2, r3, #8
    1bb4:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
    1bb8:	f88d 3007 	strb.w	r3, [sp, #7]
    SX126xHal_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
    1bbc:	2208      	movs	r2, #8
    1bbe:	4669      	mov	r1, sp
    1bc0:	4610      	mov	r0, r2
    1bc2:	4b02      	ldr	r3, [pc, #8]	; (1bcc <SX126x_SetDioIrqParams+0x3c>)
    1bc4:	4798      	blx	r3
}
    1bc6:	b002      	add	sp, #8
    1bc8:	bd10      	pop	{r4, pc}
    1bca:	bf00      	nop
    1bcc:	0000207d 	.word	0x0000207d

00001bd0 <SX126x_SetRfFrequency>:
{
    1bd0:	b510      	push	{r4, lr}
    1bd2:	b082      	sub	sp, #8
    1bd4:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
    1bd6:	4b16      	ldr	r3, [pc, #88]	; (1c30 <SX126x_SetRfFrequency+0x60>)
    1bd8:	781b      	ldrb	r3, [r3, #0]
    1bda:	b1e3      	cbz	r3, 1c16 <SX126x_SetRfFrequency+0x46>
    freq = ( uint32_t )( ( double )frequency / ( double )FREQ_STEP );
    1bdc:	4620      	mov	r0, r4
    1bde:	4b15      	ldr	r3, [pc, #84]	; (1c34 <SX126x_SetRfFrequency+0x64>)
    1be0:	4798      	blx	r3
    1be2:	a311      	add	r3, pc, #68	; (adr r3, 1c28 <SX126x_SetRfFrequency+0x58>)
    1be4:	e9d3 2300 	ldrd	r2, r3, [r3]
    1be8:	4c13      	ldr	r4, [pc, #76]	; (1c38 <SX126x_SetRfFrequency+0x68>)
    1bea:	47a0      	blx	r4
    1bec:	4b13      	ldr	r3, [pc, #76]	; (1c3c <SX126x_SetRfFrequency+0x6c>)
    1bee:	4798      	blx	r3
    buf[0] = ( uint8_t )( ( freq >> 24 ) & 0xFF );
    1bf0:	0e03      	lsrs	r3, r0, #24
    1bf2:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( freq >> 16 ) & 0xFF );
    1bf6:	0c03      	lsrs	r3, r0, #16
    1bf8:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( freq >> 8 ) & 0xFF );
    1bfc:	0a03      	lsrs	r3, r0, #8
    1bfe:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( freq & 0xFF );
    1c02:	f88d 0007 	strb.w	r0, [sp, #7]
    SX126xHal_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
    1c06:	2204      	movs	r2, #4
    1c08:	eb0d 0102 	add.w	r1, sp, r2
    1c0c:	2086      	movs	r0, #134	; 0x86
    1c0e:	4b0c      	ldr	r3, [pc, #48]	; (1c40 <SX126x_SetRfFrequency+0x70>)
    1c10:	4798      	blx	r3
}
    1c12:	b002      	add	sp, #8
    1c14:	bd10      	pop	{r4, pc}
        SX126x_CalibrateImage( frequency );
    1c16:	4b0b      	ldr	r3, [pc, #44]	; (1c44 <SX126x_SetRfFrequency+0x74>)
    1c18:	4798      	blx	r3
        ImageCalibrated = true;
    1c1a:	2201      	movs	r2, #1
    1c1c:	4b04      	ldr	r3, [pc, #16]	; (1c30 <SX126x_SetRfFrequency+0x60>)
    1c1e:	701a      	strb	r2, [r3, #0]
    1c20:	e7dc      	b.n	1bdc <SX126x_SetRfFrequency+0xc>
    1c22:	bf00      	nop
    1c24:	f3af 8000 	nop.w
    1c28:	00000000 	.word	0x00000000
    1c2c:	3fee8480 	.word	0x3fee8480
    1c30:	20000040 	.word	0x20000040
    1c34:	0000251d 	.word	0x0000251d
    1c38:	0000285d 	.word	0x0000285d
    1c3c:	00002a2d 	.word	0x00002a2d
    1c40:	0000207d 	.word	0x0000207d
    1c44:	00001b01 	.word	0x00001b01

00001c48 <SX126x_SetModulationParams>:
    }
    SX126xHal_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
}

void SX126x_SetModulationParams( ModulationParams_t *modulationParams )
{
    1c48:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c4a:	b083      	sub	sp, #12
    1c4c:	4604      	mov	r4, r0
    uint8_t n;
    uint32_t tempVal = 0;
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
    1c4e:	2300      	movs	r3, #0
    1c50:	9300      	str	r3, [sp, #0]
    1c52:	9301      	str	r3, [sp, #4]


    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
    1c54:	7800      	ldrb	r0, [r0, #0]
    1c56:	4b40      	ldr	r3, [pc, #256]	; (1d58 <SX126x_SetModulationParams+0x110>)
    1c58:	781b      	ldrb	r3, [r3, #0]
    1c5a:	4283      	cmp	r3, r0
    1c5c:	d001      	beq.n	1c62 <SX126x_SetModulationParams+0x1a>
    {
        SX126x_SetPacketType( modulationParams->PacketType );
    1c5e:	4b3f      	ldr	r3, [pc, #252]	; (1d5c <SX126x_SetModulationParams+0x114>)
    1c60:	4798      	blx	r3
    }

    switch( modulationParams->PacketType )
    1c62:	7823      	ldrb	r3, [r4, #0]
    1c64:	b163      	cbz	r3, 1c80 <SX126x_SetModulationParams+0x38>
    1c66:	2b01      	cmp	r3, #1
    1c68:	d14b      	bne.n	1d02 <SX126x_SetModulationParams+0xba>
        buf[6] = ( tempVal >> 8 ) & 0xFF;
        buf[7] = ( tempVal& 0xFF );
        break;
    case PACKET_TYPE_LORA:
        n = 4;
        switch( modulationParams->Params.LoRa.Bandwidth )
    1c6a:	7c63      	ldrb	r3, [r4, #17]
    1c6c:	2b0a      	cmp	r3, #10
    1c6e:	d838      	bhi.n	1ce2 <SX126x_SetModulationParams+0x9a>
    1c70:	e8df f003 	tbb	[pc, r3]
    1c74:	57656565 	.word	0x57656565
    1c78:	37354950 	.word	0x37354950
    1c7c:	6565      	.short	0x6565
    1c7e:	5e          	.byte	0x5e
    1c7f:	00          	.byte	0x00
        tempVal = ( uint32_t )( 32 * ( ( double )XTAL_FREQ / ( double )modulationParams->Params.Gfsk.BitRate ) );
    1c80:	4f37      	ldr	r7, [pc, #220]	; (1d60 <SX126x_SetModulationParams+0x118>)
    1c82:	6860      	ldr	r0, [r4, #4]
    1c84:	47b8      	blx	r7
    1c86:	4e37      	ldr	r6, [pc, #220]	; (1d64 <SX126x_SetModulationParams+0x11c>)
    1c88:	4602      	mov	r2, r0
    1c8a:	460b      	mov	r3, r1
    1c8c:	a12e      	add	r1, pc, #184	; (adr r1, 1d48 <SX126x_SetModulationParams+0x100>)
    1c8e:	e9d1 0100 	ldrd	r0, r1, [r1]
    1c92:	47b0      	blx	r6
    1c94:	2200      	movs	r2, #0
    1c96:	4b34      	ldr	r3, [pc, #208]	; (1d68 <SX126x_SetModulationParams+0x120>)
    1c98:	4d34      	ldr	r5, [pc, #208]	; (1d6c <SX126x_SetModulationParams+0x124>)
    1c9a:	47a8      	blx	r5
    1c9c:	4d34      	ldr	r5, [pc, #208]	; (1d70 <SX126x_SetModulationParams+0x128>)
    1c9e:	47a8      	blx	r5
        buf[0] = ( tempVal >> 16 ) & 0xFF;
    1ca0:	0c03      	lsrs	r3, r0, #16
    1ca2:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
    1ca6:	0a03      	lsrs	r3, r0, #8
    1ca8:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = tempVal & 0xFF;
    1cac:	f88d 0002 	strb.w	r0, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
    1cb0:	7b23      	ldrb	r3, [r4, #12]
    1cb2:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
    1cb6:	7b63      	ldrb	r3, [r4, #13]
    1cb8:	f88d 3004 	strb.w	r3, [sp, #4]
        tempVal = ( uint32_t )( ( double )modulationParams->Params.Gfsk.Fdev / ( double )FREQ_STEP );
    1cbc:	68a0      	ldr	r0, [r4, #8]
    1cbe:	47b8      	blx	r7
    1cc0:	a323      	add	r3, pc, #140	; (adr r3, 1d50 <SX126x_SetModulationParams+0x108>)
    1cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
    1cc6:	47b0      	blx	r6
    1cc8:	47a8      	blx	r5
        buf[5] = ( tempVal >> 16 ) & 0xFF;
    1cca:	0c03      	lsrs	r3, r0, #16
    1ccc:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
    1cd0:	0a03      	lsrs	r3, r0, #8
    1cd2:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
    1cd6:	f88d 0007 	strb.w	r0, [sp, #7]
        n = 8;
    1cda:	2208      	movs	r2, #8
        break;
    1cdc:	e00d      	b.n	1cfa <SX126x_SetModulationParams+0xb2>
        {
            case LORA_BW_500:
                 modulationParams->Params.LoRa.LowDatarateOptimize = 0x00;
    1cde:	2200      	movs	r2, #0
    1ce0:	74e2      	strb	r2, [r4, #19]
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x01;
                break;
            default:
                break;
        }
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
    1ce2:	7c22      	ldrb	r2, [r4, #16]
    1ce4:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
    1ce8:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
    1cec:	7ca3      	ldrb	r3, [r4, #18]
    1cee:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
    1cf2:	7ce3      	ldrb	r3, [r4, #19]
    1cf4:	f88d 3003 	strb.w	r3, [sp, #3]
        n = 4;
    1cf8:	2204      	movs	r2, #4
        break;
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SX126xHal_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
    1cfa:	4669      	mov	r1, sp
    1cfc:	208b      	movs	r0, #139	; 0x8b
    1cfe:	4b1d      	ldr	r3, [pc, #116]	; (1d74 <SX126x_SetModulationParams+0x12c>)
    1d00:	4798      	blx	r3
}
    1d02:	b003      	add	sp, #12
    1d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
                if( modulationParams->Params.LoRa.SpreadingFactor == 12 )
    1d06:	7c22      	ldrb	r2, [r4, #16]
    1d08:	2a0c      	cmp	r2, #12
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x01;
    1d0a:	bf0c      	ite	eq
    1d0c:	2201      	moveq	r2, #1
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x00;
    1d0e:	2200      	movne	r2, #0
    1d10:	74e2      	strb	r2, [r4, #19]
    1d12:	e7e6      	b.n	1ce2 <SX126x_SetModulationParams+0x9a>
                if( modulationParams->Params.LoRa.SpreadingFactor >= 11 )
    1d14:	7c22      	ldrb	r2, [r4, #16]
    1d16:	2a0a      	cmp	r2, #10
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x01;
    1d18:	bf8c      	ite	hi
    1d1a:	2201      	movhi	r2, #1
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x00;
    1d1c:	2200      	movls	r2, #0
    1d1e:	74e2      	strb	r2, [r4, #19]
    1d20:	e7df      	b.n	1ce2 <SX126x_SetModulationParams+0x9a>
                if( modulationParams->Params.LoRa.SpreadingFactor >= 10 )
    1d22:	7c22      	ldrb	r2, [r4, #16]
    1d24:	2a09      	cmp	r2, #9
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x01;
    1d26:	bf8c      	ite	hi
    1d28:	2201      	movhi	r2, #1
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x00;
    1d2a:	2200      	movls	r2, #0
    1d2c:	74e2      	strb	r2, [r4, #19]
    1d2e:	e7d8      	b.n	1ce2 <SX126x_SetModulationParams+0x9a>
                if( modulationParams->Params.LoRa.SpreadingFactor >= 9 )
    1d30:	7c22      	ldrb	r2, [r4, #16]
    1d32:	2a08      	cmp	r2, #8
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x01;
    1d34:	bf8c      	ite	hi
    1d36:	2201      	movhi	r2, #1
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x00;
    1d38:	2200      	movls	r2, #0
    1d3a:	74e2      	strb	r2, [r4, #19]
    1d3c:	e7d1      	b.n	1ce2 <SX126x_SetModulationParams+0x9a>
                    modulationParams->Params.LoRa.LowDatarateOptimize = 0x01;
    1d3e:	2201      	movs	r2, #1
    1d40:	74e2      	strb	r2, [r4, #19]
                break;
    1d42:	e7ce      	b.n	1ce2 <SX126x_SetModulationParams+0x9a>
    1d44:	f3af 8000 	nop.w
    1d48:	00000000 	.word	0x00000000
    1d4c:	417e8480 	.word	0x417e8480
    1d50:	00000000 	.word	0x00000000
    1d54:	3fee8480 	.word	0x3fee8480
    1d58:	200000a0 	.word	0x200000a0
    1d5c:	000019cd 	.word	0x000019cd
    1d60:	0000251d 	.word	0x0000251d
    1d64:	0000285d 	.word	0x0000285d
    1d68:	40400000 	.word	0x40400000
    1d6c:	00002609 	.word	0x00002609
    1d70:	00002a2d 	.word	0x00002a2d
    1d74:	0000207d 	.word	0x0000207d

00001d78 <SX126x_SetPacketParams>:

void SX126x_SetPacketParams( PacketParams_t *packetParams )
{
    1d78:	b510      	push	{r4, lr}
    1d7a:	b084      	sub	sp, #16
    1d7c:	4604      	mov	r4, r0
    uint8_t n;
    uint8_t crcVal = 0;
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
    1d7e:	2300      	movs	r3, #0
    1d80:	9301      	str	r3, [sp, #4]
    1d82:	9302      	str	r3, [sp, #8]
    1d84:	f88d 300c 	strb.w	r3, [sp, #12]


    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
    1d88:	7800      	ldrb	r0, [r0, #0]
    1d8a:	4b2e      	ldr	r3, [pc, #184]	; (1e44 <SX126x_SetPacketParams+0xcc>)
    1d8c:	781b      	ldrb	r3, [r3, #0]
    1d8e:	4283      	cmp	r3, r0
    1d90:	d001      	beq.n	1d96 <SX126x_SetPacketParams+0x1e>
    {
        SX126x_SetPacketType( packetParams->PacketType );
    1d92:	4b2d      	ldr	r3, [pc, #180]	; (1e48 <SX126x_SetPacketParams+0xd0>)
    1d94:	4798      	blx	r3
    }

    switch( packetParams->PacketType )
    1d96:	7823      	ldrb	r3, [r4, #0]
    1d98:	b1ab      	cbz	r3, 1dc6 <SX126x_SetPacketParams+0x4e>
    1d9a:	2b01      	cmp	r3, #1
    1d9c:	d13c      	bne.n	1e18 <SX126x_SetPacketParams+0xa0>
        buf[7] = crcVal;
        buf[8] = packetParams->Params.Gfsk.DcFree;
        break;
    case PACKET_TYPE_LORA:
        n = 6;
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
    1d9e:	89a3      	ldrh	r3, [r4, #12]
    1da0:	0a1a      	lsrs	r2, r3, #8
    1da2:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
    1da6:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = packetParams->Params.LoRa.HeaderType;
    1daa:	7ba3      	ldrb	r3, [r4, #14]
    1dac:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
    1db0:	7be3      	ldrb	r3, [r4, #15]
    1db2:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
    1db6:	7c23      	ldrb	r3, [r4, #16]
    1db8:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
    1dbc:	7c63      	ldrb	r3, [r4, #17]
    1dbe:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
    1dc2:	2206      	movs	r2, #6
        break;
    1dc4:	e024      	b.n	1e10 <SX126x_SetPacketParams+0x98>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
    1dc6:	7a63      	ldrb	r3, [r4, #9]
    1dc8:	2bf1      	cmp	r3, #241	; 0xf1
    1dca:	d027      	beq.n	1e1c <SX126x_SetPacketParams+0xa4>
        else if(  packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
    1dcc:	2bf2      	cmp	r3, #242	; 0xf2
    1dce:	d02f      	beq.n	1e30 <SX126x_SetPacketParams+0xb8>
            crcVal = packetParams->Params.Gfsk.CrcLength;
    1dd0:	461a      	mov	r2, r3
        packetParams->Params.Gfsk.PreambleLength = packetParams->Params.Gfsk.PreambleLength << 3;
    1dd2:	8863      	ldrh	r3, [r4, #2]
    1dd4:	00db      	lsls	r3, r3, #3
    1dd6:	b29b      	uxth	r3, r3
    1dd8:	8063      	strh	r3, [r4, #2]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
    1dda:	0a19      	lsrs	r1, r3, #8
    1ddc:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
    1de0:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
    1de4:	7923      	ldrb	r3, [r4, #4]
    1de6:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength << 3 ); // convert from byte to bit
    1dea:	7963      	ldrb	r3, [r4, #5]
    1dec:	00db      	lsls	r3, r3, #3
    1dee:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
    1df2:	79a3      	ldrb	r3, [r4, #6]
    1df4:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
    1df8:	79e3      	ldrb	r3, [r4, #7]
    1dfa:	f88d 3009 	strb.w	r3, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
    1dfe:	7a23      	ldrb	r3, [r4, #8]
    1e00:	f88d 300a 	strb.w	r3, [sp, #10]
        buf[7] = crcVal;
    1e04:	f88d 200b 	strb.w	r2, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
    1e08:	7aa3      	ldrb	r3, [r4, #10]
    1e0a:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
    1e0e:	2209      	movs	r2, #9
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SX126xHal_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
    1e10:	a901      	add	r1, sp, #4
    1e12:	208c      	movs	r0, #140	; 0x8c
    1e14:	4b0d      	ldr	r3, [pc, #52]	; (1e4c <SX126x_SetPacketParams+0xd4>)
    1e16:	4798      	blx	r3
}
    1e18:	b004      	add	sp, #16
    1e1a:	bd10      	pop	{r4, pc}
            SX126x_SetCrcSeed( CRC_IBM_SEED );
    1e1c:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1e20:	4b0b      	ldr	r3, [pc, #44]	; (1e50 <SX126x_SetPacketParams+0xd8>)
    1e22:	4798      	blx	r3
            SX126x_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
    1e24:	f248 0005 	movw	r0, #32773	; 0x8005
    1e28:	4b0a      	ldr	r3, [pc, #40]	; (1e54 <SX126x_SetPacketParams+0xdc>)
    1e2a:	4798      	blx	r3
            crcVal = RADIO_CRC_2_BYTES;
    1e2c:	2202      	movs	r2, #2
    1e2e:	e7d0      	b.n	1dd2 <SX126x_SetPacketParams+0x5a>
            SX126x_SetCrcSeed( CRC_CCITT_SEED );
    1e30:	f641 500f 	movw	r0, #7439	; 0x1d0f
    1e34:	4b06      	ldr	r3, [pc, #24]	; (1e50 <SX126x_SetPacketParams+0xd8>)
    1e36:	4798      	blx	r3
            SX126x_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
    1e38:	f241 0021 	movw	r0, #4129	; 0x1021
    1e3c:	4b05      	ldr	r3, [pc, #20]	; (1e54 <SX126x_SetPacketParams+0xdc>)
    1e3e:	4798      	blx	r3
            crcVal = RADIO_CRC_2_BYTES_INV;
    1e40:	2206      	movs	r2, #6
    1e42:	e7c6      	b.n	1dd2 <SX126x_SetPacketParams+0x5a>
    1e44:	200000a0 	.word	0x200000a0
    1e48:	000019cd 	.word	0x000019cd
    1e4c:	0000207d 	.word	0x0000207d
    1e50:	00001a6d 	.word	0x00001a6d
    1e54:	00001a9d 	.word	0x00001a9d

00001e58 <SX126x_SetBufferBaseAddresses>:
    SX126xHal_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SX126x_SetBufferBaseAddresses( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
    1e58:	b500      	push	{lr}
    1e5a:	b083      	sub	sp, #12
    uint8_t buf[2];


    buf[0] = txBaseAddress;
    1e5c:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
    1e60:	f88d 1005 	strb.w	r1, [sp, #5]
    SX126xHal_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
    1e64:	2202      	movs	r2, #2
    1e66:	a901      	add	r1, sp, #4
    1e68:	208f      	movs	r0, #143	; 0x8f
    1e6a:	4b02      	ldr	r3, [pc, #8]	; (1e74 <SX126x_SetBufferBaseAddresses+0x1c>)
    1e6c:	4798      	blx	r3
}
    1e6e:	b003      	add	sp, #12
    1e70:	f85d fb04 	ldr.w	pc, [sp], #4
    1e74:	0000207d 	.word	0x0000207d

00001e78 <SX126x_GetRxBufferStatus>:
    SX126xHal_ReadCommand( RADIO_GET_RSSIINST, ( uint8_t* )&rssi, 1 );
    return( -( rssi / 2 ) );
}

void SX126x_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
    1e78:	b530      	push	{r4, r5, lr}
    1e7a:	b083      	sub	sp, #12
    1e7c:	4605      	mov	r5, r0
    1e7e:	460c      	mov	r4, r1
    uint8_t status[2];

    SX126xHal_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
    1e80:	2202      	movs	r2, #2
    1e82:	a901      	add	r1, sp, #4
    1e84:	2013      	movs	r0, #19
    1e86:	4b10      	ldr	r3, [pc, #64]	; (1ec8 <SX126x_GetRxBufferStatus+0x50>)
    1e88:	4798      	blx	r3
	
    /* The registers in this part of code are not in the datasheet*/
	
    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    uint8_t buffer_stat_temp = 0;
    1e8a:	a902      	add	r1, sp, #8
    1e8c:	2300      	movs	r3, #0
    1e8e:	f801 3d05 	strb.w	r3, [r1, #-5]!
	SX126xHal_ReadReg( REG_LR_PACKETPARAMS,  &buffer_stat_temp);
    1e92:	f240 7004 	movw	r0, #1796	; 0x704
    1e96:	4b0d      	ldr	r3, [pc, #52]	; (1ecc <SX126x_GetRxBufferStatus+0x54>)
    1e98:	4798      	blx	r3
    return PacketType;
    1e9a:	4b0d      	ldr	r3, [pc, #52]	; (1ed0 <SX126x_GetRxBufferStatus+0x58>)
    if( ( SX126x_GetPacketType( ) == PACKET_TYPE_LORA ) && ( buffer_stat_temp >> 7 == 1 ) )
    1e9c:	781b      	ldrb	r3, [r3, #0]
    1e9e:	2b01      	cmp	r3, #1
    1ea0:	d007      	beq.n	1eb2 <SX126x_GetRxBufferStatus+0x3a>
    {
        SX126xHal_ReadReg( REG_LR_PAYLOADLENGTH, payloadLength );
    }
    else
    {
        *payloadLength = status[0];
    1ea2:	f89d 3004 	ldrb.w	r3, [sp, #4]
    1ea6:	702b      	strb	r3, [r5, #0]
    }

    //*payloadLength = status[0];
    *rxStartBufferPointer = status[1];
    1ea8:	f89d 3005 	ldrb.w	r3, [sp, #5]
    1eac:	7023      	strb	r3, [r4, #0]
}
    1eae:	b003      	add	sp, #12
    1eb0:	bd30      	pop	{r4, r5, pc}
    if( ( SX126x_GetPacketType( ) == PACKET_TYPE_LORA ) && ( buffer_stat_temp >> 7 == 1 ) )
    1eb2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1eb6:	09db      	lsrs	r3, r3, #7
    1eb8:	d0f3      	beq.n	1ea2 <SX126x_GetRxBufferStatus+0x2a>
        SX126xHal_ReadReg( REG_LR_PAYLOADLENGTH, payloadLength );
    1eba:	4629      	mov	r1, r5
    1ebc:	f240 7002 	movw	r0, #1794	; 0x702
    1ec0:	4b02      	ldr	r3, [pc, #8]	; (1ecc <SX126x_GetRxBufferStatus+0x54>)
    1ec2:	4798      	blx	r3
    1ec4:	e7f0      	b.n	1ea8 <SX126x_GetRxBufferStatus+0x30>
    1ec6:	bf00      	nop
    1ec8:	000020c5 	.word	0x000020c5
    1ecc:	0000221d 	.word	0x0000221d
    1ed0:	200000a0 	.word	0x200000a0

00001ed4 <SX126x_GetPayload>:
{
    1ed4:	b530      	push	{r4, r5, lr}
    1ed6:	b085      	sub	sp, #20
    1ed8:	4605      	mov	r5, r0
    1eda:	4614      	mov	r4, r2
    1edc:	f88d 1007 	strb.w	r1, [sp, #7]
    uint8_t start_buffer = 0x00;
    1ee0:	a904      	add	r1, sp, #16
    1ee2:	2300      	movs	r3, #0
    1ee4:	f801 3d01 	strb.w	r3, [r1, #-1]!
    SX126x_GetRxBufferStatus( &size, &start_buffer );
    1ee8:	f10d 0007 	add.w	r0, sp, #7
    1eec:	4b07      	ldr	r3, [pc, #28]	; (1f0c <SX126x_GetPayload+0x38>)
    1eee:	4798      	blx	r3
    if( size > maxSize )
    1ef0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1ef4:	42a2      	cmp	r2, r4
    1ef6:	d902      	bls.n	1efe <SX126x_GetPayload+0x2a>
        return 1;
    1ef8:	2001      	movs	r0, #1
}
    1efa:	b005      	add	sp, #20
    1efc:	bd30      	pop	{r4, r5, pc}
    SX126xHal_ReadBuffer( start_buffer, buffer, size );
    1efe:	4629      	mov	r1, r5
    1f00:	f89d 000f 	ldrb.w	r0, [sp, #15]
    1f04:	4b02      	ldr	r3, [pc, #8]	; (1f10 <SX126x_GetPayload+0x3c>)
    1f06:	4798      	blx	r3
    return 0;
    1f08:	2000      	movs	r0, #0
    1f0a:	e7f6      	b.n	1efa <SX126x_GetPayload+0x26>
    1f0c:	00001e79 	.word	0x00001e79
    1f10:	0000222d 	.word	0x0000222d

00001f14 <SX126x_ClearIrqStatus>:
    SX126xHal_ReadCommand( RADIO_GET_ERROR, ( uint8_t * )&error, 3 );
    return error;
}

void SX126x_ClearIrqStatus( uint16_t irq )
{
    1f14:	b500      	push	{lr}
    1f16:	b083      	sub	sp, #12
    uint8_t buf[2];
    buf[0] = ( uint8_t )( ( ( uint16_t )irq >> 8 ) & 0x00FF );
    1f18:	0a03      	lsrs	r3, r0, #8
    1f1a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    1f1e:	f88d 0005 	strb.w	r0, [sp, #5]
    SX126xHal_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
    1f22:	2202      	movs	r2, #2
    1f24:	a901      	add	r1, sp, #4
    1f26:	4610      	mov	r0, r2
    1f28:	4b02      	ldr	r3, [pc, #8]	; (1f34 <SX126x_ClearIrqStatus+0x20>)
    1f2a:	4798      	blx	r3
}
    1f2c:	b003      	add	sp, #12
    1f2e:	f85d fb04 	ldr.w	pc, [sp], #4
    1f32:	bf00      	nop
    1f34:	0000207d 	.word	0x0000207d

00001f38 <set_rx>:

}

// HELPER FUNCTIONS TO START TX AND RX

void set_rx( uint32_t freq, RadioLoRaBandwidths_t bw, RadioLoRaSpreadingFactors_t sf, RadioLoRaCodingRates_t cd, RadioLoRaPacketLengthsMode_t ht, uint8_t pck_len ){
    1f38:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f3a:	b08d      	sub	sp, #52	; 0x34
    1f3c:	4605      	mov	r5, r0
    1f3e:	460e      	mov	r6, r1
    1f40:	4617      	mov	r7, r2
    1f42:	461c      	mov	r4, r3
    SX126x_SetPacketType(PACKET_TYPE_LORA);
    1f44:	2001      	movs	r0, #1
    1f46:	4b17      	ldr	r3, [pc, #92]	; (1fa4 <set_rx+0x6c>)
    1f48:	4798      	blx	r3

    SX126x_SetRfFrequency(freq);
    1f4a:	4628      	mov	r0, r5
    1f4c:	4b16      	ldr	r3, [pc, #88]	; (1fa8 <set_rx+0x70>)
    1f4e:	4798      	blx	r3

    SX126x_SetBufferBaseAddresses(10, 10);
    1f50:	210a      	movs	r1, #10
    1f52:	4608      	mov	r0, r1
    1f54:	4b15      	ldr	r3, [pc, #84]	; (1fac <set_rx+0x74>)
    1f56:	4798      	blx	r3


    ModulationParams_t ModParams;
    ModParams.PacketType = PACKET_TYPE_LORA;
    1f58:	2501      	movs	r5, #1
    1f5a:	f88d 501c 	strb.w	r5, [sp, #28]

    struct LoRa_modul lora_modul;
    lora_modul.SpreadingFactor = sf;
    1f5e:	f88d 7018 	strb.w	r7, [sp, #24]
    lora_modul.Bandwidth = bw;
    1f62:	f88d 6019 	strb.w	r6, [sp, #25]
    lora_modul.CodingRate = cd;
    1f66:	f88d 401a 	strb.w	r4, [sp, #26]
    lora_modul.LowDatarateOptimize = 0;
    1f6a:	2400      	movs	r4, #0
    1f6c:	f88d 401b 	strb.w	r4, [sp, #27]

    struct Params_modul params_modul;

    memcpy(&params_modul.LoRa, &lora_modul, sizeof(lora_modul));

    memcpy(&ModParams.Params, &params_modul, sizeof(params_modul));
    1f70:	9b06      	ldr	r3, [sp, #24]
    1f72:	930b      	str	r3, [sp, #44]	; 0x2c

    SX126x_SetModulationParams(&ModParams);
    1f74:	a807      	add	r0, sp, #28
    1f76:	4b0e      	ldr	r3, [pc, #56]	; (1fb0 <set_rx+0x78>)
    1f78:	4798      	blx	r3


    PacketParams_t PckParam;
    PckParam.PacketType = PACKET_TYPE_LORA;
    1f7a:	f88d 5004 	strb.w	r5, [sp, #4]
    lora_pckt.PayloadLength = pck_len;
    lora_pckt.CrcMode = LORA_CRC_OFF;
    lora_pckt.InvertIQ = LORA_IQ_NORMAL;

    memcpy(&param_pckt.LoRa, &lora_pckt, sizeof(lora_pckt));
    memcpy(&PckParam.Params, &param_pckt, sizeof(param_pckt));
    1f7e:	2308      	movs	r3, #8
    1f80:	f8ad 3010 	strh.w	r3, [sp, #16]
    1f84:	f88d 4012 	strb.w	r4, [sp, #18]
    1f88:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
    1f8c:	f88d 3013 	strb.w	r3, [sp, #19]
    1f90:	f88d 4014 	strb.w	r4, [sp, #20]
    1f94:	f88d 4015 	strb.w	r4, [sp, #21]

    SX126x_SetPacketParams(&PckParam);
    1f98:	a801      	add	r0, sp, #4
    1f9a:	4b06      	ldr	r3, [pc, #24]	; (1fb4 <set_rx+0x7c>)
    1f9c:	4798      	blx	r3
}
    1f9e:	b00d      	add	sp, #52	; 0x34
    1fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fa2:	bf00      	nop
    1fa4:	000019cd 	.word	0x000019cd
    1fa8:	00001bd1 	.word	0x00001bd1
    1fac:	00001e59 	.word	0x00001e59
    1fb0:	00001c49 	.word	0x00001c49
    1fb4:	00001d79 	.word	0x00001d79

00001fb8 <SX126xHal_SpiInit>:
#define WaitOnCounter( )          for( uint8_t counter = 0; counter < 15; counter++ ) \
                                  {  __NOP( ); }


void SX126xHal_SpiInit( void )
{
    1fb8:	b508      	push	{r3, lr}
    NSS_OFF
    1fba:	2101      	movs	r1, #1
    1fbc:	2052      	movs	r0, #82	; 0x52
    1fbe:	4b04      	ldr	r3, [pc, #16]	; (1fd0 <SX126xHal_SpiInit+0x18>)
    1fc0:	4798      	blx	r3
    SPI_init();
    1fc2:	4b04      	ldr	r3, [pc, #16]	; (1fd4 <SX126xHal_SpiInit+0x1c>)
    1fc4:	4798      	blx	r3

    wait_ms( 100 );
    1fc6:	2064      	movs	r0, #100	; 0x64
    1fc8:	4b03      	ldr	r3, [pc, #12]	; (1fd8 <SX126xHal_SpiInit+0x20>)
    1fca:	4798      	blx	r3
    1fcc:	bd08      	pop	{r3, pc}
    1fce:	bf00      	nop
    1fd0:	000018b9 	.word	0x000018b9
    1fd4:	000018e5 	.word	0x000018e5
    1fd8:	000006f1 	.word	0x000006f1

00001fdc <SX126xHal_IoIrqInit>:
}

void SX126xHal_IoIrqInit( void )
{
    1fdc:	b508      	push	{r3, lr}
    IRQ_Init();
    1fde:	4b01      	ldr	r3, [pc, #4]	; (1fe4 <SX126xHal_IoIrqInit+0x8>)
    1fe0:	4798      	blx	r3
    1fe2:	bd08      	pop	{r3, pc}
    1fe4:	00001969 	.word	0x00001969

00001fe8 <SX126xHal_Reset>:
}

void SX126xHal_Reset( void )
{
    1fe8:	b530      	push	{r4, r5, lr}
    1fea:	b083      	sub	sp, #12
    CRITICAL_SECTION_ENTER()
    1fec:	a801      	add	r0, sp, #4
    1fee:	4b0a      	ldr	r3, [pc, #40]	; (2018 <SX126xHal_Reset+0x30>)
    1ff0:	4798      	blx	r3
    wait_ms( 20 );
    1ff2:	2014      	movs	r0, #20
    1ff4:	4c09      	ldr	r4, [pc, #36]	; (201c <SX126xHal_Reset+0x34>)
    1ff6:	47a0      	blx	r4
    RESET_ON
    1ff8:	2100      	movs	r1, #0
    1ffa:	2053      	movs	r0, #83	; 0x53
    1ffc:	4d08      	ldr	r5, [pc, #32]	; (2020 <SX126xHal_Reset+0x38>)
    1ffe:	47a8      	blx	r5
    wait_ms( 50 );
    2000:	2032      	movs	r0, #50	; 0x32
    2002:	47a0      	blx	r4
    RESET_OFF
    2004:	2101      	movs	r1, #1
    2006:	2053      	movs	r0, #83	; 0x53
    2008:	47a8      	blx	r5
    wait_ms( 20 );
    200a:	2014      	movs	r0, #20
    200c:	47a0      	blx	r4
    CRITICAL_SECTION_LEAVE()
    200e:	a801      	add	r0, sp, #4
    2010:	4b04      	ldr	r3, [pc, #16]	; (2024 <SX126xHal_Reset+0x3c>)
    2012:	4798      	blx	r3
}
    2014:	b003      	add	sp, #12
    2016:	bd30      	pop	{r4, r5, pc}
    2018:	000006c1 	.word	0x000006c1
    201c:	000006f1 	.word	0x000006f1
    2020:	000018b9 	.word	0x000018b9
    2024:	000006cf 	.word	0x000006cf

00002028 <SX126xHal_Wakeup>:

void SX126xHal_Wakeup( void )
{
    2028:	b530      	push	{r4, r5, lr}
    202a:	b083      	sub	sp, #12
    CRITICAL_SECTION_ENTER()
    202c:	a801      	add	r0, sp, #4
    202e:	4b0e      	ldr	r3, [pc, #56]	; (2068 <SX126xHal_Wakeup+0x40>)
    2030:	4798      	blx	r3

    //Don't wait for BUSY here
    uint8_t wakeup_sequence[2] = {RADIO_GET_STATUS, 0x00};
    2032:	23c0      	movs	r3, #192	; 0xc0
    2034:	f88d 3000 	strb.w	r3, [sp]
    2038:	2100      	movs	r1, #0
    203a:	f88d 1001 	strb.w	r1, [sp, #1]
    NSS_ON
    203e:	2052      	movs	r0, #82	; 0x52
    2040:	4c0a      	ldr	r4, [pc, #40]	; (206c <SX126xHal_Wakeup+0x44>)
    2042:	47a0      	blx	r4
    SendSpi(wakeup_sequence, sizeof(wakeup_sequence));
    2044:	2102      	movs	r1, #2
    2046:	4668      	mov	r0, sp
    2048:	4b09      	ldr	r3, [pc, #36]	; (2070 <SX126xHal_Wakeup+0x48>)
    204a:	4798      	blx	r3
    NSS_OFF
    204c:	2101      	movs	r1, #1
    204e:	2052      	movs	r0, #82	; 0x52
    2050:	47a0      	blx	r4

    // Wait for chip to be ready.
    WAIT_BUSY
    2052:	2554      	movs	r5, #84	; 0x54
    2054:	4c07      	ldr	r4, [pc, #28]	; (2074 <SX126xHal_Wakeup+0x4c>)
    2056:	4628      	mov	r0, r5
    2058:	47a0      	blx	r4
    205a:	2800      	cmp	r0, #0
    205c:	d1fb      	bne.n	2056 <SX126xHal_Wakeup+0x2e>

    CRITICAL_SECTION_LEAVE()
    205e:	a801      	add	r0, sp, #4
    2060:	4b05      	ldr	r3, [pc, #20]	; (2078 <SX126xHal_Wakeup+0x50>)
    2062:	4798      	blx	r3
    
    //AntSwOn( );
}
    2064:	b003      	add	sp, #12
    2066:	bd30      	pop	{r4, r5, pc}
    2068:	000006c1 	.word	0x000006c1
    206c:	000018b9 	.word	0x000018b9
    2070:	00001911 	.word	0x00001911
    2074:	00001871 	.word	0x00001871
    2078:	000006cf 	.word	0x000006cf

0000207c <SX126xHal_WriteCommand>:

void SX126xHal_WriteCommand( RadioCommands_t command, uint8_t *buffer, uint16_t size )
{ 
    207c:	b5f0      	push	{r4, r5, r6, r7, lr}
    207e:	b083      	sub	sp, #12
    2080:	460e      	mov	r6, r1
    2082:	4617      	mov	r7, r2
    2084:	f88d 0007 	strb.w	r0, [sp, #7]
    WAIT_BUSY
    2088:	2554      	movs	r5, #84	; 0x54
    208a:	4c0b      	ldr	r4, [pc, #44]	; (20b8 <SX126xHal_WriteCommand+0x3c>)
    208c:	4628      	mov	r0, r5
    208e:	47a0      	blx	r4
    2090:	2800      	cmp	r0, #0
    2092:	d1fb      	bne.n	208c <SX126xHal_WriteCommand+0x10>

    NSS_ON
    2094:	2100      	movs	r1, #0
    2096:	2052      	movs	r0, #82	; 0x52
    2098:	4c08      	ldr	r4, [pc, #32]	; (20bc <SX126xHal_WriteCommand+0x40>)
    209a:	47a0      	blx	r4

    SendSpi((uint8_t *)&command, 1);
    209c:	2101      	movs	r1, #1
    209e:	f10d 0007 	add.w	r0, sp, #7
    20a2:	4d07      	ldr	r5, [pc, #28]	; (20c0 <SX126xHal_WriteCommand+0x44>)
    20a4:	47a8      	blx	r5
    SendSpi(buffer, size);
    20a6:	b2f9      	uxtb	r1, r7
    20a8:	4630      	mov	r0, r6
    20aa:	47a8      	blx	r5

    NSS_OFF
    20ac:	2101      	movs	r1, #1
    20ae:	2052      	movs	r0, #82	; 0x52
    20b0:	47a0      	blx	r4
    
    //WaitOnCounter( );
}
    20b2:	b003      	add	sp, #12
    20b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20b6:	bf00      	nop
    20b8:	00001871 	.word	0x00001871
    20bc:	000018b9 	.word	0x000018b9
    20c0:	00001911 	.word	0x00001911

000020c4 <SX126xHal_ReadCommand>:

void SX126xHal_ReadCommand( RadioCommands_t command, uint8_t *buffer, uint16_t size )
{
    20c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    20c6:	b085      	sub	sp, #20
    20c8:	460e      	mov	r6, r1
    20ca:	4617      	mov	r7, r2
    20cc:	f88d 0007 	strb.w	r0, [sp, #7]
    WAIT_BUSY
    20d0:	2554      	movs	r5, #84	; 0x54
    20d2:	4c11      	ldr	r4, [pc, #68]	; (2118 <SX126xHal_ReadCommand+0x54>)
    20d4:	4628      	mov	r0, r5
    20d6:	47a0      	blx	r4
    20d8:	2800      	cmp	r0, #0
    20da:	d1fb      	bne.n	20d4 <SX126xHal_ReadCommand+0x10>

    NSS_ON
    20dc:	2100      	movs	r1, #0
    20de:	2052      	movs	r0, #82	; 0x52
    20e0:	4b0e      	ldr	r3, [pc, #56]	; (211c <SX126xHal_ReadCommand+0x58>)
    20e2:	4798      	blx	r3

    SendSpi((uint8_t *)&command, 1);
    20e4:	2101      	movs	r1, #1
    20e6:	f10d 0007 	add.w	r0, sp, #7
    20ea:	4b0d      	ldr	r3, [pc, #52]	; (2120 <SX126xHal_ReadCommand+0x5c>)
    20ec:	4798      	blx	r3
    if(command != RADIO_GET_STATUS){
    20ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    20f2:	2bc0      	cmp	r3, #192	; 0xc0
    20f4:	d006      	beq.n	2104 <SX126xHal_ReadCommand+0x40>
        uint8_t zero = 0x00; // Through the status for not-status commands
    20f6:	a804      	add	r0, sp, #16
    20f8:	2300      	movs	r3, #0
    20fa:	f800 3d01 	strb.w	r3, [r0, #-1]!
        SendSpi( &zero, 1);
    20fe:	2101      	movs	r1, #1
    2100:	4b07      	ldr	r3, [pc, #28]	; (2120 <SX126xHal_ReadCommand+0x5c>)
    2102:	4798      	blx	r3
    }
    ReadSpi(buffer, size);
    2104:	b2f9      	uxtb	r1, r7
    2106:	4630      	mov	r0, r6
    2108:	4b06      	ldr	r3, [pc, #24]	; (2124 <SX126xHal_ReadCommand+0x60>)
    210a:	4798      	blx	r3
    
    NSS_OFF
    210c:	2101      	movs	r1, #1
    210e:	2052      	movs	r0, #82	; 0x52
    2110:	4b02      	ldr	r3, [pc, #8]	; (211c <SX126xHal_ReadCommand+0x58>)
    2112:	4798      	blx	r3
    
}
    2114:	b005      	add	sp, #20
    2116:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2118:	00001871 	.word	0x00001871
    211c:	000018b9 	.word	0x000018b9
    2120:	00001911 	.word	0x00001911
    2124:	00001929 	.word	0x00001929

00002128 <SX126xHal_WriteRegister>:

void SX126xHal_WriteRegister( uint16_t address, uint8_t *buffer, uint16_t size )
{
    2128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    212c:	b082      	sub	sp, #8
    212e:	4606      	mov	r6, r0
    2130:	460f      	mov	r7, r1
    2132:	4690      	mov	r8, r2
    WAIT_BUSY
    2134:	2554      	movs	r5, #84	; 0x54
    2136:	4c13      	ldr	r4, [pc, #76]	; (2184 <SX126xHal_WriteRegister+0x5c>)
    2138:	4628      	mov	r0, r5
    213a:	47a0      	blx	r4
    213c:	2800      	cmp	r0, #0
    213e:	d1fb      	bne.n	2138 <SX126xHal_WriteRegister+0x10>

    NSS_ON
    2140:	2100      	movs	r1, #0
    2142:	2052      	movs	r0, #82	; 0x52
    2144:	4d10      	ldr	r5, [pc, #64]	; (2188 <SX126xHal_WriteRegister+0x60>)
    2146:	47a8      	blx	r5

    uint8_t address_high = (( address >> 8 ) & 0xFF);
    2148:	0a33      	lsrs	r3, r6, #8
    214a:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t address_low = ( address & 0xFF);
    214e:	f88d 6006 	strb.w	r6, [sp, #6]
    
    RadioCommands_t command = RADIO_WRITE_REGISTER;
    2152:	a802      	add	r0, sp, #8
    2154:	230d      	movs	r3, #13
    2156:	f800 3d03 	strb.w	r3, [r0, #-3]!
    SendSpi((uint8_t *) &command, 1);
    215a:	2101      	movs	r1, #1
    215c:	4c0b      	ldr	r4, [pc, #44]	; (218c <SX126xHal_WriteRegister+0x64>)
    215e:	47a0      	blx	r4
    SendSpi( &address_high , 1);
    2160:	2101      	movs	r1, #1
    2162:	f10d 0007 	add.w	r0, sp, #7
    2166:	47a0      	blx	r4
    SendSpi( &address_low , 1);
    2168:	2101      	movs	r1, #1
    216a:	f10d 0006 	add.w	r0, sp, #6
    216e:	47a0      	blx	r4
    SendSpi(buffer, size);
    2170:	fa5f f188 	uxtb.w	r1, r8
    2174:	4638      	mov	r0, r7
    2176:	47a0      	blx	r4
    
    NSS_OFF
    2178:	2101      	movs	r1, #1
    217a:	2052      	movs	r0, #82	; 0x52
    217c:	47a8      	blx	r5

}
    217e:	b002      	add	sp, #8
    2180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2184:	00001871 	.word	0x00001871
    2188:	000018b9 	.word	0x000018b9
    218c:	00001911 	.word	0x00001911

00002190 <SX126xHal_WriteReg>:

void SX126xHal_WriteReg( uint16_t address, uint8_t *value )
{
    2190:	b508      	push	{r3, lr}
    SX126xHal_WriteRegister(address, value, 1 );
    2192:	2201      	movs	r2, #1
    2194:	4b01      	ldr	r3, [pc, #4]	; (219c <SX126xHal_WriteReg+0xc>)
    2196:	4798      	blx	r3
    2198:	bd08      	pop	{r3, pc}
    219a:	bf00      	nop
    219c:	00002129 	.word	0x00002129

000021a0 <SX126xHal_ReadRegister>:
}

void SX126xHal_ReadRegister( uint16_t address, uint8_t *buffer, uint16_t size )
{
    21a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    21a4:	b082      	sub	sp, #8
    21a6:	4606      	mov	r6, r0
    21a8:	460f      	mov	r7, r1
    21aa:	4690      	mov	r8, r2
    WAIT_BUSY
    21ac:	2554      	movs	r5, #84	; 0x54
    21ae:	4c17      	ldr	r4, [pc, #92]	; (220c <SX126xHal_ReadRegister+0x6c>)
    21b0:	4628      	mov	r0, r5
    21b2:	47a0      	blx	r4
    21b4:	2800      	cmp	r0, #0
    21b6:	d1fb      	bne.n	21b0 <SX126xHal_ReadRegister+0x10>

    NSS_ON
    21b8:	2100      	movs	r1, #0
    21ba:	2052      	movs	r0, #82	; 0x52
    21bc:	4d14      	ldr	r5, [pc, #80]	; (2210 <SX126xHal_ReadRegister+0x70>)
    21be:	47a8      	blx	r5
    
    uint8_t address_high = (( address >> 8 ) & 0xFF);
    21c0:	0a33      	lsrs	r3, r6, #8
    21c2:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t address_low = ( address & 0xFF);
    21c6:	f88d 6006 	strb.w	r6, [sp, #6]

    uint8_t zero = 0;
    21ca:	2300      	movs	r3, #0
    21cc:	f88d 3005 	strb.w	r3, [sp, #5]
    RadioCommands_t command = RADIO_READ_REGISTER;
    21d0:	a802      	add	r0, sp, #8
    21d2:	231d      	movs	r3, #29
    21d4:	f800 3d04 	strb.w	r3, [r0, #-4]!
    
    SendSpi((uint8_t *) &command, 1);
    21d8:	2101      	movs	r1, #1
    21da:	4c0e      	ldr	r4, [pc, #56]	; (2214 <SX126xHal_ReadRegister+0x74>)
    21dc:	47a0      	blx	r4
    SendSpi( &address_high , 1);
    21de:	2101      	movs	r1, #1
    21e0:	f10d 0007 	add.w	r0, sp, #7
    21e4:	47a0      	blx	r4
    SendSpi( &address_low , 1);
    21e6:	2101      	movs	r1, #1
    21e8:	f10d 0006 	add.w	r0, sp, #6
    21ec:	47a0      	blx	r4
    SendSpi(&zero, 1);
    21ee:	2101      	movs	r1, #1
    21f0:	f10d 0005 	add.w	r0, sp, #5
    21f4:	47a0      	blx	r4
    ReadSpi(buffer, size); 
    21f6:	fa5f f188 	uxtb.w	r1, r8
    21fa:	4638      	mov	r0, r7
    21fc:	4b06      	ldr	r3, [pc, #24]	; (2218 <SX126xHal_ReadRegister+0x78>)
    21fe:	4798      	blx	r3
   
    NSS_OFF
    2200:	2101      	movs	r1, #1
    2202:	2052      	movs	r0, #82	; 0x52
    2204:	47a8      	blx	r5
    
}
    2206:	b002      	add	sp, #8
    2208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    220c:	00001871 	.word	0x00001871
    2210:	000018b9 	.word	0x000018b9
    2214:	00001911 	.word	0x00001911
    2218:	00001929 	.word	0x00001929

0000221c <SX126xHal_ReadReg>:

void SX126xHal_ReadReg( uint16_t address, uint8_t *data )
{
    221c:	b508      	push	{r3, lr}
    SX126xHal_ReadRegister( address, data, 1 );
    221e:	2201      	movs	r2, #1
    2220:	4b01      	ldr	r3, [pc, #4]	; (2228 <SX126xHal_ReadReg+0xc>)
    2222:	4798      	blx	r3
    2224:	bd08      	pop	{r3, pc}
    2226:	bf00      	nop
    2228:	000021a1 	.word	0x000021a1

0000222c <SX126xHal_ReadBuffer>:
    NSS_OFF

}

void SX126xHal_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
    222c:	b5f0      	push	{r4, r5, r6, r7, lr}
    222e:	b085      	sub	sp, #20
    2230:	460e      	mov	r6, r1
    2232:	4617      	mov	r7, r2
    2234:	f88d 0007 	strb.w	r0, [sp, #7]
    WAIT_BUSY
    2238:	2554      	movs	r5, #84	; 0x54
    223a:	4c12      	ldr	r4, [pc, #72]	; (2284 <SX126xHal_ReadBuffer+0x58>)
    223c:	4628      	mov	r0, r5
    223e:	47a0      	blx	r4
    2240:	2800      	cmp	r0, #0
    2242:	d1fb      	bne.n	223c <SX126xHal_ReadBuffer+0x10>

    NSS_ON
    2244:	2100      	movs	r1, #0
    2246:	2052      	movs	r0, #82	; 0x52
    2248:	4d0f      	ldr	r5, [pc, #60]	; (2288 <SX126xHal_ReadBuffer+0x5c>)
    224a:	47a8      	blx	r5
    
    RadioCommands_t command = RADIO_READ_BUFFER;
    224c:	231e      	movs	r3, #30
    224e:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8_t zero = 0;
    2252:	2300      	movs	r3, #0
    2254:	f88d 300e 	strb.w	r3, [sp, #14]
    SendSpi((uint8_t *) &command, 1);
    2258:	2101      	movs	r1, #1
    225a:	f10d 000f 	add.w	r0, sp, #15
    225e:	4c0b      	ldr	r4, [pc, #44]	; (228c <SX126xHal_ReadBuffer+0x60>)
    2260:	47a0      	blx	r4
    SendSpi(&offset, 1);
    2262:	2101      	movs	r1, #1
    2264:	f10d 0007 	add.w	r0, sp, #7
    2268:	47a0      	blx	r4
    SendSpi(&zero, 1);
    226a:	2101      	movs	r1, #1
    226c:	f10d 000e 	add.w	r0, sp, #14
    2270:	47a0      	blx	r4

    ReadSpi(buffer, size);
    2272:	4639      	mov	r1, r7
    2274:	4630      	mov	r0, r6
    2276:	4b06      	ldr	r3, [pc, #24]	; (2290 <SX126xHal_ReadBuffer+0x64>)
    2278:	4798      	blx	r3

    NSS_OFF
    227a:	2101      	movs	r1, #1
    227c:	2052      	movs	r0, #82	; 0x52
    227e:	47a8      	blx	r5
}
    2280:	b005      	add	sp, #20
    2282:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2284:	00001871 	.word	0x00001871
    2288:	000018b9 	.word	0x000018b9
    228c:	00001911 	.word	0x00001911
    2290:	00001929 	.word	0x00001929

00002294 <SX126xHal_AntSwOn>:
    return ( read_pin(DIO3) << 3 ) | ( read_pin(DIO2) << 2 ) | ( read_pin(DIO1) << 1 ) | ( read_pin(BUSY) << 0 );
}


void SX126xHal_AntSwOn( void )
{
    2294:	4770      	bx	lr
	...

00002298 <__aeabi_drsub>:
    2298:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    229c:	e002      	b.n	22a4 <__adddf3>
    229e:	bf00      	nop

000022a0 <__aeabi_dsub>:
    22a0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000022a4 <__adddf3>:
    22a4:	b530      	push	{r4, r5, lr}
    22a6:	ea4f 0441 	mov.w	r4, r1, lsl #1
    22aa:	ea4f 0543 	mov.w	r5, r3, lsl #1
    22ae:	ea94 0f05 	teq	r4, r5
    22b2:	bf08      	it	eq
    22b4:	ea90 0f02 	teqeq	r0, r2
    22b8:	bf1f      	itttt	ne
    22ba:	ea54 0c00 	orrsne.w	ip, r4, r0
    22be:	ea55 0c02 	orrsne.w	ip, r5, r2
    22c2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    22c6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    22ca:	f000 80e2 	beq.w	2492 <__adddf3+0x1ee>
    22ce:	ea4f 5454 	mov.w	r4, r4, lsr #21
    22d2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    22d6:	bfb8      	it	lt
    22d8:	426d      	neglt	r5, r5
    22da:	dd0c      	ble.n	22f6 <__adddf3+0x52>
    22dc:	442c      	add	r4, r5
    22de:	ea80 0202 	eor.w	r2, r0, r2
    22e2:	ea81 0303 	eor.w	r3, r1, r3
    22e6:	ea82 0000 	eor.w	r0, r2, r0
    22ea:	ea83 0101 	eor.w	r1, r3, r1
    22ee:	ea80 0202 	eor.w	r2, r0, r2
    22f2:	ea81 0303 	eor.w	r3, r1, r3
    22f6:	2d36      	cmp	r5, #54	; 0x36
    22f8:	bf88      	it	hi
    22fa:	bd30      	pophi	{r4, r5, pc}
    22fc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    2300:	ea4f 3101 	mov.w	r1, r1, lsl #12
    2304:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    2308:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    230c:	d002      	beq.n	2314 <__adddf3+0x70>
    230e:	4240      	negs	r0, r0
    2310:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    2314:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    2318:	ea4f 3303 	mov.w	r3, r3, lsl #12
    231c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    2320:	d002      	beq.n	2328 <__adddf3+0x84>
    2322:	4252      	negs	r2, r2
    2324:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    2328:	ea94 0f05 	teq	r4, r5
    232c:	f000 80a7 	beq.w	247e <__adddf3+0x1da>
    2330:	f1a4 0401 	sub.w	r4, r4, #1
    2334:	f1d5 0e20 	rsbs	lr, r5, #32
    2338:	db0d      	blt.n	2356 <__adddf3+0xb2>
    233a:	fa02 fc0e 	lsl.w	ip, r2, lr
    233e:	fa22 f205 	lsr.w	r2, r2, r5
    2342:	1880      	adds	r0, r0, r2
    2344:	f141 0100 	adc.w	r1, r1, #0
    2348:	fa03 f20e 	lsl.w	r2, r3, lr
    234c:	1880      	adds	r0, r0, r2
    234e:	fa43 f305 	asr.w	r3, r3, r5
    2352:	4159      	adcs	r1, r3
    2354:	e00e      	b.n	2374 <__adddf3+0xd0>
    2356:	f1a5 0520 	sub.w	r5, r5, #32
    235a:	f10e 0e20 	add.w	lr, lr, #32
    235e:	2a01      	cmp	r2, #1
    2360:	fa03 fc0e 	lsl.w	ip, r3, lr
    2364:	bf28      	it	cs
    2366:	f04c 0c02 	orrcs.w	ip, ip, #2
    236a:	fa43 f305 	asr.w	r3, r3, r5
    236e:	18c0      	adds	r0, r0, r3
    2370:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    2374:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    2378:	d507      	bpl.n	238a <__adddf3+0xe6>
    237a:	f04f 0e00 	mov.w	lr, #0
    237e:	f1dc 0c00 	rsbs	ip, ip, #0
    2382:	eb7e 0000 	sbcs.w	r0, lr, r0
    2386:	eb6e 0101 	sbc.w	r1, lr, r1
    238a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    238e:	d31b      	bcc.n	23c8 <__adddf3+0x124>
    2390:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    2394:	d30c      	bcc.n	23b0 <__adddf3+0x10c>
    2396:	0849      	lsrs	r1, r1, #1
    2398:	ea5f 0030 	movs.w	r0, r0, rrx
    239c:	ea4f 0c3c 	mov.w	ip, ip, rrx
    23a0:	f104 0401 	add.w	r4, r4, #1
    23a4:	ea4f 5244 	mov.w	r2, r4, lsl #21
    23a8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    23ac:	f080 809a 	bcs.w	24e4 <__adddf3+0x240>
    23b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    23b4:	bf08      	it	eq
    23b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    23ba:	f150 0000 	adcs.w	r0, r0, #0
    23be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    23c2:	ea41 0105 	orr.w	r1, r1, r5
    23c6:	bd30      	pop	{r4, r5, pc}
    23c8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    23cc:	4140      	adcs	r0, r0
    23ce:	eb41 0101 	adc.w	r1, r1, r1
    23d2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    23d6:	f1a4 0401 	sub.w	r4, r4, #1
    23da:	d1e9      	bne.n	23b0 <__adddf3+0x10c>
    23dc:	f091 0f00 	teq	r1, #0
    23e0:	bf04      	itt	eq
    23e2:	4601      	moveq	r1, r0
    23e4:	2000      	moveq	r0, #0
    23e6:	fab1 f381 	clz	r3, r1
    23ea:	bf08      	it	eq
    23ec:	3320      	addeq	r3, #32
    23ee:	f1a3 030b 	sub.w	r3, r3, #11
    23f2:	f1b3 0220 	subs.w	r2, r3, #32
    23f6:	da0c      	bge.n	2412 <__adddf3+0x16e>
    23f8:	320c      	adds	r2, #12
    23fa:	dd08      	ble.n	240e <__adddf3+0x16a>
    23fc:	f102 0c14 	add.w	ip, r2, #20
    2400:	f1c2 020c 	rsb	r2, r2, #12
    2404:	fa01 f00c 	lsl.w	r0, r1, ip
    2408:	fa21 f102 	lsr.w	r1, r1, r2
    240c:	e00c      	b.n	2428 <__adddf3+0x184>
    240e:	f102 0214 	add.w	r2, r2, #20
    2412:	bfd8      	it	le
    2414:	f1c2 0c20 	rsble	ip, r2, #32
    2418:	fa01 f102 	lsl.w	r1, r1, r2
    241c:	fa20 fc0c 	lsr.w	ip, r0, ip
    2420:	bfdc      	itt	le
    2422:	ea41 010c 	orrle.w	r1, r1, ip
    2426:	4090      	lslle	r0, r2
    2428:	1ae4      	subs	r4, r4, r3
    242a:	bfa2      	ittt	ge
    242c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    2430:	4329      	orrge	r1, r5
    2432:	bd30      	popge	{r4, r5, pc}
    2434:	ea6f 0404 	mvn.w	r4, r4
    2438:	3c1f      	subs	r4, #31
    243a:	da1c      	bge.n	2476 <__adddf3+0x1d2>
    243c:	340c      	adds	r4, #12
    243e:	dc0e      	bgt.n	245e <__adddf3+0x1ba>
    2440:	f104 0414 	add.w	r4, r4, #20
    2444:	f1c4 0220 	rsb	r2, r4, #32
    2448:	fa20 f004 	lsr.w	r0, r0, r4
    244c:	fa01 f302 	lsl.w	r3, r1, r2
    2450:	ea40 0003 	orr.w	r0, r0, r3
    2454:	fa21 f304 	lsr.w	r3, r1, r4
    2458:	ea45 0103 	orr.w	r1, r5, r3
    245c:	bd30      	pop	{r4, r5, pc}
    245e:	f1c4 040c 	rsb	r4, r4, #12
    2462:	f1c4 0220 	rsb	r2, r4, #32
    2466:	fa20 f002 	lsr.w	r0, r0, r2
    246a:	fa01 f304 	lsl.w	r3, r1, r4
    246e:	ea40 0003 	orr.w	r0, r0, r3
    2472:	4629      	mov	r1, r5
    2474:	bd30      	pop	{r4, r5, pc}
    2476:	fa21 f004 	lsr.w	r0, r1, r4
    247a:	4629      	mov	r1, r5
    247c:	bd30      	pop	{r4, r5, pc}
    247e:	f094 0f00 	teq	r4, #0
    2482:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    2486:	bf06      	itte	eq
    2488:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    248c:	3401      	addeq	r4, #1
    248e:	3d01      	subne	r5, #1
    2490:	e74e      	b.n	2330 <__adddf3+0x8c>
    2492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    2496:	bf18      	it	ne
    2498:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    249c:	d029      	beq.n	24f2 <__adddf3+0x24e>
    249e:	ea94 0f05 	teq	r4, r5
    24a2:	bf08      	it	eq
    24a4:	ea90 0f02 	teqeq	r0, r2
    24a8:	d005      	beq.n	24b6 <__adddf3+0x212>
    24aa:	ea54 0c00 	orrs.w	ip, r4, r0
    24ae:	bf04      	itt	eq
    24b0:	4619      	moveq	r1, r3
    24b2:	4610      	moveq	r0, r2
    24b4:	bd30      	pop	{r4, r5, pc}
    24b6:	ea91 0f03 	teq	r1, r3
    24ba:	bf1e      	ittt	ne
    24bc:	2100      	movne	r1, #0
    24be:	2000      	movne	r0, #0
    24c0:	bd30      	popne	{r4, r5, pc}
    24c2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    24c6:	d105      	bne.n	24d4 <__adddf3+0x230>
    24c8:	0040      	lsls	r0, r0, #1
    24ca:	4149      	adcs	r1, r1
    24cc:	bf28      	it	cs
    24ce:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    24d2:	bd30      	pop	{r4, r5, pc}
    24d4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    24d8:	bf3c      	itt	cc
    24da:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    24de:	bd30      	popcc	{r4, r5, pc}
    24e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    24e4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    24e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    24ec:	f04f 0000 	mov.w	r0, #0
    24f0:	bd30      	pop	{r4, r5, pc}
    24f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    24f6:	bf1a      	itte	ne
    24f8:	4619      	movne	r1, r3
    24fa:	4610      	movne	r0, r2
    24fc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    2500:	bf1c      	itt	ne
    2502:	460b      	movne	r3, r1
    2504:	4602      	movne	r2, r0
    2506:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    250a:	bf06      	itte	eq
    250c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    2510:	ea91 0f03 	teqeq	r1, r3
    2514:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    2518:	bd30      	pop	{r4, r5, pc}
    251a:	bf00      	nop

0000251c <__aeabi_ui2d>:
    251c:	f090 0f00 	teq	r0, #0
    2520:	bf04      	itt	eq
    2522:	2100      	moveq	r1, #0
    2524:	4770      	bxeq	lr
    2526:	b530      	push	{r4, r5, lr}
    2528:	f44f 6480 	mov.w	r4, #1024	; 0x400
    252c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    2530:	f04f 0500 	mov.w	r5, #0
    2534:	f04f 0100 	mov.w	r1, #0
    2538:	e750      	b.n	23dc <__adddf3+0x138>
    253a:	bf00      	nop

0000253c <__aeabi_i2d>:
    253c:	f090 0f00 	teq	r0, #0
    2540:	bf04      	itt	eq
    2542:	2100      	moveq	r1, #0
    2544:	4770      	bxeq	lr
    2546:	b530      	push	{r4, r5, lr}
    2548:	f44f 6480 	mov.w	r4, #1024	; 0x400
    254c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    2550:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    2554:	bf48      	it	mi
    2556:	4240      	negmi	r0, r0
    2558:	f04f 0100 	mov.w	r1, #0
    255c:	e73e      	b.n	23dc <__adddf3+0x138>
    255e:	bf00      	nop

00002560 <__aeabi_f2d>:
    2560:	0042      	lsls	r2, r0, #1
    2562:	ea4f 01e2 	mov.w	r1, r2, asr #3
    2566:	ea4f 0131 	mov.w	r1, r1, rrx
    256a:	ea4f 7002 	mov.w	r0, r2, lsl #28
    256e:	bf1f      	itttt	ne
    2570:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    2574:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    2578:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    257c:	4770      	bxne	lr
    257e:	f092 0f00 	teq	r2, #0
    2582:	bf14      	ite	ne
    2584:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    2588:	4770      	bxeq	lr
    258a:	b530      	push	{r4, r5, lr}
    258c:	f44f 7460 	mov.w	r4, #896	; 0x380
    2590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    2594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    2598:	e720      	b.n	23dc <__adddf3+0x138>
    259a:	bf00      	nop

0000259c <__aeabi_ul2d>:
    259c:	ea50 0201 	orrs.w	r2, r0, r1
    25a0:	bf08      	it	eq
    25a2:	4770      	bxeq	lr
    25a4:	b530      	push	{r4, r5, lr}
    25a6:	f04f 0500 	mov.w	r5, #0
    25aa:	e00a      	b.n	25c2 <__aeabi_l2d+0x16>

000025ac <__aeabi_l2d>:
    25ac:	ea50 0201 	orrs.w	r2, r0, r1
    25b0:	bf08      	it	eq
    25b2:	4770      	bxeq	lr
    25b4:	b530      	push	{r4, r5, lr}
    25b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    25ba:	d502      	bpl.n	25c2 <__aeabi_l2d+0x16>
    25bc:	4240      	negs	r0, r0
    25be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    25c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
    25c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
    25ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    25ce:	f43f aedc 	beq.w	238a <__adddf3+0xe6>
    25d2:	f04f 0203 	mov.w	r2, #3
    25d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    25da:	bf18      	it	ne
    25dc:	3203      	addne	r2, #3
    25de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    25e2:	bf18      	it	ne
    25e4:	3203      	addne	r2, #3
    25e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    25ea:	f1c2 0320 	rsb	r3, r2, #32
    25ee:	fa00 fc03 	lsl.w	ip, r0, r3
    25f2:	fa20 f002 	lsr.w	r0, r0, r2
    25f6:	fa01 fe03 	lsl.w	lr, r1, r3
    25fa:	ea40 000e 	orr.w	r0, r0, lr
    25fe:	fa21 f102 	lsr.w	r1, r1, r2
    2602:	4414      	add	r4, r2
    2604:	e6c1      	b.n	238a <__adddf3+0xe6>
    2606:	bf00      	nop

00002608 <__aeabi_dmul>:
    2608:	b570      	push	{r4, r5, r6, lr}
    260a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    260e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    2612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    2616:	bf1d      	ittte	ne
    2618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    261c:	ea94 0f0c 	teqne	r4, ip
    2620:	ea95 0f0c 	teqne	r5, ip
    2624:	f000 f8de 	bleq	27e4 <__aeabi_dmul+0x1dc>
    2628:	442c      	add	r4, r5
    262a:	ea81 0603 	eor.w	r6, r1, r3
    262e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    2632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    2636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    263a:	bf18      	it	ne
    263c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    2640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    2644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    2648:	d038      	beq.n	26bc <__aeabi_dmul+0xb4>
    264a:	fba0 ce02 	umull	ip, lr, r0, r2
    264e:	f04f 0500 	mov.w	r5, #0
    2652:	fbe1 e502 	umlal	lr, r5, r1, r2
    2656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    265a:	fbe0 e503 	umlal	lr, r5, r0, r3
    265e:	f04f 0600 	mov.w	r6, #0
    2662:	fbe1 5603 	umlal	r5, r6, r1, r3
    2666:	f09c 0f00 	teq	ip, #0
    266a:	bf18      	it	ne
    266c:	f04e 0e01 	orrne.w	lr, lr, #1
    2670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    2674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    2678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    267c:	d204      	bcs.n	2688 <__aeabi_dmul+0x80>
    267e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    2682:	416d      	adcs	r5, r5
    2684:	eb46 0606 	adc.w	r6, r6, r6
    2688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    268c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    2690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    2694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    2698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    269c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    26a0:	bf88      	it	hi
    26a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    26a6:	d81e      	bhi.n	26e6 <__aeabi_dmul+0xde>
    26a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    26ac:	bf08      	it	eq
    26ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    26b2:	f150 0000 	adcs.w	r0, r0, #0
    26b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    26ba:	bd70      	pop	{r4, r5, r6, pc}
    26bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    26c0:	ea46 0101 	orr.w	r1, r6, r1
    26c4:	ea40 0002 	orr.w	r0, r0, r2
    26c8:	ea81 0103 	eor.w	r1, r1, r3
    26cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    26d0:	bfc2      	ittt	gt
    26d2:	ebd4 050c 	rsbsgt	r5, r4, ip
    26d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    26da:	bd70      	popgt	{r4, r5, r6, pc}
    26dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    26e0:	f04f 0e00 	mov.w	lr, #0
    26e4:	3c01      	subs	r4, #1
    26e6:	f300 80ab 	bgt.w	2840 <__aeabi_dmul+0x238>
    26ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
    26ee:	bfde      	ittt	le
    26f0:	2000      	movle	r0, #0
    26f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    26f6:	bd70      	pople	{r4, r5, r6, pc}
    26f8:	f1c4 0400 	rsb	r4, r4, #0
    26fc:	3c20      	subs	r4, #32
    26fe:	da35      	bge.n	276c <__aeabi_dmul+0x164>
    2700:	340c      	adds	r4, #12
    2702:	dc1b      	bgt.n	273c <__aeabi_dmul+0x134>
    2704:	f104 0414 	add.w	r4, r4, #20
    2708:	f1c4 0520 	rsb	r5, r4, #32
    270c:	fa00 f305 	lsl.w	r3, r0, r5
    2710:	fa20 f004 	lsr.w	r0, r0, r4
    2714:	fa01 f205 	lsl.w	r2, r1, r5
    2718:	ea40 0002 	orr.w	r0, r0, r2
    271c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    2720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    2724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    2728:	fa21 f604 	lsr.w	r6, r1, r4
    272c:	eb42 0106 	adc.w	r1, r2, r6
    2730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    2734:	bf08      	it	eq
    2736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    273a:	bd70      	pop	{r4, r5, r6, pc}
    273c:	f1c4 040c 	rsb	r4, r4, #12
    2740:	f1c4 0520 	rsb	r5, r4, #32
    2744:	fa00 f304 	lsl.w	r3, r0, r4
    2748:	fa20 f005 	lsr.w	r0, r0, r5
    274c:	fa01 f204 	lsl.w	r2, r1, r4
    2750:	ea40 0002 	orr.w	r0, r0, r2
    2754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    2758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    275c:	f141 0100 	adc.w	r1, r1, #0
    2760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    2764:	bf08      	it	eq
    2766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    276a:	bd70      	pop	{r4, r5, r6, pc}
    276c:	f1c4 0520 	rsb	r5, r4, #32
    2770:	fa00 f205 	lsl.w	r2, r0, r5
    2774:	ea4e 0e02 	orr.w	lr, lr, r2
    2778:	fa20 f304 	lsr.w	r3, r0, r4
    277c:	fa01 f205 	lsl.w	r2, r1, r5
    2780:	ea43 0302 	orr.w	r3, r3, r2
    2784:	fa21 f004 	lsr.w	r0, r1, r4
    2788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    278c:	fa21 f204 	lsr.w	r2, r1, r4
    2790:	ea20 0002 	bic.w	r0, r0, r2
    2794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    2798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    279c:	bf08      	it	eq
    279e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    27a2:	bd70      	pop	{r4, r5, r6, pc}
    27a4:	f094 0f00 	teq	r4, #0
    27a8:	d10f      	bne.n	27ca <__aeabi_dmul+0x1c2>
    27aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    27ae:	0040      	lsls	r0, r0, #1
    27b0:	eb41 0101 	adc.w	r1, r1, r1
    27b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    27b8:	bf08      	it	eq
    27ba:	3c01      	subeq	r4, #1
    27bc:	d0f7      	beq.n	27ae <__aeabi_dmul+0x1a6>
    27be:	ea41 0106 	orr.w	r1, r1, r6
    27c2:	f095 0f00 	teq	r5, #0
    27c6:	bf18      	it	ne
    27c8:	4770      	bxne	lr
    27ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    27ce:	0052      	lsls	r2, r2, #1
    27d0:	eb43 0303 	adc.w	r3, r3, r3
    27d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    27d8:	bf08      	it	eq
    27da:	3d01      	subeq	r5, #1
    27dc:	d0f7      	beq.n	27ce <__aeabi_dmul+0x1c6>
    27de:	ea43 0306 	orr.w	r3, r3, r6
    27e2:	4770      	bx	lr
    27e4:	ea94 0f0c 	teq	r4, ip
    27e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    27ec:	bf18      	it	ne
    27ee:	ea95 0f0c 	teqne	r5, ip
    27f2:	d00c      	beq.n	280e <__aeabi_dmul+0x206>
    27f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    27f8:	bf18      	it	ne
    27fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    27fe:	d1d1      	bne.n	27a4 <__aeabi_dmul+0x19c>
    2800:	ea81 0103 	eor.w	r1, r1, r3
    2804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    2808:	f04f 0000 	mov.w	r0, #0
    280c:	bd70      	pop	{r4, r5, r6, pc}
    280e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    2812:	bf06      	itte	eq
    2814:	4610      	moveq	r0, r2
    2816:	4619      	moveq	r1, r3
    2818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    281c:	d019      	beq.n	2852 <__aeabi_dmul+0x24a>
    281e:	ea94 0f0c 	teq	r4, ip
    2822:	d102      	bne.n	282a <__aeabi_dmul+0x222>
    2824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    2828:	d113      	bne.n	2852 <__aeabi_dmul+0x24a>
    282a:	ea95 0f0c 	teq	r5, ip
    282e:	d105      	bne.n	283c <__aeabi_dmul+0x234>
    2830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    2834:	bf1c      	itt	ne
    2836:	4610      	movne	r0, r2
    2838:	4619      	movne	r1, r3
    283a:	d10a      	bne.n	2852 <__aeabi_dmul+0x24a>
    283c:	ea81 0103 	eor.w	r1, r1, r3
    2840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    2844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    2848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    284c:	f04f 0000 	mov.w	r0, #0
    2850:	bd70      	pop	{r4, r5, r6, pc}
    2852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    2856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    285a:	bd70      	pop	{r4, r5, r6, pc}

0000285c <__aeabi_ddiv>:
    285c:	b570      	push	{r4, r5, r6, lr}
    285e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    2862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    2866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    286a:	bf1d      	ittte	ne
    286c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    2870:	ea94 0f0c 	teqne	r4, ip
    2874:	ea95 0f0c 	teqne	r5, ip
    2878:	f000 f8a7 	bleq	29ca <__aeabi_ddiv+0x16e>
    287c:	eba4 0405 	sub.w	r4, r4, r5
    2880:	ea81 0e03 	eor.w	lr, r1, r3
    2884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    2888:	ea4f 3101 	mov.w	r1, r1, lsl #12
    288c:	f000 8088 	beq.w	29a0 <__aeabi_ddiv+0x144>
    2890:	ea4f 3303 	mov.w	r3, r3, lsl #12
    2894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    2898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    289c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    28a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
    28a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    28a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    28ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
    28b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    28b4:	429d      	cmp	r5, r3
    28b6:	bf08      	it	eq
    28b8:	4296      	cmpeq	r6, r2
    28ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    28be:	f504 7440 	add.w	r4, r4, #768	; 0x300
    28c2:	d202      	bcs.n	28ca <__aeabi_ddiv+0x6e>
    28c4:	085b      	lsrs	r3, r3, #1
    28c6:	ea4f 0232 	mov.w	r2, r2, rrx
    28ca:	1ab6      	subs	r6, r6, r2
    28cc:	eb65 0503 	sbc.w	r5, r5, r3
    28d0:	085b      	lsrs	r3, r3, #1
    28d2:	ea4f 0232 	mov.w	r2, r2, rrx
    28d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    28da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    28de:	ebb6 0e02 	subs.w	lr, r6, r2
    28e2:	eb75 0e03 	sbcs.w	lr, r5, r3
    28e6:	bf22      	ittt	cs
    28e8:	1ab6      	subcs	r6, r6, r2
    28ea:	4675      	movcs	r5, lr
    28ec:	ea40 000c 	orrcs.w	r0, r0, ip
    28f0:	085b      	lsrs	r3, r3, #1
    28f2:	ea4f 0232 	mov.w	r2, r2, rrx
    28f6:	ebb6 0e02 	subs.w	lr, r6, r2
    28fa:	eb75 0e03 	sbcs.w	lr, r5, r3
    28fe:	bf22      	ittt	cs
    2900:	1ab6      	subcs	r6, r6, r2
    2902:	4675      	movcs	r5, lr
    2904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    2908:	085b      	lsrs	r3, r3, #1
    290a:	ea4f 0232 	mov.w	r2, r2, rrx
    290e:	ebb6 0e02 	subs.w	lr, r6, r2
    2912:	eb75 0e03 	sbcs.w	lr, r5, r3
    2916:	bf22      	ittt	cs
    2918:	1ab6      	subcs	r6, r6, r2
    291a:	4675      	movcs	r5, lr
    291c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    2920:	085b      	lsrs	r3, r3, #1
    2922:	ea4f 0232 	mov.w	r2, r2, rrx
    2926:	ebb6 0e02 	subs.w	lr, r6, r2
    292a:	eb75 0e03 	sbcs.w	lr, r5, r3
    292e:	bf22      	ittt	cs
    2930:	1ab6      	subcs	r6, r6, r2
    2932:	4675      	movcs	r5, lr
    2934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    2938:	ea55 0e06 	orrs.w	lr, r5, r6
    293c:	d018      	beq.n	2970 <__aeabi_ddiv+0x114>
    293e:	ea4f 1505 	mov.w	r5, r5, lsl #4
    2942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    2946:	ea4f 1606 	mov.w	r6, r6, lsl #4
    294a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    294e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    2952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    2956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    295a:	d1c0      	bne.n	28de <__aeabi_ddiv+0x82>
    295c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    2960:	d10b      	bne.n	297a <__aeabi_ddiv+0x11e>
    2962:	ea41 0100 	orr.w	r1, r1, r0
    2966:	f04f 0000 	mov.w	r0, #0
    296a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    296e:	e7b6      	b.n	28de <__aeabi_ddiv+0x82>
    2970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    2974:	bf04      	itt	eq
    2976:	4301      	orreq	r1, r0
    2978:	2000      	moveq	r0, #0
    297a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    297e:	bf88      	it	hi
    2980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    2984:	f63f aeaf 	bhi.w	26e6 <__aeabi_dmul+0xde>
    2988:	ebb5 0c03 	subs.w	ip, r5, r3
    298c:	bf04      	itt	eq
    298e:	ebb6 0c02 	subseq.w	ip, r6, r2
    2992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    2996:	f150 0000 	adcs.w	r0, r0, #0
    299a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    299e:	bd70      	pop	{r4, r5, r6, pc}
    29a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    29a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    29a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    29ac:	bfc2      	ittt	gt
    29ae:	ebd4 050c 	rsbsgt	r5, r4, ip
    29b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    29b6:	bd70      	popgt	{r4, r5, r6, pc}
    29b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    29bc:	f04f 0e00 	mov.w	lr, #0
    29c0:	3c01      	subs	r4, #1
    29c2:	e690      	b.n	26e6 <__aeabi_dmul+0xde>
    29c4:	ea45 0e06 	orr.w	lr, r5, r6
    29c8:	e68d      	b.n	26e6 <__aeabi_dmul+0xde>
    29ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    29ce:	ea94 0f0c 	teq	r4, ip
    29d2:	bf08      	it	eq
    29d4:	ea95 0f0c 	teqeq	r5, ip
    29d8:	f43f af3b 	beq.w	2852 <__aeabi_dmul+0x24a>
    29dc:	ea94 0f0c 	teq	r4, ip
    29e0:	d10a      	bne.n	29f8 <__aeabi_ddiv+0x19c>
    29e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    29e6:	f47f af34 	bne.w	2852 <__aeabi_dmul+0x24a>
    29ea:	ea95 0f0c 	teq	r5, ip
    29ee:	f47f af25 	bne.w	283c <__aeabi_dmul+0x234>
    29f2:	4610      	mov	r0, r2
    29f4:	4619      	mov	r1, r3
    29f6:	e72c      	b.n	2852 <__aeabi_dmul+0x24a>
    29f8:	ea95 0f0c 	teq	r5, ip
    29fc:	d106      	bne.n	2a0c <__aeabi_ddiv+0x1b0>
    29fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    2a02:	f43f aefd 	beq.w	2800 <__aeabi_dmul+0x1f8>
    2a06:	4610      	mov	r0, r2
    2a08:	4619      	mov	r1, r3
    2a0a:	e722      	b.n	2852 <__aeabi_dmul+0x24a>
    2a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    2a10:	bf18      	it	ne
    2a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    2a16:	f47f aec5 	bne.w	27a4 <__aeabi_dmul+0x19c>
    2a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    2a1e:	f47f af0d 	bne.w	283c <__aeabi_dmul+0x234>
    2a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    2a26:	f47f aeeb 	bne.w	2800 <__aeabi_dmul+0x1f8>
    2a2a:	e712      	b.n	2852 <__aeabi_dmul+0x24a>

00002a2c <__aeabi_d2uiz>:
    2a2c:	004a      	lsls	r2, r1, #1
    2a2e:	d211      	bcs.n	2a54 <__aeabi_d2uiz+0x28>
    2a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    2a34:	d211      	bcs.n	2a5a <__aeabi_d2uiz+0x2e>
    2a36:	d50d      	bpl.n	2a54 <__aeabi_d2uiz+0x28>
    2a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    2a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    2a40:	d40e      	bmi.n	2a60 <__aeabi_d2uiz+0x34>
    2a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    2a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    2a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    2a4e:	fa23 f002 	lsr.w	r0, r3, r2
    2a52:	4770      	bx	lr
    2a54:	f04f 0000 	mov.w	r0, #0
    2a58:	4770      	bx	lr
    2a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    2a5e:	d102      	bne.n	2a66 <__aeabi_d2uiz+0x3a>
    2a60:	f04f 30ff 	mov.w	r0, #4294967295
    2a64:	4770      	bx	lr
    2a66:	f04f 0000 	mov.w	r0, #0
    2a6a:	4770      	bx	lr

00002a6c <__libc_init_array>:
    2a6c:	b570      	push	{r4, r5, r6, lr}
    2a6e:	4e0d      	ldr	r6, [pc, #52]	; (2aa4 <__libc_init_array+0x38>)
    2a70:	4c0d      	ldr	r4, [pc, #52]	; (2aa8 <__libc_init_array+0x3c>)
    2a72:	1ba4      	subs	r4, r4, r6
    2a74:	10a4      	asrs	r4, r4, #2
    2a76:	2500      	movs	r5, #0
    2a78:	42a5      	cmp	r5, r4
    2a7a:	d109      	bne.n	2a90 <__libc_init_array+0x24>
    2a7c:	4e0b      	ldr	r6, [pc, #44]	; (2aac <__libc_init_array+0x40>)
    2a7e:	4c0c      	ldr	r4, [pc, #48]	; (2ab0 <__libc_init_array+0x44>)
    2a80:	f000 f8be 	bl	2c00 <_init>
    2a84:	1ba4      	subs	r4, r4, r6
    2a86:	10a4      	asrs	r4, r4, #2
    2a88:	2500      	movs	r5, #0
    2a8a:	42a5      	cmp	r5, r4
    2a8c:	d105      	bne.n	2a9a <__libc_init_array+0x2e>
    2a8e:	bd70      	pop	{r4, r5, r6, pc}
    2a90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2a94:	4798      	blx	r3
    2a96:	3501      	adds	r5, #1
    2a98:	e7ee      	b.n	2a78 <__libc_init_array+0xc>
    2a9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2a9e:	4798      	blx	r3
    2aa0:	3501      	adds	r5, #1
    2aa2:	e7f2      	b.n	2a8a <__libc_init_array+0x1e>
    2aa4:	00002c0c 	.word	0x00002c0c
    2aa8:	00002c0c 	.word	0x00002c0c
    2aac:	00002c0c 	.word	0x00002c0c
    2ab0:	00002c10 	.word	0x00002c10
    2ab4:	682f2e2e 	.word	0x682f2e2e
    2ab8:	732f6c61 	.word	0x732f6c61
    2abc:	682f6372 	.word	0x682f6372
    2ac0:	695f6c61 	.word	0x695f6c61
    2ac4:	00632e6f 	.word	0x00632e6f
    2ac8:	682f2e2e 	.word	0x682f2e2e
    2acc:	732f6c61 	.word	0x732f6c61
    2ad0:	682f6372 	.word	0x682f6372
    2ad4:	735f6c61 	.word	0x735f6c61
    2ad8:	6d5f6970 	.word	0x6d5f6970
    2adc:	6e79735f 	.word	0x6e79735f
    2ae0:	00632e63 	.word	0x00632e63
    2ae4:	682f2e2e 	.word	0x682f2e2e
    2ae8:	732f6c61 	.word	0x732f6c61
    2aec:	682f6372 	.word	0x682f6372
    2af0:	745f6c61 	.word	0x745f6c61
    2af4:	72656d69 	.word	0x72656d69
    2af8:	0000632e 	.word	0x0000632e
    2afc:	682f2e2e 	.word	0x682f2e2e
    2b00:	732f6c61 	.word	0x732f6c61
    2b04:	682f6372 	.word	0x682f6372
    2b08:	755f6c61 	.word	0x755f6c61
    2b0c:	74726173 	.word	0x74726173
    2b10:	6e79735f 	.word	0x6e79735f
    2b14:	00632e63 	.word	0x00632e63
    2b18:	682f2e2e 	.word	0x682f2e2e
    2b1c:	752f6c61 	.word	0x752f6c61
    2b20:	736c6974 	.word	0x736c6974
    2b24:	6372732f 	.word	0x6372732f
    2b28:	6974752f 	.word	0x6974752f
    2b2c:	6c5f736c 	.word	0x6c5f736c
    2b30:	2e747369 	.word	0x2e747369
    2b34:	00000063 	.word	0x00000063

00002b38 <_map>:
    2b38:	00000000 00000040 682f2e2e 652f6c70     ....@...../hpl/e
    2b48:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....
    2b58:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    2b68:	43000000 43000400 43000800 43000c00     ...C...C...C...C

00002b78 <_i2cms>:
	...
    2b90:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    2ba0:	65735f6c 6d6f6372 0000632e 40003800     l_sercom.c...8.@
    2bb0:	40003c00 4101a000 4101c000 42001400     .<.@...A...A...B
    2bc0:	42001800 43001400 43001800              ...B...C...C

00002bcc <_tcs>:
    2bcc:	00720007 00000308 00000000 00001770     ..r.........p...
    2bdc:	00000000 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
    2bec:	63745f6c 0000632e 65636552 64657669     l_tc.c..Received
    2bfc:	00000a21                                !...

00002c00 <_init>:
    2c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c02:	bf00      	nop
    2c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2c06:	bc08      	pop	{r3}
    2c08:	469e      	mov	lr, r3
    2c0a:	4770      	bx	lr

00002c0c <__init_array_start>:
    2c0c:	00000289 	.word	0x00000289

00002c10 <_fini>:
    2c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c12:	bf00      	nop
    2c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2c16:	bc08      	pop	{r3}
    2c18:	469e      	mov	lr, r3
    2c1a:	4770      	bx	lr

00002c1c <__fini_array_start>:
    2c1c:	00000265 	.word	0x00000265
